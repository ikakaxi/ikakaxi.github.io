<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JIMU组件化开发流程</title>
      <link href="/2018/04/15/JIMU%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/04/15/JIMU%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>github：<a href="https://github.com/mqzhangw/JIMU" target="_blank" rel="noopener">https://github.com/mqzhangw/JIMU</a><br>目前公司的项目用到了组件化开发，这里记录一下开发流程，基本就是官网的文档，我只是整理了一下，加了一些说明，重点记录一下如何填坑。</p><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h2><h3 id="配置根目录"><a href="#配置根目录" class="headerlink" title="配置根目录"></a>配置根目录</h3><p>在<strong>根目录</strong>的<strong>gradle.properties</strong>文件中，增加属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainmodulename=app</span><br></pre></td></tr></table></figure><p>其中mainmodulename是项目中的host工程名称(主模块），一般名字为app</p><p>在<strong>根目录</strong>的<strong>build.gradle</strong>中增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.luojilab.ddcomponent:build-gradle:1.2.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置主模块和每个组件"><a href="#配置主模块和每个组件" class="headerlink" title="配置主模块和每个组件"></a>配置主模块和每个组件</h3><h4 id="配置build-gradle文件"><a href="#配置build-gradle文件" class="headerlink" title="配置build.gradle文件"></a>配置build.gradle文件</h4><p>在主模块和每个组件都增加如下插件：</p><p><strong>注意，只有主模块和组件模块才需要这样配置，而平时用的library模块不需要做如下改动</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.dd.comgradle'</span></span><br></pre></td></tr></table></figure><p>在主模块和每个组件都加入如下依赖，如果项目中存在basiclib等基础lib库，可以统一交给basiclib引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.luojilab.ddcomponent:componentlib:1.3.0'</span></span><br></pre></td></tr></table></figure><p><strong>注意：主模块和组件模块不需要再引用com.android.application或者com.android.library</strong></p><p>在主模块和每个组件都增加以下配置，设置组件单独运行时候的Application（如果不需要单独运行可以不设置），其中<strong>isRegisterCompoAuto</strong>参数我解释一下，如果该值为<strong>true</strong>，意思是该模块需要的组件只需要在gradle.properties里配置就可以了，JIMU会自动注册这些组件，如果为<strong>false</strong>意思是不仅要在gradle.properties里配置里配置组件，还需要手动注册这些组件，如果该组件里不需要引入其他组件该值也可以不设置，否则一般把该值设置为true即可。</p><p>如果applicationName和isRegisterCompoAuto都不设置，combuild这块代码也可以删掉的没有问题，不删掉保持为空也可以，例如<code>combuild {}</code>，不过都不配置的话直接删掉<code>combuild {}</code>吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">combuild &#123;</span><br><span class="line">    applicationName = <span class="string">'com.luojilab.reader.runalone.application.ReaderApplication'</span></span><br><span class="line">    isRegisterCompoAuto = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件注册还支持反射的方式</p><p>如果项目里有UI跳转，还需要其他配置，请看下面的步骤 <strong>3. UI跳转</strong></p><h4 id="配置gradle-properties文件"><a href="#配置gradle-properties文件" class="headerlink" title="配置gradle.properties文件"></a>配置gradle.properties文件</h4><p>在主模块和每个组件都增加如下配置，isRunAlone是必须设置的，否则编译不通过，<strong>如果需要单独运行，就设置为true，否则设置为false</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isRunAlone=<span class="keyword">true</span></span><br><span class="line">debugComponent=sharecomponent</span><br><span class="line">compileComponent=sharecomponent</span><br></pre></td></tr></table></figure><p>上面三个属性分别对应是否单独调试、debug模式下依赖的组件，release模式下依赖的组件。</p><h3 id="配置主模块的gradle-properties文件"><a href="#配置主模块的gradle-properties文件" class="headerlink" title="配置主模块的gradle.properties文件"></a>配置主模块的gradle.properties文件</h3><p>有个需要<strong>注意</strong>的地方，主模块必须在gradle.properties文件里配置debugComponent和compileComponent，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isRunAlone=<span class="keyword">true</span></span><br><span class="line">debugComponent=module1,module2</span><br><span class="line">compileComponent=module1,module2</span><br></pre></td></tr></table></figure><p>不配置的话，组件是不会打包到主模块的</p><h2 id="2-组件数据交互"><a href="#2-组件数据交互" class="headerlink" title="2. 组件数据交互"></a>2. 组件数据交互</h2><h3 id="2-1-所有组件的服务接口都统一定义在componentService-名字随意-这个module中"><a href="#2-1-所有组件的服务接口都统一定义在componentService-名字随意-这个module中" class="headerlink" title="2.1. 所有组件的服务接口都统一定义在componentService(名字随意)这个module中"></a>2.1. 所有组件的服务接口都统一定义在componentService(名字随意)这个module中</h3><p>为了增加可读性，所有组件的服务都统一定义在componentService这个module中，例如reader组件需要向外提供服务，在componentService增加readerbook文件夹，定义ReadBookService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadBookService</span> </span>&#123;</span><br><span class="line">    <span class="function">Fragment <span class="title">getReadBookFragment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-组件提供具体实现类"><a href="#2-2-组件提供具体实现类" class="headerlink" title="2.2. 组件提供具体实现类"></a>2.2. 组件提供具体实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadBookServiceImpl</span> <span class="keyword">implements</span> <span class="title">ReadBookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getReadBookFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReaderFragment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-将实现类注册到Router中"><a href="#2-3-将实现类注册到Router中" class="headerlink" title="2.3. 将实现类注册到Router中"></a>2.3. 将实现类注册到Router中</h3><p>实现类的注册时机在每个组件的ApplicationLike中，ApplicationLike相当于每个组件的Application类，控制组件的生命周期。</p><p>在组件加载的时候进行注册，同时在组件卸载的时候进行反注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderAppLike</span> <span class="keyword">implements</span> <span class="title">IApplicationLike</span> </span>&#123;</span><br><span class="line">    Router router = Router.getInstance();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        router.addService(ReadBookService.class.getSimpleName(), <span class="keyword">new</span> ReadBookServiceImpl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        router.removeService(ReadBookService.class.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经过上面3个步骤，就可以在其他组件中获取这个服务，进而获取所需数据了</strong></p><h3 id="其他组件调用服务"><a href="#其他组件调用服务" class="headerlink" title="其他组件调用服务"></a>其他组件调用服务</h3><p>由于代码隔离，只有componentService这个module中的接口们（建议起名为XXXService）才对组件们可见，所以只能针对这些接口进行编程。</p><p>通过Router获取服务的具体实现，使用前需要判空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Router router = Router.getInstance();</span><br><span class="line"><span class="keyword">if</span> (router.getService(ReadBookService.class.getSimpleName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ReadBookService service = (ReadBookService) router.getService(ReadBookService.class.getSimpleName());</span><br><span class="line">    fragment = service.getReadBookFragment();</span><br><span class="line">    t = getSupportFragmentManager().beginTransaction();</span><br><span class="line">    ft.add(R.id.tab_content, fragment).commitAllowingStateLoss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-UI跳转"><a href="#3-UI跳转" class="headerlink" title="3. UI跳转"></a>3. UI跳转</h2><p>上面的步骤仅仅可以通过获取服务来交换数据，但是我们肯定需要跳转页面，所以除了注册Router外我们还需要注册组件到UIRouter中</p><h4 id="3-1-组件添加必要的依赖"><a href="#3-1-组件添加必要的依赖" class="headerlink" title="3.1 组件添加必要的依赖"></a>3.1 组件添加必要的依赖</h4><p>在组件的build.gradle中添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java需要下面的</span></span><br><span class="line">annotationProcessor <span class="string">'com.luojilab.ddcomponent:router-anno-compiler:1.0.0'</span></span><br><span class="line"><span class="comment">//kotlin需要下面的</span></span><br><span class="line">kapt <span class="string">'com.luojilab.ddcomponent:router-anno-compiler:1.0.0'</span></span><br><span class="line"><span class="comment">//两种方式选择一种就可以，如果用kotlin只需要下面那句，否则只需要上面那句</span></span><br></pre></td></tr></table></figure><p>同时添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line">defaultConfig &#123;</span><br><span class="line">    javaCompileOptions &#123;</span><br><span class="line">        annotationProcessorOptions &#123;</span><br><span class="line">             arguments = [host: <span class="string">"share"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kotlin</span></span><br><span class="line">kapt &#123;</span><br><span class="line">    arguments &#123;</span><br><span class="line">        arg(<span class="string">"host"</span>, <span class="string">"share"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两种方式选择一种就可以，如果用kotlin只需要下面那句，否则只需要上面那句，这些句子写在android标签外面或者里面都可以</span></span><br></pre></td></tr></table></figure><p>此处的”share”是跳转URI中的host，每个组件需要设置不同的host。</p><h3 id="3-2-注册组件到UIRouter中"><a href="#3-2-注册组件到UIRouter中" class="headerlink" title="3.2 注册组件到UIRouter中"></a>3.2 注册组件到UIRouter中</h3><p>在组件的声明周期类ApplicationLike中，添加注册和反注册代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareApplike</span> <span class="keyword">implements</span> <span class="title">IApplicationLike</span> </span>&#123;</span><br><span class="line">    UIRouter uiRouter = UIRouter.getInstance();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        uiRouter.registerUI(<span class="string">"share"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        uiRouter.unregisterUI(<span class="string">"share"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-目标页面添加注解"><a href="#3-3-目标页面添加注解" class="headerlink" title="3.3 目标页面添加注解"></a>3.3 目标页面添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RouteNode</span>(path = <span class="string">"/shareBook"</span>, desc = <span class="string">"分享书籍页面"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要传入参数，在具体的参数定义上增加Autowired注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(name = <span class="string">"bookName"</span>)<span class="comment">//name也可以不设置，不设置的话默认是字段名</span></span><br><span class="line">String bookName;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Author author;</span><br></pre></td></tr></table></figure><p><strong>注意此处的参数需要设置为非private，否则编译会直接报错，如果是kotlin代码还需要加@JvmField，这样kotlin才会编译成public字段而不是private字段加set/get方法</strong></p><h3 id="3-4-自动装载"><a href="#3-4-自动装载" class="headerlink" title="3.4 自动装载"></a>3.4 自动装载</h3><p>如果想使用自动装载功能，需要在Activity的onCreate中调用方法，调用该方法后，在类中配置的@Autowired才会有数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AutowiredService.Factory.getInstance().create().autowire(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>建议该方法在基类Activity中调用，如果在Fragment有@Autowired注解的字段，需要手动在Activity中传给Fragment，否则会空指针异常，因为调用openUri跳转的是Activity，参数传给Activity了，如果不手动传给Fragment的话Fragment的arguments并没有值，再去get东西的时候就会报空指针异常。</p><h3 id="3-5-build项目"><a href="#3-5-build项目" class="headerlink" title="3.5 build项目"></a>3.5 build项目</h3><p>项目执行build，会生成apt文件，具体可在build目录下面查看，同时还会在根目录生成UIRouterTable文件夹，里面会列出每个组件向外提供的路由表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auto generated, <span class="keyword">do</span> not change !!!! </span><br><span class="line"></span><br><span class="line">HOST : share</span><br><span class="line"></span><br><span class="line">分享书籍页面(<span class="meta">@RouteNode</span>配置的desc)</span><br><span class="line">/shareBook(<span class="meta">@RouteNode</span>配置的path)</span><br><span class="line">author:com.luojilab.componentservice.share.bean.Author(<span class="meta">@Autowired</span>配置的参数)</span><br><span class="line">bookName:String(<span class="meta">@Autowired</span>配置的参数)</span><br></pre></td></tr></table></figure><h3 id="3-6-跳转页面"><a href="#3-6-跳转页面" class="headerlink" title="3.6 跳转页面"></a>3.6 跳转页面</h3><p>在发起跳转页面，有三种方式可以跳转到目的页面</p><h4 id="3-6-1-Bundle方式"><a href="#3-6-1-Bundle方式" class="headerlink" title="3.6.1 Bundle方式"></a>3.6.1 Bundle方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UI transfer with Bundle</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goToShareActivityWithBundle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Author author = <span class="keyword">new</span> Author();</span><br><span class="line">    author.setName(<span class="string">"Margaret Mitchell"</span>);</span><br><span class="line">    author.setCounty(<span class="string">"USA"</span>);</span><br><span class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    bundle.putString(<span class="string">"bookName"</span>, <span class="string">"Gone with the Wind"</span>);</span><br><span class="line">    bundle.putString(<span class="string">"author"</span>, JsonService.Factory.getInstance()</span><br><span class="line">            .create().toJsonString(author));</span><br><span class="line">    String path = <span class="string">"DDComp://share/shareBook"</span>;<span class="comment">//或者share/shareBook</span></span><br><span class="line">    UIRouter.getInstance().openUri(getActivity(), <span class="string">"DDComp://share/shareBook"</span>, bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-2-URI方式"><a href="#3-6-2-URI方式" class="headerlink" title="3.6.2 URI方式"></a>3.6.2 URI方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UI transfer with URI</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goToShareActivityWithUri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Author author = <span class="keyword">new</span> Author();</span><br><span class="line">    author.setName(<span class="string">"Barack Obama"</span>);</span><br><span class="line">    author.setCounty(<span class="string">"New York"</span>);</span><br><span class="line">    <span class="keyword">final</span> String URI_LEGAL = <span class="string">"DDComp://share/shareMagazine?bookName=NYTIME&amp;author="</span>;</span><br><span class="line">    <span class="comment">//URI_LEGAL能不能去掉DDComp://我没有测试，有兴趣可以自己测试一下</span></span><br><span class="line">    legal and illegal data delivering*/</span><br><span class="line">    UIRouter.getInstance().openUri(</span><br><span class="line">    getActivity(),</span><br><span class="line">            URI_LEGAL + JsonService.Factory.getInstance().create().toJsonString(author), <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-3-startActivityForResult"><a href="#2-6-3-startActivityForResult" class="headerlink" title="2.6.3 startActivityForResult"></a>2.6.3 startActivityForResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//startActivityForResult</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goToShareActivityForResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Author author = <span class="keyword">new</span> Author();</span><br><span class="line">    author.setName(<span class="string">"Margaret Mitchell"</span>);</span><br><span class="line">    author.setCounty(<span class="string">"USA"</span>);</span><br><span class="line">    UIRouter.getInstance().openUri(</span><br><span class="line">    getActivity(),</span><br><span class="line">        <span class="comment">//下面的代码能不能去掉DDComp://我没有测试，有兴趣可以自己测试一下</span></span><br><span class="line">            <span class="string">"DDComp://share/shareBook?bookName=Gone with the Wind&amp;author="</span></span><br><span class="line">             + JsonService.Factory.getInstance().create().toJsonString(author), <span class="keyword">null</span>, <span class="number">7777</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="JIMU框架代码内部主要流程"><a href="#JIMU框架代码内部主要流程" class="headerlink" title="JIMU框架代码内部主要流程"></a>JIMU框架代码内部主要流程</h4><p>在执行uiRouter.registerUI(“game”)的时候会把当前组件自动生成的BaseCompRouter的子类（一个组件一个BaseCompRouter的子类，如刚才注册game就会生成GameUiRouter，代码路径在该模块的build/generated/source/kapt/debug(或者release)/com.luojilab.gen.router），uiRouter.registerUI方法会将刚才生成的GameUiRouter类添加到UIRouter类的uiRouters这个集合里，在跳转页面的时候（UIRouter.getInstance().openUri）会遍历这个uiRouters集合，执行每个BaseCompRouter子类的openUri方法，该方法如果能自己处理就返回true，否则返回false。</p><p>自动生成的BaseCompRouter的子类执行openUri方法时会查找当前组件中用@RouteNode配置的页面（Activity），如果当前BaseCompRouter的子类第一次运行会执行initMap，在这个方法里会把这个页面保存到routeMapper，key是这个页面配置的path，value是这个页面。然后在openUri方法里会根据传过来的uri找到在routeMapper中对应的Activity，然后执行startActivityForResult或者startActivity方法。</p><hr><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ol><li>按照上面的<strong>配置</strong>先配置好JIMU的依赖</li><li>在公共库创建Service接口，Activity、Fragment父类等公共类和公共资源</li><li>每个组件项目继承公共库的Service接口，提供其他组件需要的实例</li><li>在每个组件添加IApplicationLike的子类，不需要手动注册该子类</li><li>如果有页面跳转，还需要配置页面的@RouteNode</li></ol><p>demo在github的地址：<a href="https://github.com/ikakaxi/JIMUDemo" target="_blank" rel="noopener">https://github.com/ikakaxi/JIMUDemo</a></p><p>个人简书：<a href="https://www.jianshu.com/u/b433b31eadad" target="_blank" rel="noopener">https://www.jianshu.com/u/b433b31eadad</a></p><p>个人博客：<a href="http://liuhc.me" target="_blank" rel="noopener">http://liuhc.me</a></p><p>个人博客和简书同步更新，会先更新简书，顺便吐槽一下简书为什么不能搜索自己的文章。。。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dagger2使用方法简明讲解</title>
      <link href="/2018/04/15/dagger2%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E6%98%8E%E8%AE%B2%E8%A7%A3/"/>
      <url>/2018/04/15/dagger2%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E6%98%8E%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>现在的公司项目用到了Dagger2，之前只是稍微了解一些，没有用过，然后查了查资料，整理如下，方便快速上手</p><h4 id="四个基本注解"><a href="#四个基本注解" class="headerlink" title="四个基本注解"></a>四个基本注解</h4><ol><li><p><strong>@Inject</strong> 主要有两个作用，一个是使用在构造函数上，通过标记构造函数让Dagger2来使用（Dagger2通过Inject标记可以在需要这个类实例的时候来找到这个构造函数并把相关实例new出来）从而提供依赖，另一个作用就是标记在需要依赖的变量让Dagger2为其提供依赖。</p><blockquote><p><strong>@Inject</strong>注解的字段不能是private和protected的</p></blockquote></li><li><p><strong>@Module</strong> 用Module标注的类是专门用来提供依赖的。有的人可能有些疑惑，看了上面的@Inject，需要在构造函数上标记才能提供依赖，那么如果我们需要提供的类构造函数无法修改怎么办，比如一些jar包里的类，我们无法修改源码。这时候就需要使用Module了。Module可以给不能修改源码的类提供依赖，当然，能用Inject标注的通过Module也可以提供依赖。</p><blockquote><p>这里需要注意，Module和Inject这两个注解还是有区别的，@Inject使用在构造函数上的时候，这个构造函数有没有参数都可以，如果有参数的话这个Module也需要有其他Module或者@Inject构造函数提供实例，适合在提供该类自己的时候使用。但是如果用@Module的话，@Module注解的这个类需要有默认无参构造函数（显示隐式都可以），否则会报“”xxx must be set”。如果没有默认无参构造函数，就需要手动把这个Module的实例传入Component，一般在MVP模式里使用该方式，用来提供Activity实例给Presenter实例。</p><p>所以，如果该类只需要提供自己，建议直接使用@Inject函数，如果是用来提供其他类的实例，建议使用@Module的方式。</p></blockquote></li><li><p><strong>@Provides</strong> 用Provides来标注一个方法，该方法可以在需要提供依赖时被调用，从而把预先提供好的对象当做依赖给标注了@Inject的变量赋值。provides主要用于标注Module里的方法。</p></li><li><p><strong>@Component</strong> 一般用来标注接口，被标注了Component的接口在编译时会产生相应的类的实例来作为提供依赖方和需要依赖方之间的桥梁，把相关依赖注入到其中。</p></li></ol><h4 id="四个扩展注解"><a href="#四个扩展注解" class="headerlink" title="四个扩展注解"></a>四个扩展注解</h4><ol><li><p><strong>@Qulifier</strong> 这里有个概念，叫依赖迷失，就是在Module注解的类里，有2个Provides都提供某个类的实例，这时候不用<strong>@Qulifier</strong>注解的话Component会不知道用哪个实例，这时候就要使用<strong>@Qulifier</strong>，下面直接提供代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> B &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Provides</span></span><br><span class="line"> <span class="meta">@A</span></span><br><span class="line"> <span class="function">Cooker <span class="title">provideCookerA</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Cooker(<span class="string">"James"</span>,<span class="string">"Espresso"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Provides</span></span><br><span class="line"> <span class="meta">@B</span></span><br><span class="line"> <span class="function">Cooker <span class="title">provideCookerB</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Cooker(<span class="string">"Karry"</span>,<span class="string">"Machiato"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComplexMaker</span> <span class="keyword">implements</span> <span class="title">CoffeeMaker</span> </span>&#123;</span><br><span class="line">    Cooker cookerA;</span><br><span class="line">    Cooker cookerB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComplexMaker</span><span class="params">(@A Cooker cookerA,@B Cooker cookerB)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cookerA = cookerA;</span><br><span class="line">        <span class="keyword">this</span>.cookerB = cookerB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Named</strong> 和<strong>@Qulifier</strong>一样，并且<strong>@Named</strong>就是继承<strong>@Qulifier</strong>的，而且用起来比<strong>@Qulifier</strong>方便，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"red"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cloth <span class="title">getRedCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Cloth cloth = <span class="keyword">new</span> Cloth();</span><br><span class="line">        cloth.setColor(<span class="string">"红色"</span>);</span><br><span class="line">        <span class="keyword">return</span> cloth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"blue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cloth <span class="title">getBlueCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Cloth cloth = <span class="keyword">new</span> Cloth();</span><br><span class="line">        cloth.setColor(<span class="string">"蓝色"</span>);</span><br><span class="line">        <span class="keyword">return</span> cloth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clothes <span class="title">getClothes</span><span class="params">(@Named(<span class="string">"blue"</span>)</span> Cloth cloth)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Clothes(cloth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> <span class="meta">@Named</span>(<span class="string">"red"</span>)</span><br><span class="line"> Cloth redCloth;</span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> <span class="meta">@Named</span>(<span class="string">"blue"</span>)</span><br><span class="line"> Cloth blueCloth;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     ...</span><br><span class="line">     tv.setText(<span class="string">"我现在有"</span> + redCloth + <span class="string">"和"</span> + blueCloth );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Scope</strong> 局部单例，意思就是在被注入类里只有一个该类的实例，局部范围是啥，那就是它生命周期范围内。直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PerActivity.java</span></span><br><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerActivity &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityModule.java</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Provides</span></span><br><span class="line"> <span class="function">CoffeeShop <span class="title">provideCoffeeShop</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> CoffeeShop.getInstance();<span class="comment">//一个普通的单例</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接在这里说结果，<span class="doctag">@PerActivity</span>是用<span class="doctag">@Scope</span>注解的，除了在这里注解还需要在用到该Module类的Component的类名上方也要注解，然后该实例在注入到某个类里的时候用同一个Component就会不管有几个字段都会只有一个实例。注意：如果用不同的Component实例的话仍然会新的CookerFactory实例，单例CookerFactory只存在一个Component实例里。所以叫局部单例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Provides</span></span><br><span class="line"> <span class="meta">@PerActivity</span></span><br><span class="line"> <span class="function">CookerFactory <span class="title">provideCookerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> CookerFactory();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Provides</span></span><br><span class="line"> <span class="function">CookerFactoryMulty <span class="title">provideCookerFactoryMulty</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> CookerFactoryMulty();<span class="comment">//非单例</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CoffeeShop.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeShop</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> CoffeeShop INSTANCE;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">CoffeeShop</span><span class="params">()</span></span>&#123;</span><br><span class="line">     Log.d(<span class="string">"TAG"</span>,<span class="string">"CoffeeShop New Instance"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoffeeShop <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">         INSTANCE = <span class="keyword">new</span> CoffeeShop();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> INSTANCE;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CookerFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">CookerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">     Log.d(<span class="string">"TAG"</span>,<span class="string">"CookerFactory New Instance"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CookerFactoryMulty.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerFactoryMulty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">CookerFactoryMulty</span><span class="params">()</span></span>&#123;</span><br><span class="line">     Log.d(<span class="string">"TAG"</span>,<span class="string">"CookerFactoryMulty New Instance"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除了在Module的Provides方法里写上@Scope还需要在Component类名上方写上，这里自定义的@Scope名字叫PerActivity</span></span><br><span class="line"><span class="meta">@PerActivity</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;ActivityModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity simpleActivity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> ActivityComponent activityComponent;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> CoffeeShop coffeeShop1;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> CoffeeShop coffeeShop2;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> CookerFactory cookerFactory1;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> CookerFactory cookerFactory2;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> CookerFactoryMulty cookerFactoryMulty1;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"> CookerFactoryMulty cookerFactoryMulty2;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">     setContentView(R.layout.activity_main);</span><br><span class="line">     activityComponent = DaggerActivityComponent.builder()</span><br><span class="line">         <span class="comment">//下面这句话可以不写，因为Module有默认构造函数。如果Module的构造器里有参数，并且该参数不是注入进去的，就需要用类似下面的方法手动设置实例到Component中</span></span><br><span class="line">             .activityModule(provideModule())</span><br><span class="line">             .applicationComponent(MyApplication.getComponent()).build();</span><br><span class="line">     activityComponent.inject(<span class="keyword">this</span>);</span><br><span class="line">     coffeeFactory.run();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> ActivityModule <span class="title">provideModule</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ActivityModule();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CoffeeShop New Instance</span><br><span class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactory New Instance</span><br><span class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactoryMulty New Instance</span><br><span class="line">07-11 16:53:27.978    1927-1927/? D/TAG﹕ CookerFactoryMulty New Instance</span><br></pre></td></tr></table></figure></li><li><p><strong>@Singleton</strong> 该注解继承<strong>@Scope</strong>，用的时候区别就是不用去自定义<strong>@Scope</strong>了，比如上面定义<strong>@PerActivity</strong>的这步就不需要了，其他的用法和使用<strong>@PerActivity</strong>一模一样，也是在Component类名上面和Module的Provides方法里都写上注解。</p><blockquote><p><strong>注意注意注意：</strong>再次提醒，局部单例是在同一个Component实例提供依赖的前提下才有效的，不同的Component实例只能通过Component依赖才能实现单例。也就是说，你虽然在两个Component接口上都添加了PerActivity注解或者Singleton注解，但是这两个Component提供依赖时是没有联系的，他们只能在各自的范围内实现单例<br><strong>在@Inject标注的构造器上使用局部单例直接在类名上声明作用范围（类名上添加@Singleton或自定义Scope）</strong></p></blockquote></li></ol><h4 id="依赖：dependencies"><a href="#依赖：dependencies" class="headerlink" title="依赖：dependencies"></a>依赖：dependencies</h4><p>Component依赖Component的情况下，两个Component的@Scope不能相同，否则会编译错误，为什么这么设计我还不是很清楚，有知道的小伙伴请告诉我谢谢。</p><p>依赖的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PerActivity.java</span></span><br><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerActivity &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BaseModule.java</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Singleton</span></span><br><span class="line">   <span class="meta">@Provides</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Person <span class="title">providePerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Module1.java</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Module1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Module2.java</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Module2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BaseComponent.java</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = BaseModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseComponent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">providePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Component1.java</span></span><br><span class="line"><span class="meta">@PerActivity</span></span><br><span class="line"><span class="comment">//@Singleton</span></span><br><span class="line"><span class="comment">//因为依赖（dependencies）的BaseComponent中用到了@Singleton，所以这个Component就不能再用了，否则会编译错误，为什么这么设计还不是很清楚</span></span><br><span class="line"><span class="meta">@Component</span>(modules = Module1.class,dependencies = BaseComponent.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(TestScopeActivity1 simpleActivity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Component2.java</span></span><br><span class="line"><span class="meta">@PerActivity</span></span><br><span class="line"><span class="comment">//@Singleton 为什么不能用？原理同上</span></span><br><span class="line"><span class="meta">@Component</span>(modules = Module2.class,dependencies = BaseComponent.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(TestScopeActivity2 simpleActivity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MyApplication.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BaseComponent baseComponent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate();</span><br><span class="line">baseComponent = DaggerBaseComponent.builder().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseComponent <span class="title">getBaseComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> baseComponent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TestScopeActivity1.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScopeActivity1</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">Person p = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">DaggerComponent1.builder().baseComponent(MyApplication.getBaseComponent()).build().inject(<span class="keyword">this</span>);</span><br><span class="line">TextView textView = findViewById(R.id.textView);</span><br><span class="line">textView.setText(p.toString());</span><br><span class="line">textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">startActivity(<span class="keyword">new</span> Intent(TestScopeActivity1.<span class="keyword">this</span>,TestScopeActivity2.class));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TestScopeActivity2.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScopeActivity2</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">Person p = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">DaggerComponent2.builder().baseComponent(MyApplication.getBaseComponent()).build().inject(<span class="keyword">this</span>);</span><br><span class="line">TextView textView = findViewById(R.id.textView);</span><br><span class="line">textView.setText(p.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="daggar2如何选择依赖呢，按照这样的顺序"><a href="#daggar2如何选择依赖呢，按照这样的顺序" class="headerlink" title="daggar2如何选择依赖呢，按照这样的顺序"></a>daggar2如何选择依赖呢，按照这样的顺序</h4><p>当Component调用inject方法的时候，会搜索被注入类中用<strong>@Inject</strong>注解的字段，然后会在该Component中查找在<strong>@Component</strong>(modules=。。。)注解中注册的Module，如果搜索到Module有<strong>@Provides</strong>注解的方法提供该<strong>@Inject</strong>注解的字段所需的实例，就调用相应的方法完成注入，否则就查找所有用<strong>@Inject</strong>注解构造函数的类，如果找到就调用相应的构造函数完成注入，如果在获得实例的时候还需要获取参数的实例，再按照刚才的流程依次注入参数实例</p><p>画个简单的流程，如下所示</p><p>Component.inject-&gt;在Component搜索Module-&gt;找到就调用<strong>@Provides</strong>注解的方法提供实例</p><p>​                -&gt;没找到就搜索<strong>@Inject</strong>注解的构造函数</p><p>​                -&gt;都找不到就报错。。。</p><p>都没找到肯定就报错了。。。但是会优先寻找Component注册的Module，而<strong>@Inject</strong>注册的构造器可以调用任何Component的inject方法完成注入，因为<strong>@Inject</strong>注册的构造器不需要在Component里注册，这里和Module有区别，Module是需要在某个Component中注册的，而<strong>@Inject</strong>不需要</p><hr><p>举一个MVP中使用Dagger2的示例，我就不贴代码了，直接看下面这个链接好了：</p><p><a href="https://www.jianshu.com/p/5a936942db2a" target="_blank" rel="noopener">https://www.jianshu.com/p/5a936942db2a</a></p><p>参考：</p><p><a href="https://dreamerhome.github.io/2016/07/11/dagger%20for%20code/" target="_blank" rel="noopener">https://dreamerhome.github.io/2016/07/11/dagger%20for%20code/</a></p><p><a href="https://blog.csdn.net/it_zouxiang/article/details/53471192" target="_blank" rel="noopener">https://blog.csdn.net/it_zouxiang/article/details/53471192</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手把手教你自定义流式布局</title>
      <link href="/2018/04/01/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2018/04/01/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<blockquote><p>代码是kotlin代码，所以看到有些值直接调用的不要疑惑，这些直接调用的值并不是类属性实际也是调用的get和set方法</p></blockquote><p>废话不多说，直接开始。</p><p>根据之前的文章，自定义ViewGroup需要重写onMeasure和onLayout方法，所以我们先来重写onMeasure方法</p><h4 id="重写onMeasure方法分为下面几步："><a href="#重写onMeasure方法分为下面几步：" class="headerlink" title="重写onMeasure方法分为下面几步："></a>重写onMeasure方法分为下面几步：</h4><ol><li>遍历当前ViewGroup的所有子View，调用<code>measureChildWithMargins</code>方法设置每个ChildView的宽高，<code>measureChildWithMargins</code>和<code>measureChild</code>的区别是<code>measureChildWithMargins</code>同时设置了ChildView的margin值，使用<code>measureChildWithMargins</code>的前提是当前ViewGroup覆盖了<code>generateLayoutParams</code>3个方法，下面我们会说到，没有覆盖<code>generateLayoutParams</code>3个方法的话调用<code>measureChildWithMargins</code>会崩溃。</li><li>遍历的时候同时记录当前ChildView的left和top值，在onLayout方法里使用这些值直接调用ChildView的layout方法，这样就不需要在onLayout方法里再次遍历计算ChildView的layout的值了，优化代码性能。</li><li>遍历完以后调用<code>View.resolveSize</code>方法传入自己的宽高和宽高的<code>MeasureSpec</code>，来计算自己在不同父容器的<code>MeasureSpec</code>下的不同宽高</li></ol><h4 id="首先定义几个类属性"><a href="#首先定义几个类属性" class="headerlink" title="首先定义几个类属性"></a>首先定义几个类属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录执行onMeasure方法时ChildView左上角相对ViewGroup的坐标</span></span><br><span class="line"><span class="comment">//这样在onLayout方法就不需要再次计算了，提高效率</span></span><br><span class="line"><span class="keyword">private</span> val pointList = mutableListOf&lt;Pair&lt;Int, Int&gt;&gt;()</span><br><span class="line"><span class="comment">//行间距，在xml获取该值</span></span><br><span class="line"><span class="keyword">private</span> var mRowSpacing = <span class="number">0</span></span><br><span class="line"><span class="comment">//列间距，在xml获取该值</span></span><br><span class="line"><span class="keyword">private</span> var mColumnSpacing = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="重写的onMeasure方法如下"><a href="#重写的onMeasure方法如下" class="headerlink" title="重写的onMeasure方法如下"></a>重写的<code>onMeasure</code>方法如下</h4><ol><li><p>首先在该方法里我们先定义几个变量：</p><ol><li><p>需要1个变量记录自己的宽（width）</p></li><li><p>需要1个变量记录当前行顶部坐标（相对于ViewGroup），用来最后计算该ViewGroup的高度（startY）</p></li><li><p>需要2个变量记录当前行的行宽和行高，用来判断是否需要换行（lineWidth，lineHeight）</p></li><li><p>需要1个变量记录当前ChildView的左边坐标（相对于ViewGroup）（childLeft），用来保存当前ChildView的绘制位置（left和top）<br> 代码如下</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算的宽度</span></span><br><span class="line">var width = <span class="number">0</span></span><br><span class="line"><span class="comment">//记录当前行顶部坐标（相对于ViewGroup）</span></span><br><span class="line">var startY = <span class="number">0</span></span><br><span class="line"><span class="comment">//记录当前行宽</span></span><br><span class="line">var lineWidth = <span class="number">0</span></span><br><span class="line"><span class="comment">//记录当前行高</span></span><br><span class="line">var lineHeight = <span class="number">0</span></span><br><span class="line"><span class="comment">//当前ChildView的左边坐标（相对于ViewGroup）</span></span><br><span class="line">var childLeft = <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>然后我们还需要记录2个值，因为ChildView可用空间不包括上层容器的padding值，所以先定义2个值，下面会用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ViewGroup的左右padding值</span></span><br><span class="line">val lrPaddingUsed = paddingLeft + paddingRight</span><br><span class="line"><span class="comment">//ViewGroup的上下padding值</span></span><br><span class="line">val tbPaddingUsed = paddingTop + paddingBottom</span><br></pre></td></tr></table></figure></li></ol></li><li><p>开始遍历，并且记录ChildView在调用ChildView自己的layout方法时需要的left和top值，代码如下</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span> until childCount).forEach &#123; i -&gt;</span><br><span class="line">    val child = getChildAt(i)</span><br><span class="line">    <span class="comment">//GONE状态的View就不需要执行measureChild方法了，以提高效率，因为这种状态的View宽高是0(自定义View需要将GONE状态的自己的宽高设置为0)</span></span><br><span class="line">    <span class="keyword">if</span> (child.visibility != View.GONE) &#123;</span><br><span class="line">        <span class="comment">//2.调用measureChildWithMargins计算子View宽高</span></span><br><span class="line">        <span class="comment">//因为重写了3个generateLayout方法所以这里调用measureChildWithMargins不会有异常</span></span><br><span class="line">        measureChildWithMargins(child, widthMeasureSpec, lrPaddingUsed, heightMeasureSpec, tbPaddingUsed)</span><br><span class="line">        <span class="comment">//3.1.子View执行measure方法后该ViewGroup获取子View的getMeasuredWidth和getMeasuredHeight</span></span><br><span class="line">        val layoutParams = child.layoutParams as MarginLayoutParams</span><br><span class="line">        <span class="comment">//记录该ChildView占用的空间</span></span><br><span class="line">        val childWidth = layoutParams.leftMargin + child.measuredWidth + layoutParams.rightMargin</span><br><span class="line">        val childHeight = layoutParams.topMargin + child.measuredHeight + layoutParams.bottomMargin</span><br><span class="line">        <span class="comment">//3.2.计算ViewGroup自己的宽高</span></span><br><span class="line">        <span class="comment">//第一个ChildView或者每行第一个ChildView的左边都是没有mColumnSpacing的</span></span><br><span class="line">        <span class="comment">//每行的最后一个ChildView也是没有mColumnSpacing的</span></span><br><span class="line">        <span class="comment">//第一行第一个ChildView不需要换行</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;<span class="comment">//第一行</span></span><br><span class="line">            <span class="comment">//第一个ChildView初始化childLeft和childTop</span></span><br><span class="line">            <span class="comment">//paddingLeft是ViewGroup的左边内间距</span></span><br><span class="line">            childLeft = paddingLeft + layoutParams.leftMargin</span><br><span class="line">            <span class="comment">//paddingTop是ViewGroup的上边内间距，将第一行的顶部坐标设为paddingTop</span></span><br><span class="line">            startY = paddingTop</span><br><span class="line">            <span class="comment">//lineWidth行宽在每行放置第一个ChildView时除了累加childWidth还需要累加ViewGroup的左右内间距</span></span><br><span class="line">            lineWidth += lrPaddingUsed + childWidth</span><br><span class="line">            <span class="comment">//lineHeight设置为第一行第一个ChildView的高度</span></span><br><span class="line">            lineHeight = childHeight</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lineWidth + mColumnSpacing + childWidth &lt;= measureWidth) &#123;</span><br><span class="line">            <span class="comment">//进入该代码块代表当前ChildView和上一个ChildView在同一行</span></span><br><span class="line">            <span class="comment">//所以只需要设置childLeft而不需要设置childTop</span></span><br><span class="line">            <span class="comment">//判断时需要mColumnSpacing是因为2个ChildView之间有列间距</span></span><br><span class="line">            childLeft += mColumnSpacing + layoutParams.leftMargin</span><br><span class="line">            lineWidth += mColumnSpacing + childWidth</span><br><span class="line">            <span class="comment">//lineHeight取最大高度</span></span><br><span class="line">            lineHeight = Math.max(childHeight, lineHeight)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//需要换行，该ChildView放到了新行</span></span><br><span class="line">            <span class="comment">//换行时childLeft和第一行一样需要重新设置为ViewGroup的左边内间距加该ChildView的左外间距</span></span><br><span class="line">            childLeft = paddingLeft + layoutParams.leftMargin</span><br><span class="line">            <span class="comment">//该行顶部坐标（相对于ViewGroup）需要累加上一行的行高和行间距</span></span><br><span class="line">            startY += lineHeight + mRowSpacing</span><br><span class="line">            <span class="comment">//下面2个值的操作和第一行一样</span></span><br><span class="line">            lineWidth = lrPaddingUsed + childWidth</span><br><span class="line">            <span class="comment">//lineHeight取新行第一个ChildView的高度</span></span><br><span class="line">            lineHeight = childHeight</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加该ChildView的left和top到集合，以便在该类的onLayout方法中调用ChildView的layout方法给该ChildView布局</span></span><br><span class="line">        pointList.add(Pair(childLeft, startY + layoutParams.topMargin))</span><br><span class="line">        <span class="comment">//该ViewGroup的宽度取当前该ViewGroup的宽度和行宽的最大值</span></span><br><span class="line">        width = Math.max(width, lineWidth)</span><br><span class="line">        <span class="comment">//childLeft设置为该ChildView所占空间的右边坐标</span></span><br><span class="line">        <span class="comment">//说明一下，每个ChildView所占空间包括了它的margin值，因为ChildView的外间距是不能显示任何控件的，外间距这部分空间是View之间的间距</span></span><br><span class="line">        childLeft += child.measuredWidth + layoutParams.rightMargin</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码我把注释写的很详细，已经不需要解释什么了。。。</p><ol start="3"><li><p>遍历完以后，就可以该ViewGroup的宽高也就可以确定了，接下来调用<code>View.resolveSize</code>方法来计算自己在不同父容器的<code>MeasureSpec</code>下的不同宽高，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.调用resolveSize方法传入自己计算的宽高和上级ViewGroup的MeasureSpec，得到自身不同MeasureSpec下的宽高</span></span><br><span class="line">val resultWidth = resolveSize(width, widthMeasureSpec)</span><br><span class="line">val resultHeight = resolveSize(startY + lineHeight + paddingBottom, heightMeasureSpec)</span><br></pre></td></tr></table></figure></li><li><p>然后调用<code>setMeasuredDimension</code>方法保存自己的宽高，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.调用setMeasuredDimension保存自己的宽高</span></span><br><span class="line">setMeasuredDimension(resultWidth, resultHeight)</span><br></pre></td></tr></table></figure></li><li><p>到这里，<code>onMeasure</code>方法就结束了，下面我们开始onLayout方法的重写</p></li></ol><h4 id="重写的onLayout方法如下"><a href="#重写的onLayout方法如下" class="headerlink" title="重写的onLayout方法如下"></a>重写的<code>onLayout</code>方法如下</h4><p>   这个方法就很简单了，因为在onMeasure方法里已经设置好了ChildView们的位置，让我们来看一下代码吧</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">override fun <span class="title">onLayout</span><span class="params">(changed: Boolean, l: Int, t: Int, r: Int, b: Int)</span> </span>&#123;</span><br><span class="line">    val childCount = <span class="keyword">this</span>.childCount</span><br><span class="line">    (<span class="number">0</span> until childCount).forEach &#123; i -&gt;</span><br><span class="line">        val child = getChildAt(i)</span><br><span class="line">        <span class="comment">//GONE状态的View就不需要执行layout方法了，以提高效率，因为这种状态的View宽高是0(自定义View需要将GONE状态的自己的宽高设置为0)</span></span><br><span class="line">        <span class="keyword">if</span> (child.visibility != View.GONE) &#123;</span><br><span class="line">            val pair = pointList[i]</span><br><span class="line">            child.layout(pair.first, pair.second, pair.first + child.measuredWidth, pair.second + child.measuredHeight)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后该流式布局的主要部分就完成了</p><h4 id="重写generateLayoutParams的3个方法"><a href="#重写generateLayoutParams的3个方法" class="headerlink" title="重写generateLayoutParams的3个方法"></a>重写<code>generateLayoutParams</code>的3个方法</h4><p>然后我们需要重写<code>generateLayoutParams</code>的3个方法，否则在调用<code>measureChildWithMargins</code>方法的时候是会报类转换异常的，至于为什么自己看一下源码就知道了，下面直接上重写好的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ChildView的LayoutParams是包裹它的ViewGroup传递的，而默认传递的ViewGroup.LayoutParams是没有margin值的</span></span><br><span class="line"><span class="comment">//所以如果要使用margin需要重写这3个方法，ViewGroup会根据不同情况调用不同的方法的，所以最好把3个方法都重写了</span></span><br><span class="line"><span class="function">override fun <span class="title">generateDefaultLayoutParams</span><span class="params">()</span>: LayoutParams </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MarginLayoutParams(<span class="keyword">super</span>.generateDefaultLayoutParams())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">override fun <span class="title">generateLayoutParams</span><span class="params">(attrs: AttributeSet?)</span>: LayoutParams </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MarginLayoutParams(context, attrs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">override fun <span class="title">generateLayoutParams</span><span class="params">(p: LayoutParams?)</span>: LayoutParams </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MarginLayoutParams(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还有个之前提到的<code>mRowSpacing</code>和<code>mColumnSpacing</code>，这两个值在xml里设置该流式布局的行间距和列间距，我们在res/value下创建一个文件，例如叫做<code>attrs_flowlayout.xml</code>，然后添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"FlowLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"rowSpacing"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"columnSpacing"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"liuhc.me.flowlayout.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">liuhc.me.flowlayout.FlowLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#ff0000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:rowSpacing</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:columnSpacing</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">liuhc.me.flowlayout.FlowLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，一个流式布局就完成了，代码提交到了github，地址：<br><a href="https://github.com/ikakaxi/FlowLayout" target="_blank" rel="noopener">https://github.com/ikakaxi/FlowLayout</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用一张图告诉你Android中View的layout过程</title>
      <link href="/2018/03/31/%E7%94%A8%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0Android%E4%B8%ADView%E7%9A%84layout%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/03/31/%E7%94%A8%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0Android%E4%B8%ADView%E7%9A%84layout%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://upload-images.jianshu.io/upload_images/545982-1e4d60427eadfef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="https://upload-images.jianshu.io/upload_images/545982-1e4d60427eadfef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="绘制View流程-onLayout.png"></a></p><p>参考：<a href="https://www.jianshu.com/p/158736a2549d" target="_blank" rel="noopener">https://www.jianshu.com/p/158736a2549d</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>用一张图告诉你Android中View的measure过程</title>
      <link href="/2018/03/31/%E7%94%A8%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0Android%E4%B8%ADView%E7%9A%84measure%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/03/31/%E7%94%A8%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0Android%E4%B8%ADView%E7%9A%84measure%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://upload-images.jianshu.io/upload_images/545982-1a001be2690f4f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="https://upload-images.jianshu.io/upload_images/545982-1a001be2690f4f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="绘制View流程-onMeasure.png"></a></p><h4 id="其中MeasureSpec类的说明："><a href="#其中MeasureSpec类的说明：" class="headerlink" title="其中MeasureSpec类的说明："></a>其中MeasureSpec类的说明：</h4><p>MeasureSpec.EXACTLY(完全)：LayoutParams.MATCH_PARENT或确切的数值。父控件为子View指定确切大小，希望子View完全按照自己给定的尺寸来处理，这时的MeasureSpec一般是父控件根据自身的MeasureSpec跟子View的布局参数来确定的。一般这种情况下size&gt;0，有个确定值。</p><p>MeasureSpec.AT_MOST(至多)：LayoutParams.WRAP_CONTENT 父控件为子元素指定最大参考尺寸，希望子View的尺寸不要超过这个尺寸。这种模式也是父控件根据自身的MeasureSpec跟子View的布局参数来确定的。</p><p>MeasureSpec.UNSPECIFIED(未指定)：父容器不对子View有任何限制，要多大给多大，多见于ListView、GridView、ScrollView。这种MeasureSpec一般是由父控件自身的特性决定的。比如ScrollView，它的子View可以随意设置大小，无论多高，都能滚动显示。</p><hr><h4 id="ViewGroup的getChildMeasureSpec-int-spec-int-padding-int-childDimension-方法说明："><a href="#ViewGroup的getChildMeasureSpec-int-spec-int-padding-int-childDimension-方法说明：" class="headerlink" title="ViewGroup的getChildMeasureSpec(int spec, int padding, int childDimension)方法说明："></a>ViewGroup的<code>getChildMeasureSpec(int spec, int padding, int childDimension)</code>方法说明：</h4><ol><li><p>不管该ViewGroup的测量模式是什么，只要childDimension&gt;=0，返回的子View的绘制大小就是childDimension，测量模式就是MeasureSpec.EXACTLY</p></li><li><p>如果该ViewGroup的测量模式是MeasureSpec.EXACTLY</p><ol><li>如果childDimension == LayoutParams.MATCH_PARENT，返回的子View大小为父View大小，模式为EXACTLY</li><li>如果childDimension == LayoutParams.WRAP_CONTENT，返回的子View决定自己的大小，但最大不能超过父View大小，模式为AT_MOST</li></ol></li><li><p>如果该ViewGroup的测量模式是MeasureSpec.AT_MOST，childDimension == LayoutParams.MATCH_PARENT或者childDimension == LayoutParams.WRAP_CONTENT，返回的子View决定自己的大小，但最大不能超过父View大小，模式为AT_MOST</p></li><li><p>如果该ViewGroup的测量模式是MeasureSpec.UNSPECIFIED，childDimension == LayoutParams.MATCH_PARENT或者childDimension == LayoutParams.WRAP_CONTENT，返回的子View的建议大小是0（小于6.0）或者ViewGroup的大小（6.0和以上），测量模式是MeasureSpec.UNSPECIFIED</p></li></ol><hr><h4 id="顶层View的MeasureSpec是谁指定"><a href="#顶层View的MeasureSpec是谁指定" class="headerlink" title="顶层View的MeasureSpec是谁指定"></a>顶层View的MeasureSpec是谁指定</h4><p>传递给子View的MeasureSpec是父容器根据自己的MeasureSpec及子View的布局参数所确定的，那么根MeasureSpec是谁创建的呢？我们用最常用的两种Window来解释一下，Activity与Dialog，DecorView是Activity的根布局，传递给DecorView的MeasureSpec是系统根据Activity或者Dialog的Theme来确定的，也就是说，最初的MeasureSpec是直接根据Window的属性构建的，一般对于Activity来说，根MeasureSpec是EXACTLY+屏幕尺寸，对于Dialog来说，如果不做特殊设定会采用AT_MOST+屏幕尺寸。这里牵扯到WindowManagerService跟ActivityManagerService</p><p>参考：</p><p><a href="https://www.jianshu.com/p/1dab927b2f36" target="_blank" rel="noopener">https://www.jianshu.com/p/1dab927b2f36</a><br><a href="https://www.jianshu.com/p/d16ec64181f2" target="_blank" rel="noopener">https://www.jianshu.com/p/d16ec64181f2</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用一张图告诉你Android中的事件传递机制</title>
      <link href="/2018/03/31/%E7%94%A8%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0Android%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/03/31/%E7%94%A8%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0Android%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><a href="https://upload-images.jianshu.io/upload_images/545982-e1b0bea3b5de2844.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="https://upload-images.jianshu.io/upload_images/545982-e1b0bea3b5de2844.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件传递机制_gaitubao_com_watermark.png"></a></p><p>其中，如果有步骤返回false，就会把该事件传递给上层，如果全部是false，最终会把该事件交给Activity来处理</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>记一个WebView的shouldOverrideUrlLoading方法的常见错误</title>
      <link href="/2018/03/31/%E8%AE%B0%E4%B8%80%E4%B8%AAWebView%E7%9A%84shouldOverrideUrlLoading%E6%96%B9%E6%B3%95%E7%9A%84%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2018/03/31/%E8%AE%B0%E4%B8%80%E4%B8%AAWebView%E7%9A%84shouldOverrideUrlLoading%E6%96%B9%E6%B3%95%E7%9A%84%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>平时我们写WebViewClient的时候，会覆盖shouldOverrideUrlLoading方法，代码可能都是下面这种：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webView.webViewClient = object : WebViewClient() &#123;  </span><br><span class="line"> <span class="function">override fun <span class="title">shouldOverrideUrlLoading</span><span class="params">(view: WebView, url: String)</span>: Boolean </span>&#123;  </span><br><span class="line"> view.loadUrl(url)  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">true</span>  </span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>今天看一些资料的时候发现，这个方法直接return false就可以在该WebView里跳转而不是弹出系统的浏览器选择框，网上充斥的都是某篇文章说的必须view.loadUrl(url)才会在自己的程序里跳转页面而不是跳出系统的浏览器选择框。今天才知道这个，惭愧惭愧。。。</p><p>总结一下：</p><ol><li>如果不设置webView.webViewClient，调用webView.loadUrl(url)就会弹出系统的浏览器选择框让你选一个浏览器来显示。</li><li>如果设置webView.webViewClient，就会在自己的WebView里跳转页面。</li><li>如果设置webView.webViewClient，并且重写shouldOverrideUrlLoading方法，在方法体里如果return true，那么就需要自己调用view.loadUrl(url)才能显示了，因为return true的时候一般是跳转Activity之类的逻辑。</li></ol>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>WebView中JavaScript与Java交互流程与WebView的漏洞处理</title>
      <link href="/2018/03/31/WebView%E4%B8%ADJavaScript%E4%B8%8EJava%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E4%B8%8EWebView%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%A4%84%E7%90%86/"/>
      <url>/2018/03/31/WebView%E4%B8%ADJavaScript%E4%B8%8EJava%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E4%B8%8EWebView%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>现在Android开发很多都是混合开发了，WebView也不再只是显示一个网页而已而是与Native App有很多交互，所以熟悉JavaScript与Java交互很有必要。  </p><h1 id="1-JavaScript调用Java"><a href="#1-JavaScript调用Java" class="headerlink" title="1. JavaScript调用Java"></a>1. JavaScript调用Java</h1><h2 id="1-1-1-Java注册"><a href="#1-1-1-Java注册" class="headerlink" title="1.1.1 Java注册"></a>1.1.1 Java注册</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置与Js交互的权限  </span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);  </span><br><span class="line">webView.addJavascriptInterface(<span class="keyword">new</span> JSInvokeClass(), <span class="string">"JSInvokeClassName"</span>);  </span><br><span class="line">...  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JSInvokeClass</span> </span>&#123;  </span><br><span class="line"> <span class="comment">// 被JS调用的方法必须加入@JavascriptInterface注解  </span></span><br><span class="line"> <span class="meta">@JavascriptInterface</span>  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">methodName</span><span class="params">(String param)</span> </span>&#123;  </span><br><span class="line"> ...  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"&#123;error:'error'&#125;"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-2-JavaScript调用"><a href="#1-1-2-JavaScript调用" class="headerlink" title="1.1.2 JavaScript调用"></a>1.1.2 JavaScript调用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//用一个Html的button测试  </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"JSInvokeClassName.methodName('aabbcc')"</span>&gt;</span>调用Java方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSInvokeClassName和methodName分别是JavaScript调用在Java代码里注册的类名映射和方法，名字随便起只要对应上就可以</p><p>但是这种方法有很多漏洞，需要解决如下问题：</p><ol><li><p>防止XSS</p></li><li><p>android 4.2之前的版本不要使用javainterface，可使用拦截prompt的方式</p></li><li><p>移除android 4.2之前的默认接口</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeJavascriptInterface(“searchBoxJavaBridge_”)  </span><br><span class="line">removeJavascriptInterface(“accessibility”)  </span><br><span class="line">removeJavascriptInterface(“accessibilityTraversal”)</span><br></pre></td></tr></table></figure><ol start="4"><li>防止不安全的访问</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setAllowFileAccessFromFileURLs(<span class="keyword">false</span>);  </span><br><span class="line">setAllowUniversalAccessFromFileURLs(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>使用https或者http2.0交互</li></ol><p>解决参考</p><p><a href="https://blog.csdn.net/carson_ho/article/details/64904635" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/64904635</a><br><a href="https://kotlintc.com/articles/5224?fr=email" target="_blank" rel="noopener">https://kotlintc.com/articles/5224?fr=email</a></p><h2 id="1-2通过-WebViewClient-的方法shouldOverrideUrlLoading-回调拦截-url"><a href="#1-2通过-WebViewClient-的方法shouldOverrideUrlLoading-回调拦截-url" class="headerlink" title="1.2通过 WebViewClient 的方法shouldOverrideUrlLoading ()回调拦截 url"></a>1.2通过 WebViewClient 的方法shouldOverrideUrlLoading ()回调拦截 url</h2><p>优点：不存在方式1.1的漏洞；</p><p>缺点：JS获取Android方法的返回值复杂，需要Java调用JavaScript的方法然后在JavaScript的这个方法里再调用1.1.1中注册的方法</p><p>示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定传入进来的 url = "js://webview?arg1=111&amp;arg2=222"（同时也是约定好的需要拦截的）  </span></span><br><span class="line"></span><br><span class="line">Uri uri = Uri.parse(url);  </span><br><span class="line"><span class="comment">// 步骤1：根据协议的参数，判断是否是所需要的url（一般根据scheme（协议格式） &amp; authority（协议名）判断）  </span></span><br><span class="line"><span class="comment">// 如果url的协议 = 预先约定的 js 协议就解析往下解析参数  </span></span><br><span class="line"><span class="keyword">if</span> (uri.getScheme().equals(<span class="string">"js"</span>)) &#123;  </span><br><span class="line"> <span class="comment">// 步骤2：如果 authority  = 预先约定协议里的 webview，即代表都符合约定的协议  </span></span><br><span class="line"> <span class="keyword">if</span> (uri.getAuthority().equals(<span class="string">"webview"</span>)) &#123;  </span><br><span class="line"> <span class="comment">// 步骤3：执行JS所需要调用的逻辑  </span></span><br><span class="line"> System.out.println(<span class="string">"js调用了Android的方法"</span>);  </span><br><span class="line"> <span class="comment">// 可以在协议上带有参数并传递到Android上  </span></span><br><span class="line"> HashMap&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line"> Set&lt;String&gt; collection = uri.getQueryParameterNames();  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-3通过-WebChromeClient-的onJsAlert-、onJsConfirm-、onJsPrompt（）方法回调拦截JS对话框alert-、confirm-、prompt（）-消息"><a href="#1-3通过-WebChromeClient-的onJsAlert-、onJsConfirm-、onJsPrompt（）方法回调拦截JS对话框alert-、confirm-、prompt（）-消息" class="headerlink" title="1.3通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息"></a>1.3通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息</h2><p>一般使用onJsPrompt方法，因为该方法可以返回值给JavaScript，既没有1.1的漏洞也能方便的接收JavaScript的值和返回给JavaScript值</p><p>示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定传入进来的 url = "js://webview?arg1=111&amp;arg2=222"（同时也是约定好的需要拦截的）  </span></span><br><span class="line"></span><br><span class="line">Uri uri = Uri.parse(url);  </span><br><span class="line"><span class="comment">// 步骤1：根据协议的参数，判断是否是所需要的url（一般根据scheme（协议格式） &amp; authority（协议名）判断）  </span></span><br><span class="line"><span class="comment">// 如果url的协议 = 预先约定的 js 协议就解析往下解析参数  </span></span><br><span class="line"><span class="keyword">if</span> (uri.getScheme().equals(<span class="string">"js"</span>)) &#123;  </span><br><span class="line"> <span class="comment">// 步骤2：如果 authority  = 预先约定协议里的 webview，即代表都符合约定的协议  </span></span><br><span class="line"> <span class="keyword">if</span> (uri.getAuthority().equals(<span class="string">"webview"</span>)) &#123;  </span><br><span class="line"> <span class="comment">// 步骤3：执行JS所需要调用的逻辑  </span></span><br><span class="line"> System.out.println(<span class="string">"js调用了Android的方法"</span>);  </span><br><span class="line"> <span class="comment">// 可以在协议上带有参数并传递到Android上  </span></span><br><span class="line"> HashMap&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line"> Set&lt;String&gt; collection = uri.getQueryParameterNames();  </span><br><span class="line"> ...  </span><br><span class="line"> <span class="comment">//参数result:代表消息框的返回值(输入值)  </span></span><br><span class="line"> result.confirm(<span class="string">"js调用了Android的方法成功啦"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="2-Java调用JavaScript"><a href="#2-Java调用JavaScript" class="headerlink" title="2. Java调用JavaScript"></a>2. Java调用JavaScript</h1><blockquote><p>这时候有<strong>两种</strong>方法</p></blockquote><p>先上HTML代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="undefined"> function callJS()&#123;  </span></span><br><span class="line"><span class="undefined"> alert("Android调用了JS的callJS方法");  </span></span><br><span class="line"><span class="undefined"> &#125;  </span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>特别注意：Java调用JavaScript代码调用一定要在 onPageFinished（） 回调之后才能调用，否则不会调用。onPageFinished()属于WebViewClient类的方法，主要在页面加载结束时调用。</p></blockquote><h2 id="2-1-loadUrl"><a href="#2-1-loadUrl" class="headerlink" title="2.1 loadUrl"></a>2.1 loadUrl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置与Js交互的权限  </span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);  </span><br><span class="line">webView.loadUrl(<span class="string">"javascript:callJS()"</span>);</span><br></pre></td></tr></table></figure><h2 id="2-2-evaluateJavascript"><a href="#2-2-evaluateJavascript" class="headerlink" title="2.2 evaluateJavascript"></a>2.2 evaluateJavascript</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);  </span><br><span class="line">webView.evaluateJavascript（<span class="string">"javascript:callJS()"</span>, <span class="keyword">new</span> ValueCallback&lt;String&gt;() &#123;  </span><br><span class="line"> <span class="meta">@Override</span>  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line"> <span class="comment">//此处为 js 返回的结果  </span></span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>优点：该方法比第一种方法效率更高、使用更简洁。因为该方法的执行不会使页面刷新，而第一种方法（loadUrl ）的执行则会。该方法在Android 4.4 后才可使用。</p><h4 id="使用建议：两种方法混合使用，即Android-4-4以下使用方法2-1，Android-4-4以上方法2-2，示例如下："><a href="#使用建议：两种方法混合使用，即Android-4-4以下使用方法2-1，Android-4-4以上方法2-2，示例如下：" class="headerlink" title="使用建议：两种方法混合使用，即Android 4.4以下使用方法2.1，Android 4.4以上方法2.2，示例如下："></a>使用建议：两种方法混合使用，即Android 4.4以下使用方法2.1，Android 4.4以上方法2.2，示例如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android版本变量  </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> version = Build.VERSION.SDK_INT;  </span><br><span class="line"><span class="comment">// 因为该方法在 Android 4.4 版本才可使用，所以使用时需进行版本判断  </span></span><br><span class="line"><span class="keyword">if</span> (version &lt; <span class="number">18</span>) &#123;  </span><br><span class="line"> webView.loadUrl(<span class="string">"javascript:callJS()"</span>);  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"> webView.evaluateJavascript（<span class="string">"javascript:callJS()"</span>, <span class="keyword">new</span> ValueCallback&lt;String&gt;() &#123;  </span><br><span class="line"> <span class="meta">@Override</span>  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveValue</span><span class="params">(String value)</span> </span>&#123;  </span><br><span class="line"> <span class="comment">//此处为 js 返回的结果  </span></span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/carson_ho/article/details/64904691" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/64904691</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android内存泄漏的多种方式</title>
      <link href="/2018/03/31/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/03/31/android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote><p>内存泄漏的定义：简单的讲，就是该被释放的对象没有释放，虽然不再被使用却一直被某个或某些实例所持有而导致GC不能回收</p></blockquote><p>因为Java的GC机制，我们并不需要去像C++一样去手动释放内存，但是如果不注意，Java一样会发生内存泄漏，下面列举一些开发中常见的内存泄漏场景：</p><h6 id="1-静态集合："><a href="#1-静态集合：" class="headerlink" title="1. 静态集合："></a>1. 静态集合：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Vector v = <span class="keyword">new</span> Vector(<span class="number">10</span>);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">100</span>; i++)&#123;  </span><br><span class="line"> Object o = <span class="keyword">new</span> Object();  </span><br><span class="line"> v.add(o);  </span><br><span class="line"> o = <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，循环申请Object 对象，并将所申请的对象放入一个Vector 中，如果仅仅释放引用本身（o=null），那么Vector 仍然引用该对象，所以这个对象对GC 来说是不可回收的。因此，如果对象加入到Vector 后，还必须从Vector 中删除，最简单的方法就是将Vector对象设置为null。</p><h6 id="2-当集合里面的对象属性被修改后，再调用remove-方法时不起作用。"><a href="#2-当集合里面的对象属性被修改后，再调用remove-方法时不起作用。" class="headerlink" title="2. 当集合里面的对象属性被修改后，再调用remove()方法时不起作用。"></a>2. 当集合里面的对象属性被修改后，再调用remove()方法时不起作用。</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">data class <span class="title">Person</span><span class="params">(<span class="keyword">private</span> val name: String, <span class="keyword">private</span> val password: String, var age: Int)</span>   </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;  </span><br><span class="line"> val set = HashSet&lt;Person&gt;();  </span><br><span class="line"> val p1 = Person(<span class="string">"唐僧"</span>, <span class="string">"pwd1"</span>, <span class="number">25</span>)  </span><br><span class="line"> val p2 = Person(<span class="string">"孙悟空"</span>, <span class="string">"pwd2"</span>, <span class="number">26</span>)  </span><br><span class="line"> val p3 = Person(<span class="string">"猪八戒"</span>, <span class="string">"pwd3"</span>, <span class="number">27</span>)  </span><br><span class="line"> set.add(p1)  </span><br><span class="line"> set.add(p2)  </span><br><span class="line"> set.add(p3)  </span><br><span class="line"> System.out.println(<span class="string">"总共有:"</span> +set.size + <span class="string">" 个元素!"</span>); <span class="comment">//结果：总共有:3 个元素!  </span></span><br><span class="line"> set.forEach &#123;  </span><br><span class="line"> System.out.println(it)  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> p3.age = <span class="number">2</span> <span class="comment">//修改p3的年龄,此时p3元素对应的hashcode值发生改变  </span></span><br><span class="line"> set.remove(p3) <span class="comment">//此时remove不掉，造成内存泄漏  </span></span><br><span class="line"> set.add(p3) <span class="comment">//重新添加，居然添加成功  </span></span><br><span class="line"> System.out.println(<span class="string">"总共有:"</span> +set.size + <span class="string">" 个元素!"</span>); <span class="comment">//结果：总共有:4 个元素!  </span></span><br><span class="line"> set.forEach &#123;  </span><br><span class="line"> System.out.println(it)  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况需要我们重写hashCode和equals方法，例如将Person类改为：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">data class <span class="title">Person</span><span class="params">(<span class="keyword">private</span> val name: String, <span class="keyword">private</span> val password: String, var age: Int)</span> </span>&#123;  </span><br><span class="line"> <span class="function">override fun <span class="title">equals</span><span class="params">(other: Any?)</span>: Boolean </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> when &#123;  </span><br><span class="line"> other !is Person -&gt; <span class="keyword">false</span>  </span><br><span class="line"> name != other.name -&gt; <span class="keyword">false</span>  </span><br><span class="line"> <span class="keyword">else</span> -&gt; <span class="keyword">true</span>  </span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> <span class="function">override fun <span class="title">hashCode</span><span class="params">()</span>: Int </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> name.hashCode()  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候结果就正确了，添加的时候不会重复了，可以自己将代码复制到IDE查看结果</p><h6 id="3-监听器"><a href="#3-监听器" class="headerlink" title="3. 监听器"></a>3. 监听器</h6><p>Android很多控件设置监听器是setXXXListener，比如Button，但是有些View设置某些监听是addXXXListener，比如EditText，如果不注意可能就调用了多次addXXXListener方法，造成了内存泄漏和莫名其妙的bug</p><h6 id="4-各种连接"><a href="#4-各种连接" class="headerlink" title="4. 各种连接"></a>4. 各种连接</h6><p>比如数据库连接，网络连接，打开文件流之类的，除非其显式的调用了其close()方法将其连接关闭，否则是不会自动被GC回收的。</p><h6 id="5-非静态内部类"><a href="#5-非静态内部类" class="headerlink" title="5. 非静态内部类"></a>5. 非静态内部类</h6><p>这也是很常见的一种情况，我们写代码时写的最多的就是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> val mHandler = object : Handler() &#123;  </span><br><span class="line"> <span class="function">override fun <span class="title">handleMessage</span><span class="params">(msg: Message)</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">super</span>.handleMessage(msg)  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在非静态内部类里，是默认持有外部类引用的，举个例子如果我们调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mHandler.sendMessageDelayed(Message.obtain(),<span class="number">2000</span>)</span><br></pre></td></tr></table></figure></p><p>然后finish这个Activity，这时候就内存泄漏了，因为mHandler持有外部Activity的强引用，所以如果Handler中的任务没有执行完那么这个Activity是不能被回收的，这里的例子比较简单，有可能这不是Handler而是一个Thread之类的，解决办法是我们在Activity的onDestory方法里调用Handler的removeCallbacksAndMessages方法(如果是这里这种情况)，并且尽量将内部类写成静态的内部类，静态内部类是不持有外部类的引用的</p><blockquote><p>如果一定要持有外部类的应用，我们可以考虑使用弱应用的方式</p></blockquote><h6 id="6-单例模式的类持有其他类的引用"><a href="#6-单例模式的类持有其他类的引用" class="headerlink" title="6. 单例模式的类持有其他类的引用"></a>6. 单例模式的类持有其他类的引用</h6><p>举个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object Util &#123;  </span><br><span class="line"> <span class="keyword">private</span> lateinit var mContext: Context  </span><br><span class="line"> <span class="function">fun <span class="title">init</span><span class="params">(context: Context)</span> </span>&#123;  </span><br><span class="line"> mContext = context  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="function">fun <span class="title">getXXX</span><span class="params">(res: Int)</span>: String </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> mContext.getString(res)  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可能有人想传入一个context，以后使用就不用每次都传入了，但是这时候这个context的内存就发生了泄露，因为这个context被这个单例工具类一直持有，所以这个context就没办法被GC回收了，所以我们应该在这个工具类的每个方法里都传入Context而不是在init里一次传入一个Context想一劳永逸，或者根据你的业务需要传入ApplicationContext，修改如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">object Util &#123;  </span><br><span class="line"> <span class="comment">//传入ApplicationContext  </span></span><br><span class="line"> <span class="keyword">private</span> lateinit var mContext: Context  </span><br><span class="line"> <span class="function">fun <span class="title">init</span><span class="params">(context: Context)</span> </span>&#123;  </span><br><span class="line"> mContext = context.applicationContext  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">//或者每个方法传入Context而不是一直持有引用  </span></span><br><span class="line"> <span class="function">fun <span class="title">getXXX</span><span class="params">(context:Context,res: Int)</span>: String </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> context.getString(res)  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="7-BraodcastReceiver未及时解绑"><a href="#7-BraodcastReceiver未及时解绑" class="headerlink" title="7. BraodcastReceiver未及时解绑"></a>7. BraodcastReceiver未及时解绑</h6><p>广播我们用的比较多，但是很多新手动态注册广播后，并没有及时在Activity的onDestory方法里解绑，导致内存泄漏</p><h6 id="8-Bitmap-没调用-recycle"><a href="#8-Bitmap-没调用-recycle" class="headerlink" title="8. Bitmap 没调用 recycle()"></a>8. Bitmap 没调用 recycle()</h6><p>对于 Bitmap 对象在不使用时,我们应该先调用 recycle() 释放内存，然后才它设置为 null. 因为加载 Bitmap 对象的内存空间，一部分是 java 的，一部分 C 的（因为 Bitmap 分配的底层是通过 JNI 调用的 )。 而这个 recyle() 就是针对 C 部分的内存释放。</p><p>比较常见的就是这些</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Looper,Handler,MessageQueue简明讲解</title>
      <link href="/2018/03/31/Looper-Handler-MessageQueue%E7%AE%80%E6%98%8E%E8%AE%B2%E8%A7%A3/"/>
      <url>/2018/03/31/Looper-Handler-MessageQueue%E7%AE%80%E6%98%8E%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>这个Looper，Handler，MessageQueue机制其实很简单，网上也有很多教程，有很多讲的很详细，废话不多说，我按照我的理解来简单的讲解一下，详细的可以在网上找教程</p><ol><li>Looper类用ThreadLocal来保证一个线程里面一个Looper，在prepare方法里，调用ThreadLocal.get()来获取当前线程的Looper，如果没有的话就set一个Looper对象进去，在Looper的构造函数里会创建一个MessageQueue对象</li></ol><ul><li>在Looper类的loop方法里，调用ThreadLocal.get()获取当前线程的Looper，然后获取当前Looper的MessageQueue，然后用一个死循环来一直从里面取Message，取到以后就调用Message的target——也就是Handler，来执行Handler的dispatchMessage方法，这个target哪里来的呢，可以查看一下Handler的sendMessage的那几个方法，它们最终都会调用Handler的enqueueMessage方法，在这个方法里把Message的target设置为了Handler自己，然后把该Message加入到了MessageQueue，那么MessageQueue又是哪里来的呢，可以看Handler的几个构造函数，最终都会调用<code>Handler(Callback callback, boolean async)</code>这个构造函数，在这个构造函数里调用<code>Looper.myLooper()</code>获取了当前线程的Looper，然后从这个Looper获取了MessageQueue</li></ul><p>讲完了，就上面这几个步骤，至于新创建的线程想直接操作控件需要先执行Looper.prepare方法再怎样怎样，可以自己思考一下原因，看一下我上面说的几个步骤就明白为什么了</p><p>这个Looper机制，java层很简单，主要的地方在native层，为什么loop方法是一个死循环而程序不会卡住呢？这就涉及到linux的pipe（管道）方面的知识了</p><blockquote><p>关于管道，简单来说，管道就是一个文件。<br>在管道的两端，分别是两个打开文件文件描述符，这两个打开文件描述符都是对应同一个文件，其中一个是用来读的，别一个是用来写的。<br>一般的使用方式就是，一个线程通过读文件描述符中来读管道的内容，当管道没有内容时，这个线程就会进入等待状态，而另外一个线程通过写文件描述符来向管道中写入内容，写入内容的时候，如果另一端正有线程正在等待管道中的内容，那么这个线程就会被唤醒。这个等待和唤醒的操作是如何进行的呢，这就要借助Linux系统中的epoll机制了。 Linux系统中的epoll机制为处理大批量句柄而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著减少程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。</p></blockquote><p>参考文章：</p><p><a href="https://www.zhihu.com/question/34652589" target="_blank" rel="noopener">https://www.zhihu.com/question/34652589</a><br><a href="http://wangkuiwu.github.io/2014/08/26/MessageQueue/" target="_blank" rel="noopener">http://wangkuiwu.github.io/2014/08/26/MessageQueue/</a><br><a href="http://www.bijishequ.com/detail/381606" target="_blank" rel="noopener">http://www.bijishequ.com/detail/381606</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> handler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo博客建成后的一些功能添加</title>
      <link href="/2018/03/31/hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E6%88%90%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0/"/>
      <url>/2018/03/31/hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E6%88%90%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0/</url>
      <content type="html"><![CDATA[<ol><li><p>添加hexo-admin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd yourblog</span><br><span class="line">cnpm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br><span class="line">open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure></li><li><p>增加搜索功能</p><ol><li><p>我用的是淘宝的cnpm，不然国内的速度太慢了，如何安装cnpm请看这里：<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝cnpm</a></p></li><li><p>在Hexo根目录执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>编辑站点配置文件,在站点配置文件(Hexo根目录的配置文件)_config.yml中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>编辑主题配置文件,启用本地搜索,在主题配置文件(Next主题根目录的配置文件)_config.yml中启用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line"> enable: true</span><br></pre></td></tr></table></figure></li></ol></li><li><p>去掉coding.me的广告</p><ol><li><p>进入你的Hexo文件夹\themes\next\layout\ _partials\footer.swig，打开该文件</p></li><li><p>在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; theme.footer.copyright || config.author &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>下面增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--以下4句为一条竖线和Coding Page--&gt;</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;span&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常量池、栈、堆的比较</title>
      <link href="/2018/03/03/%E5%B8%B8%E9%87%8F%E6%B1%A0%E3%80%81%E6%A0%88%E3%80%81%E5%A0%86%E7%9A%84%E6%AF%94%E8%BE%83/"/>
      <url>/2018/03/03/%E5%B8%B8%E9%87%8F%E6%B1%A0%E3%80%81%E6%A0%88%E3%80%81%E5%A0%86%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<p>看到一篇文章写的很清晰,源地址:</p><p><a href="https://www.cnblogs.com/Eason-S/p/5658230.html" target="_blank" rel="noopener">https://www.cnblogs.com/Eason-S/p/5658230.html</a></p><p>JAVA中，有六个不同的地方可以存储数据：</p><p><strong>1.寄存器</strong>：最快的存储区，位于不同于其他存储区的地方——处理器内部。寄存器的数量极其有限，所以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。</p><p><strong>2. 栈</strong>：存放基本类型的变量数据和对象的引用。位于通用RAM中，但通过它的“堆栈指针”可以从处理器哪里获得支持。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建程序时候，JAVA编译器必须知道存储在堆栈内所有数据的确切大小和生命周期，因为它必须生成 相应的代码，以便上下移动堆栈指针。这一约束限制了程序的灵活性。</p><p><strong>3. 堆</strong>：一种通用性的内存池（也存在于RAM中），用于存放所以的JAVA对象。堆不同于堆栈的好处是：编译器不需要知道要从堆里分配多少存储区域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当你需要创建一个对象的时候，只需要new写一行简单的代码，当执行这行代码时，会自动在堆里进行存储分配。当然，为这种灵活性必须要付出相应的代码。用堆进行存储分配比用堆栈进行存储存储需要更多的时间。  </p><p><strong>4. 静态域</strong>：存放静态成员（static定义的） 。</p><p><strong>5. 常量池</strong>：存放字符串常量和基本类型常量（public static final）。 常量值通常直接存放在程序代码内部，这样做是安全的，因为它们永远不会被改变。</p><p><strong>6. 非RAM存储</strong>：硬盘等永久存储空间。如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。 </p><p>这里我们主要关心栈，堆和常量池，对于栈和常量池中的对象可以共享，对于堆中的对象不可以共享。</p><p>栈中的数据大小和生命周期是可以确定的，当没有引用指向数据时，这个数据就会消失。堆中的对象的由垃圾回收器负责回收，因此大小和生命周期不需要确定，具有很大的灵活性。    </p><p><strong>(1)对于字符串</strong>：其对象的引用都是存储在栈中的，如果是编译期已经创建好(直接用双引号定义的)的就存储在常量池中，如果是运行期（new出来的）才能确定的就存储在堆中。对于equals相等的字符串，在常量池中永远只有一份，在堆中有多份。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String s1 = &quot;china&quot;;</span><br><span class="line">String s2 = &quot;china&quot;;</span><br><span class="line">String s3 = &quot;china&quot;;</span><br><span class="line">String ss1 = new String(&quot;china&quot;);</span><br><span class="line">String ss2 = new String(&quot;china&quot;);</span><br><span class="line">String ss3 = new String(&quot;china&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/922762/201607/922762-20160710174112202-1015226419.png" alt=""></p><p>对于通过new产生一个字符串（假设为”china”）时，会先去常量池中查找是否已经有了”china”对象，如果没有则在常量池中创建一个此字符串对象，然后堆中再创建一个常量池中此”china”对象的拷贝对象。</p><p>这也就是有道面试题：String s = new String(“xyz”);产生几个对象？答：一个或两个，如果常量池中原来没有”xyz”,就是两个。</p><p><strong>(2)对于基础类型的变量和常量</strong>：变量和引用存储在栈中，常量存储在常量池中。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int i1 = 9;</span><br><span class="line">int i2 = 9;</span><br><span class="line">int i3 = 9; </span><br><span class="line">public static final int INT1 = 9;</span><br><span class="line">public static final int INT2 = 9;</span><br><span class="line">public static final int INT3 = 9;</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/922762/201607/922762-20160710174141764-2118970512.png" alt=""></p><p>对于成员变量和局部变量：成员变量就是方法外部，类的内部定义的变量；局部变量就是方法或语句块内部定义的变量。局部变量必须初始化。</p><p>形式参数是局部变量，局部变量的数据存在于栈内存中。栈内存中的局部变量随着方法的消失而消失。</p><p>成员变量存储在堆中的对象里面，由垃圾回收器负责回收。</p><p>下面给出一个实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class BirthDate &#123;</span><br><span class="line">    private int day;</span><br><span class="line">    private int month;</span><br><span class="line">    private int year;    </span><br><span class="line">    public BirthDate(int d, int m, int y) &#123;</span><br><span class="line">        day = d; </span><br><span class="line">        month = m; </span><br><span class="line">        year = y;</span><br><span class="line">    &#125;</span><br><span class="line">    省略get,set方法………</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        int date = 9;</span><br><span class="line">        Test test = new Test();      </span><br><span class="line">        test.change(date); </span><br><span class="line">        BirthDate d1= new BirthDate(7,7,1970);       </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    public void change(int i)&#123;</span><br><span class="line">     i = 1234;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/922762/201607/922762-20160710174216217-1171188913.png" alt=""></p><p>对于以上这段代码，date为局部变量，i,d,m,y都是形参为局部变量，day，month，year为成员变量。下面分析一下代码执行时候的变化：</p><p>1. main方法开始执行：int date = 9;</p><p>date局部变量，基础类型，引用和值都存在栈中。</p><p>2. Test test = new Test();</p><p>test为对象引用，存在栈中，对象(new Test())存在堆中。</p><p>3. test.change(date);</p><p>i为局部变量，引用和值存在栈中。当方法change执行完成后，i就会从栈中消失。</p><p>4. BirthDate d1= new BirthDate(7,7,1970);  </p><p>d1为对象引用，存在栈中，对象(new BirthDate())存在堆中，其中d，m，y为局部变量存储在栈中，且它们的类型为基础类型，因此它们的数据也存储在栈中。day,month,year为成员变量，它们存储在堆中(new BirthDate()里面)。当BirthDate构造方法执行完之后，d,m,y将从栈中消失。</p><p>5.main方法执行完之后，date变量，test，d1引用将从栈中消失，new Test(),new BirthDate()将等待垃圾回收。</p><p>参考：<br><a href="http://www.iteye.com/topic/634530" target="_blank" rel="noopener">http://www.iteye.com/topic/634530</a><br><a href="http://www.cnblogs.com/xiohao/p/4296088.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiohao/p/4296088.html</a><br>《深入理解java虚拟机———jvm高级特性与最佳实践》</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>保存代码到githubPages</title>
      <link href="/2018/02/10/%E4%BF%9D%E5%AD%98%E4%BB%A3%E7%A0%81%E5%88%B0githubPages/"/>
      <url>/2018/02/10/%E4%BF%9D%E5%AD%98%E4%BB%A3%E7%A0%81%E5%88%B0githubPages/</url>
      <content type="html"><![CDATA[<p>我的githubPages放到了master分支,所以我新建了一个source分支(名字随意),然后把本地的hexo的文件们都提交到了这个分支,需要注意的是themes下面的文件夹,都是git clone下来的,所以在刚才的source分支里并不存在这些文件,我自己暂时没有更新这些theme的需求,所以我把我自己用的themes/next下面的.git文件夹和.gitignore文件夹删除了,然后再提交,在source分之下就有这些文件夹了,以后换机器直接切换到这个分支就可以继续写文章了</p>]]></content>
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>从DNS到github pages自定义域名 -- 漫谈域名那些事</title>
      <link href="/2018/02/09/%E4%BB%8EDNS%E5%88%B0github-pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D-%E6%BC%AB%E8%B0%88%E5%9F%9F%E5%90%8D%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2018/02/09/%E4%BB%8EDNS%E5%88%B0github-pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D-%E6%BC%AB%E8%B0%88%E5%9F%9F%E5%90%8D%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>转载:<a href="http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/" target="_blank" rel="noopener">http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/</a><br><a id="more"></a><br>当我们在github申请一个pages之后，很多人会选择自定义域名，给自己的github pages一个属于自己的名字。<br>那么，从申请到域名到最后的github自定义域名设置，中间究竟发生了什么，本文就来说说域名那些事。</p><hr><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a><a href="#域名" title="域名"></a>域名</h1><p>域名就是一段文字，更具体地说，是一段人类容易识别的文字，它的作用很简单，就是用来给一个ip起一个人们能够记得住的名字。<br>域名是一种资源，很多时候甚至是地位财富和身份的象征，所以越来越多的geek们都趋之若鹜的申请自己的域名，我也不例外。</p><h2 id="根域"><a href="#根域" class="headerlink" title="根域"></a><a href="#根域" title="根域"></a>根域</h2><p>我们通常知道的域名，例如<a href="http://winterttr.me" target="_blank" rel="noopener">winterttr.me</a>，其实是完整域名的缩写。 真正的全称为<a href="http://winterttr.me" target="_blank" rel="noopener">winterttr.me.</a>，请注意最后的<code>.</code>，这个就是根域。 它的现实体现为全球13台固定ip的根域服务器。 从<code>a.root-servers.net</code>到<code>m.root.servers.net</code>。</p><p>当我们在进行dns查询的时候，如果一个全新的域名从来没有进行查询，那么，最终会向这13台根域服务器进行请求。 不过，现在的浏览器已经基本上默认不再添加这个”多余”的点了，已然成为一种默认习惯。</p><p>当然，事实上，并不是真正的13台，而是13组，每一台在全球都有很多的镜像节点，所以你不用担心其中一台挂了会引起全球混乱~</p><h2 id="顶级域名-Top-Level-Domain-TLD"><a href="#顶级域名-Top-Level-Domain-TLD" class="headerlink" title="顶级域名(Top Level Domain - TLD)"></a><a href="#顶级域名-Top-Level-Domain-TLD" title="顶级域名(Top Level Domain - TLD)"></a>顶级域名(Top Level Domain - TLD)</h2><p>常用的顶级域名分为几种：<br>1 国家顶级域名，例如<code>.cn</code>,<code>.jp</code><br>2 机构顶级域名，例如<code>.com</code>,<code>.edu</code><br>3 还有其他分类</p><h2 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a><a href="#二级域名" title="二级域名"></a>二级域名</h2><p>这个就是我们常常能够申请到的域名，在顶级域名的左侧加上的一个自定义的文字段。据个例子： <a href="http://winterTTr.me" target="_blank" rel="noopener">winterTTr.me</a>。所以，我们通常所说的域名，往往指的是这个二级域名。</p><h2 id="子域名-sbudomain-name"><a href="#子域名-sbudomain-name" class="headerlink" title="子域名(sbudomain name)"></a><a href="#子域名-sbudomain-name" title="子域名(sbudomain name)"></a>子域名(sbudomain name)</h2><p>相对于上文所提到的“我们通常所说的域名”（二级域名）的基础上，又加入了子域名的概念，就是在一个域名的前面，加上新的字段，代表这个域名下的某个特定的主机或者协议。最常用的就是<code>WWW</code>协议，所以，我的子域名<code>www.winterttr.me</code>就是<code>winterttr.me</code>的<code>WWW</code>子域名。</p><hr><h1 id="有关DNS的那些事"><a href="#有关DNS的那些事" class="headerlink" title="有关DNS的那些事"></a><a href="#有关DNS的那些事" title="有关DNS的那些事"></a>有关DNS的那些事</h1><p>咱们谈完了域名，那么就不得不说到DNS（Domain Name System)，DNS所承担的主要任务，就是所谓的域名解析。这些由DNS系统中的DNS服务器负责。那么，DNS服务器解析一个域名得到了什么？ – <strong>IP地址</strong></p><p>所以，域名解析的过程，说白了就是把一个人类记得住的域名变成ip网络中机器认识的ip地址。</p><p>那么，DNS服务器上都存了些啥？最主要的就是能够完成域名解析的一些记录</p><h2 id="A记录（A-record"><a href="#A记录（A-record" class="headerlink" title="A记录（A record)"></a><a href="#A记录（A-record" title="A记录（A record)"></a>A记录（A record)</h2><p>A记录在DNS中的意义就是，域名到ip地址的转换。<br>所以，当我们在DNS服务器中添加一个A记录时，是告诉服务器，将某个特定的域名映射到一个ip地址。这个算是最简单直白的转换规则了。</p><h2 id="CNAME记录（CNAME-record"><a href="#CNAME记录（CNAME-record" class="headerlink" title="CNAME记录（CNAME record)"></a><a href="#CNAME记录（CNAME-record" title="CNAME记录（CNAME record)"></a>CNAME记录（CNAME record)</h2><p>CNAME的意义，简单说就是别名，即将一个域名射到另一个域名（区别于A记录的ip）。所以，CNAME通常有两种用法：</p><ul><li>不同顶级域名之间的跳转<br>例如：我的域名是 <code>winterTTr.me</code>(顶级域名为<code>me</code>)。如果我希望，当我访问这个域名的时候，实际上是访问我的<code>winterTTr.github.io</code>（顶级域名为<code>io</code>）的主页时，虽然他们在不同的顶级域名，但是我可以用CNAME记录映射。</li><li>将一个子域名映射到域名<br>例如，你想当访问者输入<code>www.winterTTr.me</code>（一个<code>WWW</code>子域名）的时候，仍旧访问<code>winterTTr.me</code>这个域名所指向的内容时，可以将<code>www.winterTTr.me</code>利用CNAME记录映射到<code>winterTTr.me</code>。</li></ul><h2 id="NS记录（Name-Server）"><a href="#NS记录（Name-Server）" class="headerlink" title="NS记录（Name Server）"></a><a href="#NS记录（Name-Server）" title="NS记录（Name Server）"></a>NS记录（Name Server）</h2><p>简单来说，就是声明谁来负责解析我这个域名，指定了负责解析我这个域名的服务器的地址。这条记录赋予我们一个特殊的能力，就是，我可以让自己指定的一个DNS解析服务器，而不一定是域名提供商自带的域名解析服务器。简单来说，就是在godaddy买的域名，默认是使用godaddy的域名服务器来进行域名解析的，但是如果我想让别的server解析（例如NDSPod），而不受godaddy服务器的限制呢？那就是更改这个NS记录的内容。一般来讲，是两条记录，一条主服务器，一条副服务器。</p><h2 id="现实中的一些例子"><a href="#现实中的一些例子" class="headerlink" title="现实中的一些例子"></a><a href="#现实中的一些例子" title="现实中的一些例子"></a>现实中的一些例子</h2><p>这个就是我的域名在<code>DNSPod</code>中的设置。</p><p><img src="http://7xljtv.com1.z0.glb.clouddn.com/images/2015-10-23-from-dns-to-github-custom-domain/dnspod-setting-of-winterttr.jpg" alt="dnspod-setting-of-winterttr.jpg"></p><p>可以看到，NS记录为dnspod的服务器域名，<code>dnspod</code>提供了一种非常方便的服务。就是可以根据不同的线路类型，进行不同的解析。图中可以看到，国内的使用gitcafe，国外的使用github，同时，baidu抓取国内线路gitcafe的内容，躲避了github封闭baidu spider的问题。</p><hr><h1 id="在godaddy花钱的时候买到了什么"><a href="#在godaddy花钱的时候买到了什么" class="headerlink" title="在godaddy花钱的时候买到了什么"></a><a href="#在godaddy花钱的时候买到了什么" title="在godaddy花钱的时候买到了什么"></a>在godaddy花钱的时候买到了什么</h1><p>这不是废话么，买到了域名！<br>当然，除了这一串字符串之外，是什么让我们真正拥有了这些字符串使用权呢？</p><h2 id="在godaddy中配置域名的能力"><a href="#在godaddy中配置域名的能力" class="headerlink" title="在godaddy中配置域名的能力"></a><a href="#在godaddy中配置域名的能力" title="在godaddy中配置域名的能力"></a>在godaddy中配置域名的能力</h2><p>话说花了钱，买了域名，为啥这个域名就是你的呢？<br>这是因为，godaddy将这个域名中的各种记录的配置权力分配了给你，于是，你可以定义域名的ip（A记录），或者将这个域名指向另一个别名（CNAME记录）。</p><h2 id="除了这些我还能做啥"><a href="#除了这些我还能做啥" class="headerlink" title="除了这些我还能做啥"></a><a href="#除了这些我还能做啥" title="除了这些我还能做啥"></a>除了这些我还能做啥</h2><p>默认的域名，是在godaddy自带的域名解析服务器中进行的。godaddy是提供更改NS记录的权利的，所以，我们可以将这个域名解析的能力交给godaddy之外的人，这就是我如何做到使用<code>DNSPod</code>来进行域名解析的。</p><hr><h1 id="github中的自定义域名"><a href="#github中的自定义域名" class="headerlink" title="github中的自定义域名"></a><a href="#github中的自定义域名" title="github中的自定义域名"></a>github中的自定义域名</h1><p>那么，经过上面一堆讲解，最终还是回到最实际的问题，github中的自定义域名。</p><h2 id="github中的域名支持"><a href="#github中的域名支持" class="headerlink" title="github中的域名支持"></a><a href="#github中的域名支持" title="github中的域名支持"></a>github中的域名支持</h2><p>github的域名是支持A记录的，这个意思就是，github的服务器域名是个固定ip。所以，当我们需要将申请的域名给予一个自己的github.io的地址的时候，我们可以在DNS服务器的配置中添加一条A记录，指向github的服务器地址。<br>现在github的服务器地址为：</p><ul><li>192.30.252.153</li><li>192.30.252.154</li></ul><p>如果你做了上面的操作，那意思就是，我希望把我的主域名<code>winterTTr.me</code>完全指向github.io的主页。</p><p>不过，如果你的只是想将一个子域名，例如<code>www.winterTTr.me</code>，而不是主域名<code>winterTTr.me</code>分配给你的github主页，那么，A记录会完全绑定你的主域名，所以这个场景A记录不适合。你需要在DNS服务器中添加一条CNAME记录，将子域名指向<code>winterTTr.github.io</code>，这样，当用户访问<code>WWW</code>子域名的时候，会跳转到github.io的主页上。</p><h2 id="告诉github你的域名"><a href="#告诉github你的域名" class="headerlink" title="告诉github你的域名"></a><a href="#告诉github你的域名" title="告诉github你的域名"></a>告诉github你的域名</h2><p>在项目下建立一个CNAME文件，在其中写上给你的主页分配的域名地址。<br>这个操作的作用在哪里？</p><ol><li><p>当直接访问github.io主页的时候github知道redirect到哪里<br>也就是说，当你指定了CNAME之后，我们再次访问一个<code>github.io</code>的网站时，我们会发现，域名自动变成了我们制定的自定义域名。这是因为CNAME中指出了自定义域名是什么，所以，当我们访问<code>github.io</code>的时候，会触发<code>http 301</code>。</p><blockquote><p>azureuser@ubuntu-jpe:~$ curl -I winterttr.github.io<br>HTTP/1.1 301 Moved Permanently<br>Server: GitHub.com<br>Content-Type: text/html<br>Location: <a href="http://winterttr.me/" target="_blank" rel="noopener">http://winterttr.me/</a><br>X-GitHub-Request-Id: 2BF9481E:370C:8930CF:562B48F6<br>Content-Length: 178<br>Accept-Ranges: bytes<br>Date: Sat, 24 Oct 2015 09:02:36 GMT<br>Via: 1.1 varnish<br>Age: 54<br>Connection: keep-alive<br>X-Served-By: cache-nrt6130-NRT<br>X-Cache: HIT<br>X-Cache-Hits: 1<br>X-Timer: S1445677356.846925,VS0,VE0<br>Vary: Accept-Encoding</p></blockquote><p>我们可以看到，github的服务器知道，我们需要访问的io网站已经有了别的域名，并且返回301让浏览器跳转到自定义域名。</p></li><li><p>当用你的域名访问的时候github知道我去那个io里面找<br>当然，当我们直接使用自定义域名访问的时候，由于DNS服务器的配置，最终我们会访问github.io的主机，当主机收到我们的请求的时候，会拿我们http请求中的host和repository中的CNAME文件比较，从而知道，当前的域名应该访问那个具体的<code>xxx.github.io</code>的内容。</p></li></ol><hr><p>这基本上就是从一个从申请域名到到github.io配置后的完整故事</p>]]></content>
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Win7 无法启动dhcp client服务的解决方法！</title>
      <link href="/2018/02/08/Win7-%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8dhcp-client%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%81/"/>
      <url>/2018/02/08/Win7-%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8dhcp-client%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%81/</url>
      <content type="html"><![CDATA[<p><a href="http://www.w10zj.com/jc/Win7jc_4471.html" target="_blank" rel="noopener">http://www.w10zj.com/jc/Win7jc_4471.html</a><br><a href="http://www.gscholar.cn/2014/04/dhcp-client-error5.html" target="_blank" rel="noopener">http://www.gscholar.cn/2014/04/dhcp-client-error5.html</a></p>]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>source tree 配置 外部差异比对工具为beyond compare</title>
      <link href="/2018/02/08/source-tree-%E9%85%8D%E7%BD%AE-%E5%A4%96%E9%83%A8%E5%B7%AE%E5%BC%82%E6%AF%94%E5%AF%B9%E5%B7%A5%E5%85%B7%E4%B8%BAbeyond-compare/"/>
      <url>/2018/02/08/source-tree-%E9%85%8D%E7%BD%AE-%E5%A4%96%E9%83%A8%E5%B7%AE%E5%BC%82%E6%AF%94%E5%AF%B9%E5%B7%A5%E5%85%B7%E4%B8%BAbeyond-compare/</url>
      <content type="html"><![CDATA[<p>1、首先，安装好beyond compare后，创建一个快捷方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Applications/Beyond\ Compare.app/Contents/MacOS/bcomp /usr/local/bin/</span><br></pre></td></tr></table></figure></p><p>2、打开source tree，在系统偏好设置里面，找到diff，按照下面的进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Visual Diff Tool: Other</span><br><span class="line">Diff Command:/usr/local/bin/bcomp</span><br><span class="line">Parameters:-ro $LOCAL $REMOTE</span><br><span class="line">Merge Tool: Other</span><br><span class="line">Merge Command:/usr/local/bin/bcomp</span><br><span class="line">Parameters:$LOCAL $REMOTE $BASE $MERGED</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>windows下android studio在git push时失败的解决方法</title>
      <link href="/2018/02/08/windows%E4%B8%8Bandroid-studio%E5%9C%A8git-push%E6%97%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/08/windows%E4%B8%8Bandroid-studio%E5%9C%A8git-push%E6%97%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>网上查了很多资料,今天无意中看到一个git命令大全,找到了解决办法,只要在你的用户目录下的.ssh文件夹里创建pub公钥然后填到你的git服务器就可以了,git有个方便的工具不用自己敲命令,在git项目里打git citool命令,然后运行<br><img src="http://upload-images.jianshu.io/upload_images/545982-5fc34fd8c1765436.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20161220094526.png"><br>然后生成ssh就可以了</p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>gradle类重复的问题解决方法</title>
      <link href="/2018/02/08/gradle%E7%B1%BB%E9%87%8D%E5%A4%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/08/gradle%E7%B1%BB%E9%87%8D%E5%A4%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>今天遇到一个gradle的类重复问题,学习到一个命令 <strong>gradle -q dependencies</strong>,可以查看项目里包的依赖关系,发生这个错误是因为我用了一个相册的项目,这个项目里用到了v4包,我自己的项目也用到了v4包,</p><p>然后我把这个项目<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;cn.finalteam:galleryfinal:1.4.8.7&apos;</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile(&apos;cn.finalteam:galleryfinal:1.4.8.7&apos;) &#123;</span><br><span class="line">  exclude module: &apos;support-v4&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就解决了</p><p>如果是本地的项目,可以用下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile (project(&apos;:yourAndroidLibrary&apos;))&#123;</span><br><span class="line">  exclude module: &apos;support-v4&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>gradle中compile，provided，compile files，compile project有何区别？</title>
      <link href="/2018/02/08/gradle%E4%B8%ADcompile%EF%BC%8Cprovided%EF%BC%8Ccompile-files%EF%BC%8Ccompile-project%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
      <url>/2018/02/08/gradle%E4%B8%ADcompile%EF%BC%8Cprovided%EF%BC%8Ccompile-files%EF%BC%8Ccompile-project%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>在一个Android项目的build.gradle中，dependencies闭包中有以下四种形式的声明：<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:appcompat-v7:22.2.1&apos;</span><br><span class="line">provided &apos;com.squareup.dagger:dagger-compiler:1.2.1&apos;</span><br><span class="line">compile files(&apos;libs/picasso-2.4.0.jar&apos;)</span><br><span class="line">compile project(&apos;:androidPullToRefresh&apos;)</span><br></pre></td></tr></table></figure><p>1，3，4本质上是一样的，区别在于：</p><p>1 是从repository（默认是jCenter())里下载一个依赖包进行编译并打包<br>3 是从本地的libs目录下寻找picasso-2.4.0.jar这个文件进行编译并打包。类似的命令有<code>compile fileTree(dir: &#39;libs&#39;, include: &#39;*.jar&#39;)</code>——将libs目录下所有jar文件进行编译并打包。<br>4 是将另一个module（等同eclipse中的library)进行编译并打包<br>至于provided，是提供给那些只编译不打包场景的命令。就是，我在编译的时候对某一个jar文件有依赖，但是最终打包apk文件时，我不想把这个jar文件放进去，可以用这个命令。生成jar文件的时候,也不会打包provided的模块。</p><p>推荐一本书 《gradle for android》<br><a href="https://segmentfault.com/a/1190000004229002" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004229002</a></p>]]></content>
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>解决 release-stripped.ap_&#39; specified for property &#39;resourceFile&#39; does not exist.</title>
      <link href="/2018/02/08/%E8%A7%A3%E5%86%B3-release-stripped-ap-specified-for-property-resourceFile-does-not-exist/"/>
      <url>/2018/02/08/%E8%A7%A3%E5%86%B3-release-stripped-ap-specified-for-property-resourceFile-does-not-exist/</url>
      <content type="html"><![CDATA[<p>设置buildTypes里的release的shrinkResources为false即可,如果是 release-stripped.ap_’ specified for property ‘resourceFile’ does not exist.则设置buildTypes里的debug的shrinkResources为false</p>]]></content>
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>解决Gradle下载太慢的问题</title>
      <link href="/2018/02/08/%E8%A7%A3%E5%86%B3Gradle%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/08/%E8%A7%A3%E5%86%B3Gradle%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>因为GFW的原因,国内用android studio的时候,在gradle这步一定会卡住,所以需要以下步骤自己去下载gradle<br><a id="more"></a></p><p>###1.在gradle-wrapper.properties中查看gradle下载地址和版本</p><p>###2.去查看所有分发的gradle版本地址:<a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p><p>###3.下载完成后放到什么地方?<br>    1.windows在 C:\Users\yourname.gradle\wrapper\dists\gradle-版本\随机字符串\<br>    2.mac在 /Users/用户名/.gradle/wrapper/dists/gradle-版本/随机字符串/<br>    3.linux</p><p>###4.将gradle-版本.zip.part移除，把自己下载的gradle-gradle-版本.zip复制到这个目录。然后再次启动Andriod Studio，会自动读取gradle并解压</p><p>#完成</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Java中的强引用,软引用,弱引用,虚引用</title>
      <link href="/2018/02/08/Java%E4%B8%AD%E7%9A%84%E5%BC%BA%E5%BC%95%E7%94%A8-%E8%BD%AF%E5%BC%95%E7%94%A8-%E5%BC%B1%E5%BC%95%E7%94%A8-%E8%99%9A%E5%BC%95%E7%94%A8/"/>
      <url>/2018/02/08/Java%E4%B8%AD%E7%9A%84%E5%BC%BA%E5%BC%95%E7%94%A8-%E8%BD%AF%E5%BC%95%E7%94%A8-%E5%BC%B1%E5%BC%95%E7%94%A8-%E8%99%9A%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>####1.强引用<br>这个就不用说了,基本上写程序都是强引用,比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = new Object();</span><br></pre></td></tr></table></figure></p><p>####2. 软引用<br>软引用的特点是内存足够的时候,gc的时候不会回收它,只有内存不足的时候才会回收软引用的对象</p><p>####3.弱引用<br>在垃圾回收器扫描的时候,发现弱引用会把它放到ReferenceQueue中,等下次gc的时候会回收它<br><a id="more"></a></p><p>系统为我们提供了WeakHashMap，和HashMap类似，只是其key使用了weak reference。如果WeakHashMap的某个key被垃圾回收器回收，那么entity也会自动被remove。</p><p>由于WeakReference被GC回收的可能性较大，因此，在使用它之前，你需要通过weakObj.get()去判断目的对象引用是否已经被回收.</p><blockquote><p>Reference queque</p></blockquote><blockquote><p>一旦WeakReference.get()返回null，它指向的对象就会被垃圾回收，那么WeakReference对象就没有用了，意味着你应该进行一些清理。比如在WeakHashMap中要把回收过的key从Map中删除掉，避免无用的的weakReference不断增长。<br>ReferenceQueue可以让你很容易地跟踪dead references。WeakReference类的构造函数有一个ReferenceQueue参数，当指向的对象被垃圾回收时，会把WeakReference对象放到ReferenceQueue中。这样，遍历ReferenceQueue可以得到所有回收过的WeakReference。</p></blockquote><p>####4.虚引用<br>和soft，weak Reference区别较大，它的get()方法总是返回null。这意味着你只能用PhantomReference本身，而得不到它指向的对象。当WeakReference指向的对象变得弱可达(weakly reachable）时会立即被放到ReferenceQueue中，这在finalization、garbage collection之前发生。理论上，你可以在finalize()方法中使对象“复活”（使一个强引用指向它就行了，gc不会回收它）。但没法复活PhantomReference指向的对象。而PhantomReference是在garbage collection之后被放到ReferenceQueue中的，没法复活。<br>虚引用适合用来查看对象什么时候被回收,优化内存的时候使用</p><hr><p>以上是个人在网上学习的时候总结的东西,有错误的地方请指正</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Studio中的六种依赖</title>
      <link href="/2018/02/08/Android-Studio%E4%B8%AD%E7%9A%84%E5%85%AD%E7%A7%8D%E4%BE%9D%E8%B5%96/"/>
      <url>/2018/02/08/Android-Studio%E4%B8%AD%E7%9A%84%E5%85%AD%E7%A7%8D%E4%BE%9D%E8%B5%96/</url>
      <content type="html"><![CDATA[<p>####Compile<br>compile是对所有的build type以及favlors都会参与编译并且打包到最终的apk文件中。</p><p>####Provided<br>Provided是对所有的build type以及favlors只在编译时使用，类似eclipse中的external-libs,只参与编译，不打包到最终apk。</p><p>####APK<br>只会打包到apk文件中，而不参与编译，所以不能再代码中直接调用jar中的类或方法，否则在编译时会报错</p><p>####Test compile<br>Test compile 仅仅是针对单元测试代码的编译编译以及最终打包测试apk时有效，而对正常的debug或者release apk包不起作用。</p><p>####Debug compile<br>Debug compile 仅仅针对debug模式的编译和最终的debug apk打包。</p><p>####Release compile<br>Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。</p>]]></content>
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在library中使用productFlavors</title>
      <link href="/2018/02/08/%E5%A6%82%E4%BD%95%E5%9C%A8library%E4%B8%AD%E4%BD%BF%E7%94%A8productFlavors/"/>
      <url>/2018/02/08/%E5%A6%82%E4%BD%95%E5%9C%A8library%E4%B8%AD%E4%BD%BF%E7%94%A8productFlavors/</url>
      <content type="html"><![CDATA[<p>源地址:<a href="http://blog.csdn.net/yulyu/article/details/70257015?utm_medium=referral&amp;utm_source=itdadao" target="_blank" rel="noopener">http://blog.csdn.net/yulyu/article/details/70257015?utm_medium=referral&amp;utm_source=itdadao</a><br><a id="more"></a></p><p>###前言：<br>前面笔者介绍过，如果用一套代码，定制化多个app。那就是使用productFlavors。<br>一般情况下都没有问题，但是在library的gradle里面，直接使用productFlavors是不允许的。所以下面我们就来介绍一下如何在library中使用productFlavors。</p><p>###1.基础<br>前面介绍过如何使用productFlavors，不了解的朋友需要先看看这篇文章<br><a href="http://blog.csdn.net/yulyu/article/details/59111697" target="_blank" rel="noopener">活用productFlavors,批量定制化</a><br><a href="http://blog.csdn.net/yulyu/article/details/59111697" target="_blank" rel="noopener">http://blog.csdn.net/yulyu/article/details/59111697</a></p><p>###2.场景介绍<br>首先我们引用了一个picmodule，然后picmodule里面有一个正常的产品，两个定制化的产品</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-e0a9a4ea96a62da6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>main是普通产品，red和blue是定制化产品（这里只是里面使用的图片不一样）</p><p>###3.解决方法<br>于是我们就在picmodule的gradle配置productFlavors，但是picmodule是属于一个library，所以这样做是不允许的，项目将找不到引入的picmodule</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-65c9816351c171d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>那么如何解决呢？<br>首先我们需要在picmodule的gradle里面加入一句话（记住不要漏了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publishNonDefault true</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/545982-3762056f0f5faf2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>接着我们在application下的build.gradle里面加入一些配置<br>在<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">Android</a>模块内加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">productFlavors&#123;</span><br><span class="line">    common&#123;&#125;</span><br><span class="line"></span><br><span class="line">    red&#123;&#125;</span><br><span class="line"></span><br><span class="line">    blue&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在gradle最外层加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    commonCompile</span><br><span class="line">    redCompile</span><br><span class="line">    blueCompile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/545982-9a7cae994136745b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>接着修改一下引入picmodule的方法<br>平时引入module是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile project(&apos;:picmodule&apos;)</span><br></pre></td></tr></table></figure></p><p>我们改成下面这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commonCompile project(path: &apos;:picmodule&apos;, configuration: &apos;commonRelease&apos;)</span><br><span class="line">redCompile project(path: &apos;:picmodule&apos;, configuration: &apos;redRelease&apos;)</span><br><span class="line">blueCompile project(path: &apos;:picmodule&apos;, configuration: &apos;blueRelease&apos;)</span><br></pre></td></tr></table></figure></p><p>这里library我是用的Release包，如果要用debug版的library也可以改成下面这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commonCompile project(path: &apos;:picmodule&apos;, configuration: &apos;commonDebug&apos;)</span><br><span class="line">redCompile project(path: &apos;:picmodule&apos;, configuration: &apos;redDebug&apos;)</span><br><span class="line">blueCompile project(path: &apos;:picmodule&apos;, configuration: &apos;blueDebug&apos;)</span><br></pre></td></tr></table></figure></p><p><strong>然后同步一下就可以了</strong><br><strong>这个时候如果找不到R文件，那么clean一下或者重启一下as都可以</strong></p>]]></content>
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Class.isAssignableFrom与 instanceof 区别</title>
      <link href="/2018/02/08/Class-isAssignableFrom%E4%B8%8E-instanceof-%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/02/08/Class-isAssignableFrom%E4%B8%8E-instanceof-%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>isAssignableFrom 是用来判断一个类Class1和另一个类Class2是否相同或是另一个类的超类或接口。<br><a id="more"></a><br>  通常调用格式是<br>        Class1.isAssignableFrom (Class2)<br>  调用者和参数都是   java.lang.Class   类型。   </p><p>  而   instanceof   是用来判断一个对象实例是否是一个类或接口的或其子类子接口的实例。<br>    格式是：   o   instanceof   TypeName<br>    第一个参数是对象实例名，第二个参数是具体的类名或接口名<br>具体例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class TestCase &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        TestCase test = new TestCase();  </span><br><span class="line">        test.testIsAssignedFrom1();  </span><br><span class="line">        test.testIsAssignedFrom2();  </span><br><span class="line">        test.testIsAssignedFrom3();  </span><br><span class="line">        test.testInstanceOf1();  </span><br><span class="line">        test.testInstanceOf2();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void testIsAssignedFrom1() &#123;  </span><br><span class="line">        System.out.println(String.class.isAssignableFrom(Object.class));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void testIsAssignedFrom2() &#123;  </span><br><span class="line">        System.out.println(Object.class.isAssignableFrom(Object.class));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void testIsAssignedFrom3() &#123;  </span><br><span class="line">        System.out.println(Object.class.isAssignableFrom(String.class));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void testInstanceOf1() &#123;  </span><br><span class="line">        String s = &quot;&quot;;  </span><br><span class="line">        System.out.println(s instanceof Object);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void testInstanceOf2() &#123;  </span><br><span class="line">        Object o = new Object();  </span><br><span class="line">        System.out.println(o instanceof Object);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">false  </span><br><span class="line">true  </span><br><span class="line">true  </span><br><span class="line">true  </span><br><span class="line">true</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>一些常用类的记录</title>
      <link href="/2018/02/08/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E8%AE%B0%E5%BD%95-1/"/>
      <url>/2018/02/08/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E8%AE%B0%E5%BD%95-1/</url>
      <content type="html"><![CDATA[<p>CountDownLatch:这个类适合一个任务需要另一个任务完成后才能继续的场景<br>CyclicBarrier:与CountDownLatch类似<br><a id="more"></a></p><blockquote><p>CountDownLatch和CyclicBarrier的区别<br>(01) CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待。<br>(02) CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。</p></blockquote>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 操作系统下如何优雅的卸载软件</title>
      <link href="/2018/02/08/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/"/>
      <url>/2018/02/08/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>输入如下命令：</p><p>sudo apt-get autoremove –purge 要卸载的软件名字</p><p>我们来讲解一下这个命令</p><p>sudo ———— 获取 root 权限</p><p>apt-get ——— 执行安装卸载功能的软件</p><p>autoremove — 告诉 apt-get 我们所要做的操作是移除软件</p><p>–purge ——— 注意这前面是两个短划线，这个参数是告诉他们要完整的干净的彻底的移除</p><p>此方法 Ubuntu系、Debian系 系统可用</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux命令备忘录</title>
      <link href="/2018/02/08/linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2018/02/08/linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>####1.netstat常用命令<br>-a：查看所有端口的占用<br>-t：只列出 TCP 或 UDP 协议的连接<br>-u：列出 UDP 协议的连接<br>-n：禁用反向域名解析，加快查询速度<br>-l：只列出监听中的连接<br>-p：获取进程名、进程号以及用户 ID<br>-ep：可以同时查看进程名和用户名</p><p>####2.kill -9 pid<br>杀死pid这个进程</p><p>####3.刷新dns<br>sudo /etc/init.d/networking restart </p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Joda-Time 简介</title>
      <link href="/2018/02/08/Joda-Time-%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/02/08/Joda-Time-%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>转载ibm:<a href="https://www.ibm.com/developerworks/cn/java/j-jodatime.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-jodatime.html</a></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux常用软件安装</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>####1.mongodb的conf文件<br>port=27017 #【代表端口号，如果不指定则默认为   27017   】<br>dbpath= /home/username/Soft/mongoDBFiles  #【数据库路径】<br>logpath= /home/username/Soft/mongoDBFiles/mongodb.log  #【日志路径】<br>logappend=true  #【日志文件自动累加，而不是覆盖】<br>推荐用配置文件启动mongodb服务，配置文件启动方式:mongod -f [conf文件]</p><p>####2.nodejs<br>官网下载nodejs压缩包后解压，然后用ln -s命令软链接node和npm命令到/usr/local/bin或者/usr/bin目录下</p><p>####3.md文件转html<br>要将markdown文件转换成html文件，可以用discount或python-markdown软件包提供的markdown工具。<br>$ sudo apt-get install discount</p><p>用discount提供的markdown工具转换：<br>$ markdown -o Release-Notes.html Release-Notes.md</p><p>python-markdown用过之后发现生成的html点击链接无法定位描点，但是discount可以，所以不提供python-markdown的使用方式</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux常用命令-压缩解压命令</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>gzip [文件]<br>　　压缩后文件格式 .gz,这个命令只能压缩文件,不能压缩目录.并且这个命令压缩后不保留源文件<br><a id="more"></a><br>gunzip [文件] 或者 gzip -d [文件]<br>　　解压缩.gz的压缩文件<br>tar [-zcvf] [压缩后文件名] [目录]<br>　　打包目录<br>　　压缩后文件格式 .tar.gz<br>　　-c 打包<br>　　-x 解压缩<br>　　-v 显示详细信息<br>　　-f 指定文件名<br>　　-z 打包同时压缩<br>tar [-zxvf] [解压缩文件名] [目录]</p><p>zip [压缩后文件名] [文件]:压缩文件,这个命令没有gzip压缩比例高<br>　　[-r] [压缩后文件名] [目录]:压缩目录<br>　　压缩后文件格式 .zip<br>　　注意:如果压缩目录的时候没有加-r,那么压缩后的文件只有根目录文件名,而没有子目录和里面的内容</p><p>bzip2 [-k] [压缩文件] 压缩比例最高<br>　　-k 压缩后保留源文件<br>　　配合tar使用示例: tar -cjf testfile.tar.bz2 testfile,把z换成了f, 请留意,在 f 之后要立即接文件或者目录名,不要再加参数,否则会出错,例如tar -cfj testfile.tar.bz2 testfile是错误的<br>bunzip2 [-k] [压缩文件]<br>　　-k 压缩后保留源文件<br>　　配合tar使用示例:tar -xjf testfile.tar.bz2, 把z换成了f,请留意,在 f 之后要立即接文件或者目录名,不要再加参数,否则会出错,例如tar -cfj testfile.tar.bz2 testfile是错误的</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux常用命令-帮助命令man,whatis,apropos,info,help</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4man-whatis-apropos-info-help/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4man-whatis-apropos-info-help/</url>
      <content type="html"><![CDATA[<p>man 命令</p><a id="more"></a><p>　　man 配置文件,注意这里只需要写文件名称就可以了,不能写文件的绝对路径</p><p>　　man既可以查看命令的帮助信息也可以查看配置文件的帮助信息,如果内容太多,可以输入”/内容”查找,按n继续查找下一页</p><p>　　man passwd这个命令,有2个帮助文档,分别是passwd命令的帮助文档和passwd配置文件的帮助文档,在whereis命令里学习到,1代表命令的帮助,5代表文档的帮助,</p><p>　　　　所以如果要看配置文件的帮助文档,需要输入man 5 passwd</p><p>whatis 命令</p><p>　　可以查看某命令的简短的帮助信息</p><p>apropos 配置文件,注意这里也是只需要写文件名称就可以了,不能写文件的绝对路径</p><p>　　可以查看某配置文件的简短的帮助信息</p><p>命令 –help</p><p>　　列出该命令的常见选项</p><p>info 命令或者配置文件</p><p>　　类似man,可以显示当前查看文件的进度</p><p>help</p><p>　　可以查看shell内置命令的帮助,shell内置命令用which或者whereis是找不到命令所在路径的</p><p>　　例:help cd</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux常用命令-文件搜索命令-locate,which,whereis,grep</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4-locate-which-whereis-grep/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4-locate-which-whereis-grep/</url>
      <content type="html"><![CDATA[<p>locate 目录或文件名<br><a id="more"></a><br>　　-i 查找的时候不区分大小写<br>这个类似everything,速度比find快很多,因为这个命令搜索的是它维护的文件资料库,文件资料库是var/lib/mlocate/mlocate.db,如果文件没有包含在它的文件资料库,那么是找不到这个文件的,这个时候需要用updatedb命令来更新文件资料库,但是,/tmp这个目录,是不会被文件资料库收录的,即使执行了updatedb也找不到tmp下面的文件</p><p>which 搜索命令所在目录及别名<br>　　例:which ls<br>whereis 搜索命令所在目录及帮助文档路径<br>　　例:whereis ls<br>　　注意,这个命令查到的帮助文档的路径中,1代表命令的帮助,5代表文档的帮助,例如whereis passwd中就有man1和man5这两种帮助文档<br>grep 在文件内容中搜寻子串匹配的行为并输出<br>　　-i 不区分大小写<br>　　-v 排除指定字串<br>　　例:grep mysql /root/install.log<br>　　　 grep -v ^# /etc/inittab　　把#开头的行排除</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux常用命令-文件搜索命令-find</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4-find/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4-find/</url>
      <content type="html"><![CDATA[<p>find [目录] [选项] 文件名或者正则表达式</p><a id="more"></a><p>　　-name 根据文件名搜索</p><p>　　-iname 搜索文件名的时候忽略大小写</p><p>　　　　例:find /etc -name init</p><p>　　    　　find /etc -iname init*</p><p>　　-size +n:大于n数据块 -n:小于n数据块 n:等于n数据块</p><p>　　　　　　1个数据块等于512字节,也就是0.5k,换算的时候,需要当前kb乘以2就是n的大小</p><p>　　　　例: find / -size +204800 搜索大于100M的文件,100M=102400kb=204800数据块</p><p>　　-user 查找所有者为user的文件</p><p>　　　　例:find /home -user superman</p><p>　　-group 查找所有者为group组的文件</p><p>　　　　例:find /home -group work</p><p>　　-amin 根据访问时间查找</p><p>　　-cmin 根据文件属性查找<br>　　　　例:find /etc -cmin -5 在etc下查找5分钟内被修改过属性的文件和目录</p><p>　　　　　　-n:n分钟之内　　+n:超过n分钟</p><p>　　-mmin 根据文件内容查找</p><p>　　-a 两个条件同时满足</p><p>　　-o 两个条件满足一个即可</p><p>　　-type f 文件</p><p>　　　　　d 目录</p><p>　　　　　l 软链接文件</p><p>　　-inum 根据i节点查找</p><p>　　-exec或者/ok 命令 {} \; 对搜索结果执行某命令,区别是exec不会询问,而ok会每个都询问,用y或者n确认.</p><p>　　　　　　　　　　　{} \;是固定的格式</p><p>　　　　例:find /etc -name inittab -exec ls -l {} \;</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux常用命令-用户管理命令</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>useradd 用户名<br>passwd 用户名:修改该用户的密码<br>groupadd 组名<br><a id="more"></a><br>who:<br><img src="http://upload-images.jianshu.io/upload_images/545982-e39eaacca1825e18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>　　who用来查看现在登录了几个用户,得到的信息含义如下</p><p>　　登录用户名　　登录终端类型　　登录时间　　登录终端的IP地址(如果没有写就是本机登录)</p><table><thead><tr><th style="text-align:center">登录终端类型</th><th style="text-align:center">登录终端含义</th></tr></thead><tbody><tr><td style="text-align:center">tty</td><td style="text-align:center">本地终端</td></tr><tr><td style="text-align:center">pts</td><td style="text-align:center">远程终端,后面的 /数字 代表不同的远程终端号</td></tr></tbody></table><p>w:查看更详细的已登录用户信息</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-98f12894c88b6db2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>　　信息含义如下:</p><p>　　当前时间　　系统已运行时间(uptime命令可以得到相同信息)　　当前有几个用户登录　　负载信息,分别是过去1,5,15分钟的负载情况</p><p>　　IDLE 空闲运行时间<br>　　PCPU   当前用户登录以后当前执行的操作占用CPU的时间<br>　　WHAT 当前执行了什么操作<br>　　JCPU   当前用户登录以后累计执行的所有操作占用CPU的时间</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>linux常用命令-权限管理命令</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-1/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-1/</url>
      <content type="html"><![CDATA[<p>chmod  [{ugoa}{+-=}{rwx}] [文件或目录]<br><a id="more"></a></p><p>　　　　[mode=421] [文件或目录]</p><p>　　　　-R 递归修改</p><p>　　　　例:chmod g+w,o-r 文件或目录</p><p>　　　　但是一般用数字配置权限,例:chmod 766 文件或目录</p><p>chown 用户 文件或目录:改变文件或目录的所有者,只有root才可以用该命令</p><p>chgrp  用户 文件或目录:改变文件活目录的所属组,只有root才可以用该命令</p><p>umask [-S] 查看当前创建目录或文件的默认权限,注意,文件默认是没有x权限的</p><p>　　如果不加S,则出现的是掩码,第一个0是特殊权限,后面的3个数字,用777减去,得到的才是实际的默认权限</p><p>　　如果加S,则出现的是每个组对应的权限</p><p>　　umask配置权限,后面跟的是掩码,需要用777减去实际的默认权限,然后设置</p><p>　　例,想要默认权限是rwxr-xr-x,对应的数字是755,777-755是022,所以配置默认新目录或文件的权限命令就是umask 022</p><p>rwx的含义　　文件:r 可以查看</p><p>　　　　　　　　　w 可以修改内容</p><p>　　　　　　　　　x 可以执行</p><p>　　　　　　　目录:r 可以列出目录下的内容</p><p>　　　　　　　　　w 可以在该目录下添加删除文件</p><p>　　　　　　　　　x 可以进入该目录</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux常用命令-文件处理命令</title>
      <link href="/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/02/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>ls -a -l -d -h -i<br><a id="more"></a></p><p>mkdir [-p] 创建目录,-p递归创建目录</p><p>rmdir 删除一个空目录</p><p>cp [-r,-p] -r,拷贝目录,-p,保持属性,新文件的修改时间为源文件的修改时间,而不是拷贝时的时间</p><p>　　拷贝的时候可以修改文件(目录)名称,如果目标文件(目录)名称不存在,则拷贝到目标文件(目录)然后修改目标文件(目录)名称</p><p>mv 剪切文件或者给文件改名</p><p>rm [-r,-f] -r,删除目录,-f,强制删除</p><p>cat [-n] -n,显示行号</p><p>tac 类似cat,倒着显示数据,不过没有-n参数</p><p>more [-f或空格,回车,q或者Q] 如果数据较多,用这个命令可以翻页</p><p>　　-f或空格,翻页</p><p>　　回车,显示下一行</p><p>　　q或者Q,退出</p><p>less 这个比more功能强大,可以向上翻页,用page up翻页或者上箭头翻一行,还可以输入/来查找内容,然后按n键来继续查找下面的该内容</p><p>head [-n 数字] 可以查看某文件的指定前n行(包括n)内容,如果不指定数字,那么默认为10行,例 head -n 7 /etc/services</p><p>tail [-n 数字,-f] 可以查看某文件的指定末尾n行(包括n)内容,如果不指定数字,那么默认为10行,例 tail -n 7 /etc/services</p><p>　　-f,可以实时查看该文件的末尾的改动</p><p>ln [-s] 不带s默认创建的硬链接,带s创建的软连接,软链接类似windows的快捷方式</p><p>　　硬链接特征:</p><p>　　　　1.拷贝cp -p 加同步更新</p><p>　　　　2.通过i节点识别</p><p>　　　　3.不能跨分区</p><p>　　　　4.不能针对目录使用</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ubuntu安装android开发环境</title>
      <link href="/2018/02/08/ubuntu%E5%AE%89%E8%A3%85android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/02/08/ubuntu%E5%AE%89%E8%A3%85android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1.安装oracle-jdk</strong><br>打开终端，使用下面的命令：<br>java -version<br>如果你看到像下面的输出，这就意味着你并没有安装过Java:<br><a id="more"></a></p><p>The program ‘java’ can be found in the following packages:<br>* default-jre<br>* gcj-4.6-jre-headless<br>* openjdk-6-jre-headless<br>* gcj-4.5-jre-headless<br>* openjdk-7-jre-headless<br>Try: sudo apt-get install</p><p>使用下面的命令安装，只需一些时间，它就会下载许多的文件，所及你要确保你的网络环境良好：<br>sudo add-apt-repository ppa:webupd8team/java<br>sudo apt-get update<br>sudo apt-get install oracle-java8-installer<br>sudo apt-get install oracle-java8-set-default</p><p><strong>2.安装genymotion</strong><br>安装genymotion需要先安装virtualbox，命令如下：<br>sudo apt-get install virtualbox<br>然后下载genymotion，chmod +x geny…..bin 增加权限后执行，会解压缩，然后双击即可打开</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux各目录的作用</title>
      <link href="/2018/02/08/linux%E5%90%84%E7%9B%AE%E5%BD%95%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2018/02/08/linux%E5%90%84%E7%9B%AE%E5%BD%95%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/545982-d1ff3fba9cdb1fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/545982-b7b1f72481badc0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/545982-5f4b06beb1fcebd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ubuntu安装python一些安装包</title>
      <link href="/2018/02/08/ubuntu%E5%AE%89%E8%A3%85python%E4%B8%80%E4%BA%9B%E5%AE%89%E8%A3%85%E5%8C%85/"/>
      <url>/2018/02/08/ubuntu%E5%AE%89%E8%A3%85python%E4%B8%80%E4%BA%9B%E5%AE%89%E8%A3%85%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>sudo apt-get install python-pip<br>sudo pip install distribute<br>sudo pip install nose<br>sudo pip install virtualenv<br>sudo pip install lpthw.web<br>windows下面去掉sudo即可<br><a id="more"></a></p><p><strong>windows安装pip</strong><br>　　pip 是一个安装和管理 Python 包的工具 , 是 easy_install 的一个替换品，使用 pip 使安装、更新和卸载 python 包变得简单。<br>　　第一步：<a href="https://pypi.python.org/pypi/pip" target="_blank" rel="noopener">https://pypi.python.org/pypi/pip</a>下载，运行python setup.py install即完成安装<br>　　第二步：设windows环境变量，将C:\Python27\Scripts添加至path，重启cmd窗口<br>　　第三步：pip使用，如最基本的pip install MODELNAME</p><p><strong>windows安装pyQt4</strong><br><a href="http://www.riverbankcomputing.com/software/pyqt/download" target="_blank" rel="noopener">http://www.riverbankcomputing.com/software/pyqt/download</a></p><p><strong>Qt开发IDE</strong><br><a href="https://www.qt.io/zh-hans/download-open-source/" target="_blank" rel="noopener">https://www.qt.io/zh-hans/download-open-source/</a></p><p><strong>windows安装wxPython界面开发工具</strong><br><a href="http://boa-constructor.sourceforge.net/Download.html" target="_blank" rel="noopener">http://boa-constructor.sourceforge.net/Download.html</a></p><p><strong>windows安装Qt设计师</strong><br>安装完pyQt自动安装了好像</p><p><strong>把python文件做成exe文件</strong><br>　　安装py2exe:在这里下载安装程序安装:<a href="http://sourceforge.net/projects/py2exe/files/py2exe/0.6.9/" target="_blank" rel="noopener">http://sourceforge.net/projects/py2exe/files/py2exe/0.6.9/</a><br>　　或者cx-freeze:<br>　　<a href="http://sourceforge.net/projects/cx-freeze/files/4.3.2/" target="_blank" rel="noopener">http://sourceforge.net/projects/cx-freeze/files/4.3.2/</a><br><strong>poster包可以上传文件到服务器</strong><br>　　pip install poster</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修复 VirtualBox 下 Ubuntu 14.10 屏幕分辨率问题</title>
      <link href="/2018/02/08/%E4%BF%AE%E5%A4%8D-VirtualBox-%E4%B8%8B-Ubuntu-14-10-%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/08/%E4%BF%AE%E5%A4%8D-VirtualBox-%E4%B8%8B-Ubuntu-14-10-%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在 Windows 7 下使用 VirtualBox 安装了一个 Ubuntu 14.10 后，碰到了一个 640×480 屏幕分辨率的问题。 在 ‘Display Settings’ 设置界面的 ‘Detect Displays’ 按钮无法点击到，因为 640x480 的分辨率的确太小了。<br><a id="more"></a></p><p><strong>解决办法</strong><br>你需要安装一个 VirtualBox 的额外组件到你的 Ubuntu-Guest 中，可运行如下命令：<br>安装完毕需要重启虚拟机就可以。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>AndroidStudio 多个module统一gradle文件配置</title>
      <link href="/2018/02/08/AndroidStudio-%E5%A4%9A%E4%B8%AAmodule%E7%BB%9F%E4%B8%80gradle%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/02/08/AndroidStudio-%E5%A4%9A%E4%B8%AAmodule%E7%BB%9F%E4%B8%80gradle%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>看到AS中External Libraries有好几个同名但是版本不一样的lib的时候，真的逼死强迫症患者。 这些多个重复的lib出现的原因就是多个module各自compile了同名但是不同版本的lib（即依赖没有统一），所以统一性的确认这些依赖就好了。<br><a id="more"></a><br><strong>Step1:</strong><br>在根目录新建一个config.gradle文件，里面键入要统一的依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  android = [</span><br><span class="line">          compileSdkVersion: 23,</span><br><span class="line">          buildToolsVersion: &quot;23.0.3&quot;,</span><br><span class="line">          minSdkVersion    : 15,</span><br><span class="line">          targetSdkVersion : 22,</span><br><span class="line">          versionCode      : 1,</span><br><span class="line">          versionName      : &quot;1.0&quot;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  dependencies = [</span><br><span class="line">          &quot;gson&quot;               : &quot;com.google.code.gson:gson:2.6.2&quot;,</span><br><span class="line">          &quot;eventbus&quot;           : &apos;org.greenrobot:eventbus:3.0.0&apos;,</span><br><span class="line">          &quot;butterknife&quot;        : &apos;com.jakewharton:butterknife:7.0.1&apos;,</span><br><span class="line">          &quot;support-design&quot;     : &apos;com.android.support:design:24.1.1&apos;,</span><br><span class="line">          &quot;support-appcompatV7&quot;: &apos;com.android.support:appcompat-v7:24.1.1&apos;,</span><br><span class="line">          &quot;support-percent&quot;    : &apos;com.android.support:percent:24.1.1&apos;,</span><br><span class="line">          &quot;support-multidex&quot;   : &apos;com.android.support:multidex:1.0.1&apos;,</span><br><span class="line">          &quot;glide&quot;              : &apos;com.github.bumptech.glide:glide:3.7.0&apos;,</span><br><span class="line">          &quot;support-v4&quot;         : &apos;com.android.support:support-v4:24.1.1&apos;,</span><br><span class="line">          &quot;okhttp3&quot;            : &apos;com.squareup.okhttp3:okhttp:3.3.1&apos;,</span><br><span class="line">          &quot;nineoldandroids&quot;    : &apos;com.nineoldandroids:library:2.4.0&apos;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Step2:</strong><br>在根目录的build.gradle文件里面头部增加一句引用 apply from: “config.gradle”</p><p><strong>Step3:</strong><br>在module里面开始应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compileSdkVersion rootProject.ext.android.compileSdkVersion //android&#123;&#125;节点</span><br><span class="line">compile rootProject.ext.dependencies[&quot;support-appcompatV7&quot;] //dependencies&#123;&#125;节点</span><br></pre></td></tr></table></figure></p><p><strong>The end</strong><br>clean一下去External Libraries看看，是不是还有重复的，如果还有，说明前面config里面的依赖其他地方还有遗漏的，全局搜索一下在同样方式替换一下就好了。</p><p>转载:<a href="https://jackl-e-e.github.io/android/2016/08/26/多module统一gradle配置.html" target="_blank" rel="noopener">https://jackl-e-e.github.io/android/2016/08/26/多module统一gradle配置.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Android Studio 2.2 问题汇总</title>
      <link href="/2018/02/08/Android-Studio-2-2-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2018/02/08/Android-Studio-2-2-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<ol><li>Gradle 2.2 使用<br>出现下面的警告，编译的时候出现更多。。。<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning:The `android.dexOptions.incremental` property is deprecated and it has no effect on the build process.</span><br></pre></td></tr></table></figure></li></ol><p><strong>解决：</strong> 项目build.gradle 中删除下面配置 ，新的貌似不需要dex配置了！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//655xxx的方法限制分包处理 </span><br><span class="line">dexOptions &#123; </span><br><span class="line">  javaMaxHeapSize &quot;4g&quot; </span><br><span class="line">  //加快编译速度 </span><br><span class="line">  incremental true </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>java8 与 jack工具链问题<br>出现下面错误<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:Could not get unknown property &apos;classpath&apos; for task&apos;:app:transformJackWithJackForInstantrunconfigDebug&apos; of type com.android.build.gradle.internal.pipeline</span><br></pre></td></tr></table></figure></li></ol><p><strong>解决：</strong> 项目build.gradle 中删除下面配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.apply plugin: &apos;android-apt&apos;</span><br><span class="line">2.把apt替换成annotationProcessor</span><br><span class="line">3.删除根目录的classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</span><br><span class="line">4.这个不用Java8也可以这么写的，现在AS自带了注解插件</span><br></pre></td></tr></table></figure></p><ol start="3"><li>intant Run 与 shrinkResources 问题<br>当你进行运行时，出现下面错误：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app/build/intermediates/res/resources-debug-stripped.ap_&apos; specified for property &apos;resourceFile&apos; does not exist.</span><br></pre></td></tr></table></figure></li></ol><p><strong>解决：</strong><br>项目build.gradle 中的 buildTypes 中的 shrinkResoutces设置为false<br>具体可以看下：<a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">https://developer.android.com/studio/build/shrink-code.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">       debug &#123;</span><br><span class="line">           buildConfigField &quot;boolean&quot;, &quot;LOG_DEBUG&quot;, &quot;true&quot;</span><br><span class="line">           debuggable true</span><br><span class="line">           zipAlignEnabled true</span><br><span class="line">           minifyEnabled false</span><br><span class="line">           shrinkResources false //android studio 2.2 设置为false </span><br><span class="line">           signingConfig signingConfigs.config</span><br><span class="line">           proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">       &#125;</span><br><span class="line">       release &#123;</span><br><span class="line">           buildConfigField &quot;boolean&quot;, &quot;LOG_DEBUG&quot;, &quot;false&quot;</span><br><span class="line">           debuggable false</span><br><span class="line">           zipAlignEnabled true</span><br><span class="line">           minifyEnabled false</span><br><span class="line">           shrinkResources false //android 2.2 设置为false</span><br><span class="line">           signingConfig signingConfigs.config</span><br><span class="line">           proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li>Instant Run 与 C++ Debugger<br>出现下面三个问题：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Instant Run requires that the platform corresponding to your target device </span><br><span class="line">Instant Run requires that the platform corresponding to your target device (Android 5.0 (Lollipop)) is installed. </span><br><span class="line">C++ debugger package is missing or incompatible - do you want to fix it</span><br></pre></td></tr></table></figure></li></ol><p><strong>一样的解决方案：</strong><br>打开SDK管理，下载 5.0.1 , 5.1.1 的 SDK Platform 即可 ！可以试试，我只下载 5.1.1不行，下载了5.0.1才可以！</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-f1428a18553044e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.Android Studio Gradle Plugin 版本<br>Gradle Plugin 插件地址：配置已有的版本即可<br><a href="https://jcenter.bintray.com/com/android/tools/build/gradle/" target="_blank" rel="noopener">https://jcenter.bintray.com/com/android/tools/build/gradle/</a><br><strong>举个例子：</strong><br>目前最新版是 2.2 ，如果你在跟目录下的build.gradle配置 3.0 就会出现下面错误<br>下面配置会出错，截止今日最新版为2.2！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:3.0&apos;</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>报错如下！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Error:Could not find com.android.tools.build:gradle:3.0.</span><br><span class="line">Searched in the following locations:</span><br><span class="line">    file:/C:/Program Files/Android/Android Studio/gradle/m2repository/com/android/tools/build/gradle/3.0/gradle-3.0.pom</span><br><span class="line">    file:/C:/Program Files/Android/Android Studio/gradle/m2repository/com/android/tools/build/gradle/3.0/gradle-3.0.jar</span><br><span class="line">    https://jcenter.bintray.com/com/android/tools/build/gradle/3.0/gradle-3.0.pom</span><br><span class="line">    https://jcenter.bintray.com/com/android/tools/build/gradle/3.0/gradle-3.0.jar</span><br><span class="line">    http://maven.bughd.com/public/com/android/tools/build/gradle/3.0/gradle-3.0.pom</span><br><span class="line">    http://maven.bughd.com/public/com/android/tools/build/gradle/3.0/gradle-3.0.jar</span><br></pre></td></tr></table></figure></p><p>============ 上面是Android Studio Gradle Plugin 版本 ==================</p><p>============ 下面是Android Studio Gradle 编译进行编译的版本 ==================<br>在gradle-wrapper.properties 中进行配置 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Mon Sep 19 15:29:17 CST 2016</span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-all.zip</span><br></pre></td></tr></table></figure></p><p>Gradle 下载地址 ： 使用3.0编译，速度更快！ <a href="http://services.gradle.org/distributions" target="_blank" rel="noopener">http://services.gradle.org/distributions</a></p>]]></content>
      
      <categories>
          
          <category> android studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kotlin中的lambda表达式知识整理</title>
      <link href="/2018/02/08/kotlin%E4%B8%AD%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
      <url>/2018/02/08/kotlin%E4%B8%AD%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>#####如何定义lambda表达式(将表达式赋值给一个常量或变量):<br><a id="more"></a></p><ul><li>######如果有小括号</li></ul><ol><li>如果需要参数(没有参数可以写()),就在小括号里写明参数类型,参数名可以省略,然后小括号后面加上-&gt;{},</li><li>-&gt;后面如果没有返回值就写Unit,</li><li><p>然后在大括号{}里面写上具体的方法实现</p><pre><code>1. 在大括号{}的方法实现里,如果只有一个参数,可以用it指定而不需要再写x-&gt;...这种代码,例如val add1: (Int) -&gt; Int = { it + 1 }2. 如果方法实现里有多个参数,则需要x:Int,y:Int-&gt;...这种方式指明-&gt;后面的自定义参数名,例如val add: (Int,Int) -&gt; Int = { x:Int,y:Int-&gt;x+y }x,y的参数类型可以不写,因为在前面的小括号()里面定义了,所以可以写成x,y-&gt;...这种方式,改进后val add: (Int,Int) -&gt; Int = { x,y-&gt;x+y }这里有个参数顺序问题,lambda表达式的参数顺序,是按照大括号{}方法体里面的参数顺序传参的,而不是按照定义函数时小括号()里的顺序传参的,如下面的代码val f:(x:Int, y:Int) -&gt; Int = {y: Int, x: Int -&gt; x - y}如果调用f(2,1),则参数会按照大括号里的顺序传参,所以上面的y==2,x==1.而不是按照小括号里的(x:Int, y:Int)的顺序传参的</code></pre></li></ol><ul><li>######如果没有小括号,可以直接写大括号里的方法体</li></ul><ol><li>写方法体的时候,因为前面没有在小括号()里定义参数类型,就需要在方法体里指明参数类型,例如下面需要指明x的参数类型 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val add1 = &#123; x:Int-&gt;x + 1 &#125;</span><br></pre></td></tr></table></figure></li></ol><p>#####如何定义lambda表达式(直接给方法传参,读者可以联想view.setOnClickListener(new OnClickListener…)):</p><ol><li>作为参数传递给高阶函数的时候,只需要写大括号{}方法体</li></ol><blockquote><p>因为是作为参数传递给高阶函数,而在高阶函数里已经定义了方法类型和返回值,所以大括号{}方法体里的参数类型可以省略</p><ol start="2"><li>这时候不可以再写小括号()去定义函数了,只需要写大括号{}里的方法实现,因为在高阶函数里已经定义好了函数的参数类型和返回值,<br>这就好像android用java代码给View设置OnClickListener点击监听,这时候只需要给View传递一个匿名类即可,例如<figure class="highlight plain"><figcaption><span>OnClickListener(View view)&#123;...&#125;);```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">而不再需要</span><br><span class="line">```view.setOnClickListener(OnClickListener onClickListener = new OnClickListener(View view)&#123;...&#125;);</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>否则上面的方式会报错</p><pre><code>//举个例子://定义高阶函数fun invoke(add:(x:Int,y:Int)-&gt;Int):Int{    return add(1,2)}//调用高阶函数invoke { x, y -&gt; x+y }</code></pre>]]></content>
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个讨论Kotlin和Java可见域的demo</title>
      <link href="/2018/02/08/%E4%B8%80%E4%B8%AA%E8%AE%A8%E8%AE%BAKotlin%E5%92%8CJava%E5%8F%AF%E8%A7%81%E5%9F%9F%E7%9A%84demo/"/>
      <url>/2018/02/08/%E4%B8%80%E4%B8%AA%E8%AE%A8%E8%AE%BAKotlin%E5%92%8CJava%E5%8F%AF%E8%A7%81%E5%9F%9F%E7%9A%84demo/</url>
      <content type="html"><![CDATA[<h1 id="VisibleDomainDemo"><a href="#VisibleDomainDemo" class="headerlink" title="VisibleDomainDemo"></a>VisibleDomainDemo</h1><a id="more"></a><p><strong>一个讨论Kotlin和Java可见域的demo</strong></p><p>因本群一个小伙伴的问题,在解决的过程中发现了这些东西…kotlin的internal模块级私有和java的默认包级私有,在互相调用的过程中,会有哪些问题呢?看完本demo你就了解了,如有错误请纠正</p><p><strong>测试前提:</strong></p><pre><code>lib类库里的Java类有默认可见域的接口(包级私有)和public可见域的接口实现类lib类库里的kotlin类有internal可见域的接口和public可见域的接口实现类</code></pre><p><strong>测试内容一:</strong></p><pre><code>测试lib类库里的java类假设lib类库里包级私有接口名为IA,里面有包级私有的内部接口IAInner假设IA的public可见域的实现类名为AImpl,里面有包级私有的内部接口AImplInner</code></pre><p><strong>测试步骤一:</strong></p><pre><code>1.app类中的Java类能否引用lib类库里AImpl继承下来的IAInner和AImpl自己的AImplInner2.app类中的Kotlin类能否引用lib类库里AImpl继承下来的IAInner和AImpl自己的AImplInner3.app类中的Java类能否改变lib类库里IA和IAInner的可见域和AImpl自己的AImplInner可见域4.app类中的Kotlin类能否改变lib类库里IA和IAInner的可见域和AImpl自己的AImplInner可见域</code></pre><p><strong>测试内容二:</strong></p><pre><code>测试lib类库里的kotlin类假设lib类库里模块级私有接口名为IA,里面有模块级私有的内部接口IAInner假设IA的public可见域(kotlin默认)的实现类名为AImpl,里面有模块级私有的内部接口AImplInner</code></pre><p><strong>测试步骤二:</strong></p><pre><code>5.app类中的Java类能否引用lib类库里的IA和IAInner和AImpl自己的AImplInner6.app类中的Kotlin类能否引用lib类库里AImpl继承下来的IAInner和AImpl自己的AImplInner7.app类中的Java类能否改变lib类库里IA和IAInner的可见域和AImpl自己的AImplInner可见域8.app类中的Kotlin类能否改变lib类库里IA和IAInner的可见域和AImpl自己的AImplInner可见域</code></pre><p><strong>测试结果:</strong></p><pre><code>详见各个测试类</code></pre><p><strong>测试总结:</strong></p><pre><code>1.java的app调用java的lib类库,即使java的lib类库有类(或者接口)有内部类(或者有内部接口)为包级私有,只要这些类(或者接口)有子类(或者实现类),并且这些子类(或者实现类)是public的,那么这些子类(或者实现类)是能暴露父类(或者父接口)的包级私有内部类(或者包级私有内部接口)的可见性的(这是错误的,不应该暴露)2.java的app调用java的lib类库,即使java的lib类库有类(或者接口)有内部类(或者有内部接口)为包级私有,只要在app层创建这些包级私有类(或者接口)的同包名类(或者接口),就可以访问lib类库里的这些包级私有类(或者接口)3.java的app调用kotlin的lib类库,即使kotlin的lib类库有类(或接口)为internal模块级私有权限,但是对java来说就和public一样可见要解决这个问题可以参考这篇文章(http://ice1000.org/2017/11/12/InternalFucksJava/#%E6%96%B9%E6%B3%95%E4%B8%80)不过,kotlin函数可以用这篇文章的办法解决,但是类却不可以,因为@file:JvmName只能将这个kt文件命名为该类,却不能改变指定类的名字4.kotlin的app调用java的lib类库,会严格遵守可见性,不会因为继承(或者实现)了父类(或父接口)而把父类(或者副接口)的内部包级私有类(或者内部包级私有接口)暴露,所以也不会像java的app那样能调用父类(或副接口)的内部包级私有类(或内部包级私有接口)5.kotlin的app调用kotlin的lib类库,如果kotlin的lib类库有类(或接口)为internal模块级私有权限,那么kotlin是无法调用的</code></pre><p>github地址:<br><a href="https://github.com/ikakaxi/VisibleDomainDemo" target="_blank" rel="noopener">https://github.com/ikakaxi/VisibleDomainDemo</a></p>]]></content>
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>kotlin的幕后字段(backing field)的个人理解</title>
      <link href="/2018/02/08/kotlin%E7%9A%84%E5%B9%95%E5%90%8E%E5%AD%97%E6%AE%B5-backing-field-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
      <url>/2018/02/08/kotlin%E7%9A%84%E5%B9%95%E5%90%8E%E5%AD%97%E6%AE%B5-backing-field-%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>有关kotlin的幕后字段,在 <a href="https://zhuanlan.zhihu.com/p/27493630" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27493630</a> 这里讲得很好,我总结了一下,如果让一个kotlin的类属性有幕后字段,需要满足以下条件<br><a id="more"></a></p><ul><li>不管是var或者val字段,只要有默认的setter/getter方法,就有幕后字段</li><li>如果没有默认的setter/getter方法,只要在setter/getter方法里使用了field,也会生成幕后字段</li><li>接口不能有幕后字段</li><li>类的幕后字段必须初始化,或者显式声明需要延迟初始化,如果该字段没有默认的setter/getter方法说明它并不是幕后字段</li></ul>]]></content>
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IDEA的一个bug</title>
      <link href="/2018/02/08/IDEA%E7%9A%84%E4%B8%80%E4%B8%AAbug/"/>
      <url>/2018/02/08/IDEA%E7%9A%84%E4%B8%80%E4%B8%AAbug/</url>
      <content type="html"><![CDATA[<p>今天测试一段代码,代码如下<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person14(var age: Int)</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    val p1 = Person14(1)</span><br><span class="line">    val p2 = Person14(2)</span><br><span class="line">    val p14age = p1::age</span><br><span class="line">    val p14Age = Person14::age//TODO 这句话有异常,是kotlin的问题?</span><br><span class="line">    println(p14age)</span><br><span class="line">    println(p14Age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现会报<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: Kt14Kt$main$p14age$1 (wrong name: Kt14Kt$main$p14Age$1)</span><br></pre></td></tr></table></figure></p><p>异常<br>经测试发现是IDEA的问题,因为在<a href="https://glot.io/" target="_blank" rel="noopener">https://glot.io/</a> 输入以上代码却没有问题</p>]]></content>
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java.lang.RuntimeException: Can&#39;t marshal non-Parcelable objects across processes的解决办法</title>
      <link href="/2018/02/08/java-lang-RuntimeException-Can-t-marshal-non-Parcelable-objects-across-processes%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/08/java-lang-RuntimeException-Can-t-marshal-non-Parcelable-objects-across-processes%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>必须用Bundle传递常规类型数据，否则会报错：<br><a id="more"></a></p><p>java.lang.RuntimeException: Can’t marshal non-Parcelable objects across processes.</p><p>因为Binder事务传递的数据被称为包裹(Parcel)，必须实现Parcelable接口，否则无法在两个应用之间进行通信。之所以用Bundle传递是因为该类实现了Parcelable接口。当然如果要传递类也必须实现该接口。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebView如何与Js交互</title>
      <link href="/2018/02/07/WebView%E5%A6%82%E4%BD%95%E4%B8%8EJs%E4%BA%A4%E4%BA%92/"/>
      <url>/2018/02/07/WebView%E5%A6%82%E4%BD%95%E4%B8%8EJs%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<p>我用桥接的方式实现的:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SuppressLint(&quot;AddJavascriptInterface&quot;)</span><br><span class="line">protected void initWebView() &#123;</span><br><span class="line">super.initWebView();</span><br><span class="line">String ua = webView.getSettings().getUserAgentString();</span><br><span class="line">webView.getSettings().setUserAgentString(ua + &quot;;abc&quot;);</span><br><span class="line">       //关键代码</span><br><span class="line">webView.addJavascriptInterface(new JSInvokeClass(), &quot;Test&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JSInvokeClass名字是自定义的,随便起名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   private final class JSInvokeClass &#123;</span><br><span class="line">@JavascriptInterface</span><br><span class="line">public String getUserInfo() &#123;</span><br><span class="line">return &quot;字符串&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js直接在按钮的点击事件里写”Test.getUserInfo()”就可以调用了<br>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">function test()&#123;</span><br><span class="line"> var data = Test.getUserInfo()</span><br><span class="line"> document.getElementById(&apos;content&apos;).innerHTML = data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;button id=&quot;testBtn&quot; type=&quot;button&quot; onClick=&quot;test()&quot;&gt;getUserInfo&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ObjectBox的使用方法</title>
      <link href="/2018/02/07/ObjectBox%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/ObjectBox%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>官网:<a href="http://objectbox.io/" target="_blank" rel="noopener">http://objectbox.io/</a></p><p>ObjectBox目前是Android上速度最快的数据库,有关ObjectBox和GreenDAO,Room,Real的对比在官网就有<br><a id="more"></a></p><p><strong>gradle配置</strong></p><ol><li><p>root project下面的gradle.build文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// In your root build.gradle file:</span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext.objectboxVersion = &apos;1.3.3&apos;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &quot;http://objectbox.net/beta-repo/&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</span><br><span class="line">        classpath &quot;io.objectbox:objectbox-gradle-plugin:$objectboxVersion&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &quot;http://objectbox.net/beta-repo/&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>module下面的gradle.build文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// In your (app) module build.gradle file:</span><br><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line">apply plugin: &apos;io.objectbox&apos;</span><br></pre></td></tr></table></figure></li></ol><p>注意要将io.objectbox写到application下面,不止这个ObjectBox,只要是第三方都要写到application下面</p><p>在module的dependencies里配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // 如果只是用java开发</span><br><span class="line">    // compile &quot;io.objectbox:objectbox-android:$objectboxVersion&quot;</span><br><span class="line">    // apt</span><br><span class="line">    // annotationProcessor &quot;io.objectbox:objectbox-processor:$objectboxVersion&quot;</span><br><span class="line"></span><br><span class="line">    // 如果支持kotlin开发</span><br><span class="line">    // objectbox-kotlin包含objectbox-android</span><br><span class="line">    compile &quot;io.objectbox:objectbox-kotlin:$objectboxVersion&quot;</span><br><span class="line">    // 当使用Kotlin时使用kapt(kapt包含apt功能):</span><br><span class="line">    kapt &quot;io.objectbox:objectbox-processor:$objectboxVersion&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样配置就完成了,然后在Application里初始化MyObjectBox</p><p><strong>这里有个需要注意的地方</strong><br>MyObjectBox这个类是编译生成的,所以必须先定义一个数据表,然后执行android studio的rebuild project,才会出现这个类,所以第一次使用的时候,先不要写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">//java代码</span><br><span class="line">@Entity</span><br><span class="line">class A &#123;</span><br><span class="line">    @Id</span><br><span class="line">    public Long name = 0L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//kotlin代码</span><br><span class="line">@Entity data class B(@Id var age:Long = 0)</span><br></pre></td></tr></table></figure></p><p>然后执行rebuild project,这时候在build/generated/source/katp下面就生成了MyObjectBox类和你刚才定义的表,然后就可以在Application里去初始化了</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Toolbar使用方法</title>
      <link href="/2018/02/07/Toolbar%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/Toolbar%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Toolbar作为ActionBar的替代品,功能更加强大,使用更加方便,在这里根据自己在网上学习到的资料总结一下<br><a id="more"></a></p><p>#####一. 配置</p><ol><li>theme配置</li><li>layout配置</li><li>代码配置</li></ol><p>#####二.自定义</p><ol><li>状态栏背景颜色自定义</li><li>Toolbar背景颜色,文字颜色与大小自定义</li><li>导航条背景颜色自定义(仅能在 API v21 也就是 Android 5 以后的版本中使用， 因此要将之设定在 res/values-v21/theme.xml 里面)</li><li>页面背景颜色设置</li><li>溢出菜单背景,文字颜色自定义</li></ol><p><strong>一. 配置</strong></p><ol><li>theme配置<br>theme要调整的地方有两处<br>一在 res/values/theme.xml中<br>二在 res/values-v21/theme.xml中<br>为了之后设定方便，我们先在 res/values/theme.xml 里增加一个名为 AppTheme.Base 的风格,因为此范例只使用 Toolbar，所以我们要将让原本的 ActionBar 隐藏起来<blockquote><p>这里我修改过,之前parent=”Theme.AppCompat”,但是这样的话在Toolbar弹出菜单里的item没有水波纹点击效果,后来设置成下面的形式才有了点击效果</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">  &lt;style name=&quot;AppTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">    &lt;!-- 使用 API Level 22 编译的话，要拿掉前缀字 --&gt;</span><br><span class="line">    &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- Base application theme. --&gt;</span><br><span class="line">  &lt;style name=&quot;UI.AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>然后将需要在manifest.xml中配置的 UI.AppTheme 的 parent 属性改为上面的AppTheme.Base</p><p>再来调整Android 5.0的style：  /res/values-v21/theme.xml，也将其 parent 属性改为  AppTheme.Base：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;style name=&quot;UI.AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>layout配置<br>在 activity_main.xml 里面添加 Toolbar 控件:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">  android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">  android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">  android:layout_width=&quot;match_parent&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><p>请记得用 support v7 里的 toolbar，不然只有 API Level 21 也就是 Android 5.0 以上的版本才能使用,?attr/actionBarSize意思是使用系统的值</p><p>3.代码配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">setSupportActionBar(toolbar);</span><br></pre></td></tr></table></figure></p><p><strong>二.自定义</strong><br>先看一个图片<br><img src="http://upload-images.jianshu.io/upload_images/545982-74b1a27ea5225ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我就不分开写了,直接写我配置好的代码</p><ol><li><p>在 res/values/theme.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;style name=&quot;AppTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;!-- 使用 API Level 22 编译的话,要去掉前缀字 --&gt;</span><br><span class="line">        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;!--Toolbar高度,暂时不知道怎么配置到上层使用Toolbar的地方--&gt;</span><br><span class="line">        &lt;!--&lt;item name=&quot;actionBarSize&quot;&gt;?android:attr/actionBarSize&lt;/item&gt;--&gt;</span><br><span class="line">        &lt;!--Toolbar颜色等自定义--&gt;</span><br><span class="line">        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;colorControlNormal&quot;&gt;@color/colorControlNormal&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/textColorPrimary&lt;/item&gt;</span><br><span class="line">        &lt;!--页面背景颜色--&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/windowBackground&lt;/item&gt;</span><br><span class="line">        &lt;!--该属性无效,需要在使用Toolbar的xml那设置--&gt;</span><br><span class="line">        &lt;!--&lt;item name=&quot;actionBarPopupTheme&quot;&gt;@style/ToolbarPopupTheme&lt;/item&gt;--&gt;</span><br><span class="line">        &lt;item name=&quot;android:actionBarStyle&quot;&gt;@style/CustomActionBarStyle&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Base application theme. --&gt;</span><br><span class="line">    &lt;style name=&quot;UI.AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></li><li><p>同时增加res/values/styles.xml文件,内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;!--溢出弹出菜单样式--&gt;</span><br><span class="line">    &lt;style name=&quot;ToolbarPopupTheme&quot;&gt;</span><br><span class="line">        &lt;!--新增一个item，用于控制menu--&gt;</span><br><span class="line">        &lt;item name=&quot;actionOverflowMenuStyle&quot;&gt;@style/OverflowMenuStyle&lt;/item&gt;</span><br><span class="line">        &lt;!-- 弹出层背景颜色 --&gt;</span><br><span class="line">        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/popupBackground&lt;/item&gt;</span><br><span class="line">        &lt;!-- 设置弹出菜单文字颜色 --&gt;</span><br><span class="line">        &lt;item name=&quot;android:textColor&quot;&gt;@color/popupTextColor&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style name=&quot;OverflowMenuStyle&quot; parent=&quot;Widget.AppCompat.Light.PopupMenu.Overflow&quot;&gt;</span><br><span class="line">        &lt;!--把该属性改为false即可使menu位置位于toolbar之下,该值默认为true--&gt;</span><br><span class="line">        &lt;item name=&quot;overlapAnchor&quot;&gt;false&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--http://blog.csdn.net/afei__/article/details/51476096--&gt;</span><br><span class="line">    &lt;style name=&quot;CustomActionBarStyle&quot; parent=&quot;Widget.AppCompat.Light.ActionBar&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;contentInsetStart&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;contentInsetEnd&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;contentInsetLeft&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;contentInsetRight&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></li></ol><p>因为我是把这些做到了一个UILib库里,所以在res/values下还增加了2个文件</p><ol start="3"><li><p>res/values/abstract_id.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这些都是需要上层App设置的值--&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=&quot;toolbar&quot; type=&quot;id&quot;/&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></li><li><p>res/values/abstract_color.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这些都是需要上层App设置的值--&gt;</span><br><span class="line">&lt;!--属性参考http://yifeng.studio/2017/04/18/android-theme-appcompat-color-attrs/ --&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;!--Toolbar背景颜色,通常也是一个App的主题色调,</span><br><span class="line">        如果是ActionBar直接在这里设置即可,</span><br><span class="line">        而Toolbar需要在xml设置background,</span><br><span class="line">        我把xml里的Toolbar的背景颜色设置为下面这个值了--&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot; type=&quot;color&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--状态栏颜色--&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot; type=&quot;color&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">    许多控件在选中状态或获取焦点状态下使用这个颜色，常见有：</span><br><span class="line">        CheckBox：checked 状态</span><br><span class="line">        RadioButton：checked 状态</span><br><span class="line">        SwitchCompat：checked 状态</span><br><span class="line">        EditText：获取焦点时的 underline 和 cursor 颜色</span><br><span class="line">        TextInputLayout：悬浮 label 字体颜色</span><br><span class="line">        等等</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot; type=&quot;color&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--页面背景颜色--&gt;</span><br><span class="line">    &lt;item name=&quot;windowBackground&quot; type=&quot;color&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--标题栏文字和弹出的菜单文字颜色--&gt;</span><br><span class="line">    &lt;item name=&quot;textColorPrimary&quot; type=&quot;color&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--某些 Views “normal” 状态下的颜色，</span><br><span class="line">    常见如：</span><br><span class="line">        unselected CheckBox 和 RadioButton，</span><br><span class="line">        失去焦点时的 EditText，Toolbar 溢出按钮(更多)颜色，等等。--&gt;</span><br><span class="line">    &lt;item name=&quot;colorControlNormal&quot; type=&quot;color&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Toolbar弹出层背景颜色 --&gt;</span><br><span class="line">    &lt;item name=&quot;popupBackground&quot; type=&quot;color&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Toolbar弹出层文字颜色 --&gt;</span><br><span class="line">    &lt;item name=&quot;popupTextColor&quot; type=&quot;color&quot;/&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></li></ol><p>这些只是在这里定义一下名称,并没有实际的数值,上面说了我这些都写在UILib里,所以这些值到时候需要在上层App配置</p><p>5.在res/values-v21/theme.xml中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;style name=&quot;UI.AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</span><br><span class="line">        &lt;!--底部导航栏颜色,仅能在API v21也就是Android 5以后的版本中使用</span><br><span class="line">        因此要将之设定在 res/values-v21/styles.xml 里面--&gt;</span><br><span class="line">        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><p><strong>因为我自定义了Toolbar的溢出菜单背景和文字颜色等值(在res/values/styles.xml文件中配置的,名字叫OverflowMenuStyle),所以我需要在使用Toolbar的地方配置上这个style才会生效</strong></p><p>例如上面使用Toolbar的地方是activity_main.xml,所以这里需要改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:background=&quot;@color/colorPrimary&quot;</span><br><span class="line">    app:popupTheme=&quot;@style/ToolbarPopupTheme&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>参考文章:<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2006.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2006.html</a><br><a href="http://blog.mosil.biz/2014/10/android-toolbar/" target="_blank" rel="noopener">http://blog.mosil.biz/2014/10/android-toolbar/</a><br><a href="http://yifeng.studio/2017/04/18/android-theme-appcompat-color-attrs/" target="_blank" rel="noopener">http://yifeng.studio/2017/04/18/android-theme-appcompat-color-attrs/</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Toolbar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>constraintLayout备忘</title>
      <link href="/2018/02/07/constraintLayout%E5%A4%87%E5%BF%98/"/>
      <url>/2018/02/07/constraintLayout%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<p>#####1. 相对位置<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">layout_constraintLeft_toLeftOf</span><br><span class="line">layout_constraintLeft_toRightOf</span><br><span class="line">layout_constraintRight_toLeftOf</span><br><span class="line">layout_constraintRight_toRightOf</span><br><span class="line">layout_constraintTop_toTopOf</span><br><span class="line">layout_constraintTop_toBottomOf</span><br><span class="line">layout_constraintBottom_toTopOf</span><br><span class="line">layout_constraintBottom_toBottomOf</span><br><span class="line">layout_constraintBaseline_toBaselineOf</span><br><span class="line">layout_constraintStart_toEndOf</span><br><span class="line">layout_constraintStart_toStartOf</span><br><span class="line">layout_constraintEnd_toStartOf</span><br><span class="line">layout_constraintEnd_toEndOf</span><br></pre></td></tr></table></figure></p><p>以layout_constraintLeft_toLeftOf 为例，其中 layout_ 部分是固定格式，主要的信息包含在下面两部分：<br>constraintXXX：指定当前控件需要设置约束的属性部分。如 constraintLeft 表示对当前控件的 左边 进行约束设置。<br>toXXXOf：其指定的内容是作为当前控件设置约束需要依赖的控件或父容器（可以理解为设置约束的参照物）。并通过 XXX 指定被依赖对象用于参考的属性。如 toLeftOf=”parent” ：表示当前控件相对于父容器的左边进行约束设置。</p><p>#####2. 边距</p><ul><li><p>普通边距属性<br>android:layout_marginStart<br>android:layout_marginEnd<br>android:layout_marginLeft<br>android:layout_marginTop<br>android:layout_marginRight<br>android:layout_marginBottom</p></li><li><p>被依赖控件GONE之后的边距属性<br>layout_goneMarginStart<br>layout_goneMarginEnd<br>layout_goneMarginLeft<br>layout_goneMarginTop<br>layout_goneMarginRight<br>layout_goneMarginBottom</p></li></ul><p>#####3. 居中</p><ul><li>水平居中：相对一个控件或者父容器左右对齐<br>app:layout_constraintLeft_toLeftOf=”parent”<br>app:layout_constraintRight_toRightOf=”parent</li><li>垂直居中：相对一个控件或者父容器左右对齐<br>app:layout_constraintTop_toTopOf=”parent”<br>app:layout_constraintBottom_toBottomOf=”parent”</li></ul><p>#####4. 偏移<br>layout_constraintHorizontal_bias // 水平偏移<br>layout_constraintVertical_bias   // 垂直偏移</p><p>#####5. 可见性<br>可见性这个属性大家应该很熟悉，但是约束布局的可见性属性和其它布局相比，存在以下区别：</p><ul><li>当控件设为GONE时，被认为尺寸为0。可以理解为布局上的一个点。</li><li>若GONE的控件对其它控件有约束，则约束保留并生效，但所有的边距（margin）会清零。</li></ul><p>#####6. 尺寸</p><p>几种设置方式：</p><ul><li>设置固定尺寸，如123dp</li><li>使用 wrap_content ，根据内容计算合适大小</li><li>match_parent ，填充满父布局，此时设置的约束都不生效了。（早之前的约束布局版本貌似不允许在其子view中使用match_parent属性，但是我写文章的时候发现也是可以用上去的）</li><li>设置0dp，相当于MATCH_CONSTRAINT属性，基于约束最终确定大小</li></ul><p>MATH_CONSTRAINT</p><ul><li>layout_constraintWidth_min 和 layout_constraintHeight_min ：设置最小值</li><li>layout_constraintWidth_max 和 layout_constraintHeight_max ：设置最大值</li><li>layout_constraintWidth_percent 和 layout_constraintHeight_percent ：设置控件相对于父容器的百分比大小（1.1.0开始支持）。使用之前需要先设置为百分比模式，然后设置设置宽高值为0～1之间。</li></ul><p>设置为百分比模式的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app:layout_constraintWidth_default=&quot;percent&quot;</span><br><span class="line">app:layout_constraintHeight_default=&quot;percent&quot;</span><br></pre></td></tr></table></figure></p><ul><li>强制约束<br>当一个控件设为wrap_content时，再添加约束尺寸是不起效果的。如需生效，需要设置如下属性为true:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app:layout_constrainedWidth=”true|false”     </span><br><span class="line">app:layout_constrainedHeight=”true|false”</span><br></pre></td></tr></table></figure></li></ul><p>#####7. 比例<br>控件可以定义两个尺寸之间的比例，目前支持宽高比。<br>前提条件是至少有一个尺寸设置为0dp，然后通过 layout_constraintDimentionRatio 属性设置宽高比。设置方式有以下几种：</p><ul><li>直接设置一个float值，表示宽高比</li><li>以” width：height”形式设置</li><li>通过设置前缀W或H，指定一边相对于另一边的尺寸，如”H, 16:9”，高比宽为16:9</li></ul><p>如果宽高都设置为0dp，也可以用ratio设置。这种情况下控件会在满足比例<br>约束的条件下，尽可能填满父布局。</p><p>#####8. 链<br>链这个概念是约束布局新提出的，它提供了在一个维度（水平或者垂直），管理一组控件的方式。</p><p>#####9. Guideline<br>可以理解为布局辅助线，用于布局辅助，不在设备上显示。<br>有垂直和水平两个方向（android:orientation=“vertical/horizontal”）</p><ul><li>垂直：宽度为0，高度等于父容器</li><li>水平：高度为0，宽度等于父容器</li></ul><p>有三种放置Guideline的方式：</p><ul><li>给定距离左边或顶部一个固定距离（layout_constraintGuide_begin）</li><li>给定距离右边或底部一个固定距离（layout_constraintGuide_end）</li><li>给定宽高一个百分比距离（layout_constraintGuide_percent）</li></ul><p>参考:<a href="http://www.qingpingshan.com/rjbc/az/359115.html" target="_blank" rel="noopener">http://www.qingpingshan.com/rjbc/az/359115.html</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TargeApi的使用方法</title>
      <link href="/2018/02/07/TargeApi%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/TargeApi%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>直接记录总结:</p><p>在使用高于 minSdkVersion API level 的方法需要:</p><ol><li>用@TargeApi($API_LEVEL)使可以编译通过,不建议使用@SuppressLint(“NewApi”)。</li><li>运行时判断 API level;仅在足够高,有此方法的API level系统中,调用此方法。</li><li>保证低API版本通过其他方法提供功能实现。</li></ol>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android中build target，minSdkVersion，targetSdkVersion，maxSdkVersion概念区分</title>
      <link href="/2018/02/07/Android%E4%B8%ADbuild-target%EF%BC%8CminSdkVersion%EF%BC%8CtargetSdkVersion%EF%BC%8CmaxSdkVersion%E6%A6%82%E5%BF%B5%E5%8C%BA%E5%88%86/"/>
      <url>/2018/02/07/Android%E4%B8%ADbuild-target%EF%BC%8CminSdkVersion%EF%BC%8CtargetSdkVersion%EF%BC%8CmaxSdkVersion%E6%A6%82%E5%BF%B5%E5%8C%BA%E5%88%86/</url>
      <content type="html"><![CDATA[<p>原文:<a href="http://blog.csdn.net/zhangjg_blog/article/details/17142395" target="_blank" rel="noopener">http://blog.csdn.net/zhangjg_blog/article/details/17142395</a><br><a id="more"></a></p><p>个人总结一下:</p><ol><li><p>build target:<br>一般情况下，应该使用最新的API level作为build target。这也是eclipse生成项目时的默认行为。<br>如果使用没有在build target里存在的API就会报错</p></li><li><p>minSdkVersion:<br>指明应用程序运行所需的最小API level。如果不指明的话，默认是1。也就是说该应用兼容所有的android版本。我们应该总是声明这个属性。否则基本上所有的API都没办法调用,因为API等级为1的时候没有什么现在可以用的API<br><strong>如果系统的API level低于android:minSdkVersion设定的值，那么android系统会阻止用户安装这个应用。<br>如果指明了这个属性，并且在项目中使用了高于这个API level的API， 那么会在编译时报错。</strong></p></li><li><p>targetSdkVersion:<br>标明应用程序目标API Level的一个整数。如果不设置，默认值和minSdkVersion相同。<br>这个属性通知系统，你已经针对这个指定的目标版本测试过你的程序，系统不必再使用兼容模式来让你的应用程序向前兼容这个目标版本。应用程序仍然能在低于targetSdkVersion的系统上运行。<br>根据你设置的targetSdkVersion 的值，系统会执行很多兼容行为。一些行为在对应平台版本的Build.VERSION_CODES中有讨论。<br><strong>targetSdkVersion这个属性是在程序运行时期起作用的，系统根据这个属性决定要不要以兼容模式运行这个程序。</strong><br>一般情况下，应该将这个属性的值设置为最新的API level 值，这样的话可以利用新版本系统上的新特性。eclipse在生成项目时，默认将该值设置为最高，如果设置一个较低的值，会给出一个警告</p></li></ol>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>com.android.browser/com.android.browser.BrowserActivity找不到</title>
      <link href="/2018/02/07/com-android-browser-com-android-browser-BrowserActivity%E6%89%BE%E4%B8%8D%E5%88%B0/"/>
      <url>/2018/02/07/com-android-browser-com-android-browser-BrowserActivity%E6%89%BE%E4%B8%8D%E5%88%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android.content.ActivityNotFoundException</span><br><span class="line">Unable to find explicit activity class &#123;com.android.browser/com.android.browser.BrowserActivity&#125;; have you declared this activity in your AndroidManifest.xml?</span><br></pre></td></tr></table></figure><p>在三星的一款手机遇到这个问题,后来找到原因是他刷机后没有这个累了,之前的调用方法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();  </span><br><span class="line">intent.setAction(Intent.ACTION_VIEW);  </span><br><span class="line">Uri content_uri_browsers = Uri.parse(***);  </span><br><span class="line">intent.setData(content_uri_browsers);  </span><br><span class="line">intent.setClassName(&quot;com.android.browser&quot;, &quot;com.android.browser.BrowserActivity&quot;);  </span><br><span class="line">this.startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>解决这个问题需要去掉intent.setClassName(…)<br>改完以后是下面这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();  </span><br><span class="line">intent.setAction(Intent.ACTION_VIEW);  </span><br><span class="line">Uri content_uri_browsers = Uri.parse(***);  </span><br><span class="line">intent.setData(content_uri_browsers);  </span><br><span class="line">this.startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>这样让用户去选择浏览器下载,就解决这个问题了</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 代码里动态设置TextView/Button等的文字颜色Seletor</title>
      <link href="/2018/02/07/Android-%E4%BB%A3%E7%A0%81%E9%87%8C%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AETextView-Button%E7%AD%89%E7%9A%84%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2Seletor/"/>
      <url>/2018/02/07/Android-%E4%BB%A3%E7%A0%81%E9%87%8C%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AETextView-Button%E7%AD%89%E7%9A%84%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2Seletor/</url>
      <content type="html"><![CDATA[<p>######前言<br>今天遇到个很蛋疼的问题，下载时，多个按钮共用一个button，也就是不同下载状态下，button的背景以及字体颜色都不一样，结果自己挖了坑把自己埋进去了。<br><a id="more"></a><br>以下是我在/res/color文件夹里给button设置的文字颜色seletor：networkdata_btn_open_txtcolor_selector.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item android:color=&quot;#ffffff&quot; android:state_pressed=&quot;true&quot;&gt;&lt;/item&gt;</span><br><span class="line">    &lt;item android:color=&quot;#ffffff&quot; android:state_selected=&quot;true&quot;&gt;&lt;/item&gt;</span><br><span class="line">    &lt;item android:color=&quot;#f88b00&quot;&gt;&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure></p><p>######坑？<br>在代码里设置颜色seletor，以为在代码里直接调用 button.setTextColor(int colorValue) 就可以了，结果运行效果让我傻眼了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mBtnDownAndOpen.setText(DOWNLOAD_OPEN);  //设置button文字</span><br><span class="line">mBtnDownAndOpen.setTextColor(mContext.getResources().getColor(R.color.networkdata_btn_open_txtcolor_selector));    //设置button文字颜色</span><br><span class="line">mBtnDownAndOpen.setBackground(mContext.getResources().getDrawable(R.drawable.networkdata_btn_open_selector));    //设置button背景</span><br></pre></td></tr></table></figure></p><p>######郁闷的是，只能读取到没获取焦点时的色值，也就是 <item android:color="#f88b00"></item> ，其他状态获取不到。</p><p>######如何填坑？<br>采用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mBtnDownAndOpen.setTextColor(mContext.getResources().getColorStateList(R.color.networkdata_btn_open_txtcolor_selector));</span><br></pre></td></tr></table></figure></p><p>为button设置文字颜色。<br>区别在于：改之前用的是getColor，改之后用的是getColorStateList</p><p>######WHY?<br>文字颜色的seletor在代码里的显示形式是ColorStateList，而res/color放的就是ColorStateList资源XML文件，getColor只能读取单个的color。</p><p>转载:<a href="http://blog.csdn.net/zhangshao45612/article/details/49784997" target="_blank" rel="noopener">http://blog.csdn.net/zhangshao45612/article/details/49784997</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>透明状态栏</title>
      <link href="/2018/02/07/%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
      <url>/2018/02/07/%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F/</url>
      <content type="html"><![CDATA[<p>总结备份一下,防止忘记,网上有较多的设置透明状态栏的方法,目前试了很多,个人觉得现在自己使用的这种方式较完美<br>首先我的项目没有用到ToolBar或者ActionBar,后退标题栏是自己做的,这个后退标题栏自己做也很简单,而且按系统后退键我也处理了,下面直接说怎么做透明标题栏<br><a id="more"></a></p><p>######首先,要在自己的项目里添加v7扩展包,然后再做下列操作</p><p>1.设置theme<br>在默认的values下,添加下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style name=&quot;BaseTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style name=&quot;ImageTranslucentTheme&quot; parent=&quot;BaseTheme&quot;&gt;</span><br><span class="line">        &lt;!--通过设置android:windowIsTranslucent属性，表明该窗口是透明的，这样也不会出现白屏或者黑屏。</span><br><span class="line">        但是，它和MainActivity的显示是同步，如果在MainActivity启动的时候，有过多复杂的操作，就会出现在手机中点击了应用程序的图标之后，</span><br><span class="line">        但过两秒才会打开应用程序不好的卡顿体验效果。--&gt;</span><br><span class="line">        &lt;!--&lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;--&gt;</span><br><span class="line">        &lt;!--让一张图片作为窗口的背景图，使打开MainActivity第一眼看到的界面是一张图片而不是白屏或者黑屏。</span><br><span class="line">        设置这个属性来显示一张背景图还有一个效果就是启动应用程序会感觉非常快，而且与加载MainActivity的contentView是异步的--&gt;</span><br><span class="line">        &lt;!--&lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/white&lt;/item&gt;--&gt;</span><br><span class="line">        &lt;!-- 打开window预览效果(默认是打开的) --&gt;</span><br><span class="line">        &lt;!--item name=&quot;android:windowDisablePreview&quot;&gt;true&lt;/item--&gt;</span><br><span class="line">        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/white&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;actionBarStyle&quot;&gt;@style/ThemeOverlay.AppCompat.Dark.ActionBar&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:actionBarStyle&quot;&gt;@style/ThemeOverlay.AppCompat.Dark.ActionBar&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><p>2.然后添加同级文件夹values-v21,添加下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--沉浸式状态栏--&gt;</span><br><span class="line">    &lt;style name=&quot;ImageTranslucentTheme&quot; parent=&quot;BaseTheme&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowDrawsSystemBarBackgrounds&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowContentTransitions&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowAllowEnterTransitionOverlap&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowAllowReturnTransitionOverlap&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowSharedElementEnterTransition&quot;&gt;@android:transition/move&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowSharedElementExitTransition&quot;&gt;@android:transition/move&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><p>3.在AndroidManifest.xml里,给Application配置上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:theme=&quot;@style/ImageTranslucentTheme&quot;</span><br></pre></td></tr></table></figure></p><p>4.在需要透明状态栏的Activity的onCreate方法里添加方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">StatusBarCompat.compat(this, getResources().getColor(R.color.back_title_bg));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>back_title_bg是我自己定义的颜色,在color.xml文件里配置的,这么做就可以实现透明状态栏了,这里有一些值应该不需要配置也可以,等以后有时间再研究一下,下面附上StatusBarCompat类的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import android.annotation.TargetApi;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.graphics.Color;</span><br><span class="line">import android.os.Build;</span><br><span class="line">import android.support.annotation.ColorInt;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line">import cn.finalteam.toolsfinal.DeviceUtils;</span><br><span class="line"></span><br><span class="line">public class StatusBarCompat &#123;</span><br><span class="line"></span><br><span class="line">private static final int INVALID_VAL = -1;</span><br><span class="line">private static final int COLOR_DEFAULT = Color.parseColor(&quot;#20000000&quot;);</span><br><span class="line"></span><br><span class="line">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">public static void compat(Activity activity, @ColorInt int statusColor) &#123;</span><br><span class="line">ViewGroup contentView = (ViewGroup) activity.findViewById(android.R.id.content);</span><br><span class="line">View childAt = contentView.getChildAt(0);</span><br><span class="line">childAt.setFitsSystemWindows(true);</span><br><span class="line">//当前手机版本为5.0及以上</span><br><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">if (statusColor != INVALID_VAL) &#123;</span><br><span class="line">activity.getWindow().setStatusBarColor(statusColor);</span><br><span class="line">&#125;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//当前手机版本为4.4-5.0</span><br><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">int color = COLOR_DEFAULT;</span><br><span class="line">if (statusColor != INVALID_VAL) &#123;</span><br><span class="line">color = statusColor;</span><br><span class="line">&#125;</span><br><span class="line">//根布局添加占位状态栏</span><br><span class="line">ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();</span><br><span class="line">View statusBarView = new View(activity);</span><br><span class="line">ViewGroup.LayoutParams lp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</span><br><span class="line">DeviceUtils.getStatusBarHeight(activity));</span><br><span class="line">statusBarView.setBackgroundColor(color);</span><br><span class="line">decorView.addView(statusBarView, lp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void compat(Activity activity) &#123;</span><br><span class="line">compat(activity, INVALID_VAL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中用到一个开源项目的类,附上地址<br><a href="https://github.com/pengjianbo/ToolsFinal" target="_blank" rel="noopener">https://github.com/pengjianbo/ToolsFinal</a><br>只有一个地方用到了,自己找一下替代方法就不用引入这个类库了</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状态栏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如果在程序启动的时候等待debug</title>
      <link href="/2018/02/07/%E5%A6%82%E6%9E%9C%E5%9C%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%E7%AD%89%E5%BE%85debug/"/>
      <url>/2018/02/07/%E5%A6%82%E6%9E%9C%E5%9C%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%E7%AD%89%E5%BE%85debug/</url>
      <content type="html"><![CDATA[<p>在应用开发中，我们常常会进行日志打印或者debug调试，以此来分析运行时的一些信息，便于发现bug和问题。Android Studio的Debug功能很好用，但是有时候有些情况下，就显得不是那么快捷和便利。<br><a id="more"></a></p><p>比如</p><ul><li>我们调试的点在应用一打开的时候，很靠前，例如Application的onCreate方法中，以至于我们不能足够快的设置进程为debug模式</li><li>虽然上面的情况可以通过Android Studio的debug运行来解决，但是如果项目很大的话，运行起来也会比较耽误时间</li></ul><p>那么怎么解决上面的问题呢，其实只需要执行一行命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am set-debug-app -w com.example.jishuxiaoheiwu.appdebugsample</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>set-debug-app 用来应用为debug模式</li><li>-w 意思为wait，在进程启动的时候，等待debugger进行连接</li><li><p><code>com.example.jishuxiaoheiwu.appdebugsample</code></p><p>代表想要调试的应用的包名或ApplicationId</p></li></ul><p>执行上面的命令，当我们再次启动目标应用时，会得到这样的画面</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-5548e7da53022dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Android Waiting For Debugger Dialog"></p><p>然后，我们就会有足够的时间，来使用Run—&gt; Attach Debugger to Android Process 来绑定进程debug。 绑定后对话框消失，下次启动就是正常的启动（没有上面的对话框了）</p><p>那么一次debug不一定能解决问题，多次调试则在所难免，那么每次都要执行这个命令么？</p><p>答案是可以，但是有更好的方式。即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am set-debug-app -w --persistent  com.example.jishuxiaoheiwu.appdebugsample</span><br></pre></td></tr></table></figure><p>上面的代码和之前有所不同，表现在一个—persistent</p><ul><li>—persitent意思是持久的，意思是一直设置这个应用为调试模式，即每次开启（进程创建）都会弹出对话框，即使卸载再安装或者更新应用</li></ul><p>如果多次debug完成后，解决了问题，想要恢复正常的启动也很简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am clear-debug-app</span><br></pre></td></tr></table></figure><p>这个调试的方法很简单，但是可能会节省我们很多的宝贵时间。希望可以帮助到各位开发同行。</p><p>另外，当你的开发中遇到效率问题时，你需要做出思考，发觉更快捷的工作方式，而不是为了调试Application中onCreate方法中的代码，每次都点击Android Studio的debug按钮。</p><p>转载:<a href="http://droidyue.com/blog/2017/05/14/a-little-but-useful-debug-skill_for_android/" target="_blank" rel="noopener">http://droidyue.com/blog/2017/05/14/a-little-but-useful-debug-skill_for_android/</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不Root也可以app的/data/data/目录</title>
      <link href="/2018/02/07/%E4%B8%8DRoot%E4%B9%9F%E5%8F%AF%E4%BB%A5app%E7%9A%84-data-data-%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/02/07/%E4%B8%8DRoot%E4%B9%9F%E5%8F%AF%E4%BB%A5app%E7%9A%84-data-data-%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>手机root后,执行adb shell然后执行su命令,就可以为所欲为,但是测试机不见得都可以root,这时候做一些操作,可以执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run-as 需要查看内容的应用包名</span><br></pre></td></tr></table></figure></p><p>这个命令查看,但是只能在debug下面才能使用,所以,只能看自己开发的app了…</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>彻底理解Handler机制</title>
      <link href="/2018/02/07/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Handler%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/02/07/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3Handler%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>###关键知识点</p><ul><li>Handler</li><li>MessageQueue</li><li>ThreadLocal</li><li>Loop</li><li>ActivityThread</li></ul><a id="more"></a><p>#####先来看关键部分的代码,不关键的部分我删掉了</p><ul><li>Handler</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public Handler() &#123;</span><br><span class="line">    this(null, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Handler(Callback callback, boolean async) &#123;</span><br><span class="line">    mLooper = Looper.myLooper();</span><br><span class="line">    if (mLooper == null) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">            &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    mQueue = mLooper.mQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Looper</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">private Looper(boolean quitAllowed) &#123;</span><br><span class="line">    mQueue = new MessageQueue(quitAllowed);</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void prepare() &#123;</span><br><span class="line">    prepare(true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void prepare(boolean quitAllowed) &#123;</span><br><span class="line">    if (sThreadLocal.get() != null) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(new Looper(quitAllowed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Looper myLooper() &#123;</span><br><span class="line">    return sThreadLocal.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void prepareMainLooper() &#123;</span><br><span class="line">    prepare(false);</span><br><span class="line">    synchronized (Looper.class) &#123;</span><br><span class="line">        if (sMainLooper != null) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void loop() &#123;</span><br><span class="line">    final Looper me = myLooper();</span><br><span class="line">    if (me == null) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    final MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        Message msg = queue.next(); // might block</span><br><span class="line">        if (msg == null) &#123;</span><br><span class="line">            // No message indicates that the message queue is quitting.</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityThread<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;  </span><br><span class="line">     SamplingProfilerIntegration.start();  </span><br><span class="line">     CloseGuard.setEnabled(false);  </span><br><span class="line">  </span><br><span class="line">     Environment.initForCurrentUser();  </span><br><span class="line">  </span><br><span class="line">     // Set the reporter for event logging in libcore  </span><br><span class="line">     EventLogger.setReporter(new EventLoggingReporter());  </span><br><span class="line">  </span><br><span class="line">     Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;);  </span><br><span class="line">  </span><br><span class="line">     Looper.prepareMainLooper();// 1、创建消息循环Looper  </span><br><span class="line">  </span><br><span class="line">     ActivityThread thread = new ActivityThread();  </span><br><span class="line">     thread.attach(false);  </span><br><span class="line">  </span><br><span class="line">     if (sMainThreadHandler == null) &#123;  </span><br><span class="line">         sMainThreadHandler = thread.getHandler(); // UI线程的Handler  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     AsyncTask.init();  </span><br><span class="line">  </span><br><span class="line">     if (false) &#123;  </span><br><span class="line">         Looper.myLooper().setMessageLogging(new  </span><br><span class="line">                 LogPrinter(Log.DEBUG, &quot;ActivityThread&quot;));  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     Looper.loop();   // 2、执行消息循环  </span><br><span class="line">  </span><br><span class="line">     throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们从下面的代码开始分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   @Override</span><br><span class="line">   protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">new Thread()&#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">Looper.prepare();</span><br><span class="line">Handler handler = new Handler(new Handler.Callback() &#123;</span><br><span class="line">@Override</span><br><span class="line">public boolean handleMessage(Message msg) &#123;</span><br><span class="line">Log.d(&quot;tag&quot;,&quot;已收到消息&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">handler.sendMessage(...);</span><br><span class="line">Looper.loop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>####1.Looper.prepare()<br>在这个方法里,sThreadLocal.get()获取之前保存的当前线程的Looper,如果不存在就创建一个Looper然后保存到当前线程,关于ThreadLocal请谷歌张孝祥老师的多线程部分,有讲解ThreadLocal,在这里sThreadLocal能保证每个线程只有一个Looper</p><p>####2.Handler handler = new Handler<br>这个方法,会创建一个Handler,在创建的时候会调用Looper.myLooper()方法,在Looper.myLooper()方法里会调用<br>sThreadLocal.get()方法获取当前线程保存过的Looper,而我们在创建Handler之前调用了Looper.prepare(),所以这里不为空,如果没有调用Looper.prepare()这里就会抛出异常.在这个方法里会保存一份Looper里的MessageQueue引用</p><p>####3.handler.sendMessage(…)<br>看源码会发现,最终该方法会调用下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123;</span><br><span class="line">  msg.target = this;</span><br><span class="line">  if (mAsynchronous) &#123;</span><br><span class="line">    msg.setAsynchronous(true);</span><br><span class="line">  &#125;</span><br><span class="line">  return queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中queue是在Handler创建的时候,从Looper获取的Looper中的MessageQueue的引用,在enqueueMessage这个方法里,会把Message的target设置为自己,然后把这条Message放到queue里,后面的uptimeMillis参数会根据时间调整消息发送的顺序,这里不多讲,有兴趣可以自己研究一下</p><p>####4.Looper.loop()<br>这个方法的实现请看上面Looper类的源码,在这个方法里会有一个死循环一直从MessageQueue里获取Message,取到以后就调用Message所属的Handler的dispatchMessage方法</p><p>下面我用一张图总结一下上面<code>onCreate</code>方法里的调用流程</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-312adac6c7eec3b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在我们平时写代码的时候,并不会去执行Looper的prepare方法和loop方法,这是因为系统帮我们做了这件事情,Android应用程序的入口为ActivityThread.main方法,在上面的ActivityThread.main方法里我们可以看到有调用Looper.prepareMainLooper()和Looper.loop()方法</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> handler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生成启动Activity的uri字符串</title>
      <link href="/2018/02/07/%E7%94%9F%E6%88%90%E5%90%AF%E5%8A%A8Activity%E7%9A%84uri%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/02/07/%E7%94%9F%E6%88%90%E5%90%AF%E5%8A%A8Activity%E7%9A%84uri%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();</span><br><span class="line">intent.setClass(this, ReceivePushMessageActivity.class);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">intent.putExtra(&quot;name&quot;, &quot;li&quot;);</span><br><span class="line">intent.putExtra(&quot;age&quot;, 18);</span><br><span class="line">String intentUri = intent.toUri(Intent.URI_INTENT_SCHEME);</span><br><span class="line"></span><br><span class="line">//复制到剪贴板</span><br><span class="line">ClipboardManager cmb = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line">cmb.setText(intentUri);</span><br><span class="line">ToastFactory.showTextShortToast(this, &quot;已复制到剪贴板&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activity </tag>
            
            <tag> Intent </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>百度地图的MapView在Fragment中闪屏的解决办法</title>
      <link href="/2018/02/07/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84MapView%E5%9C%A8Fragment%E4%B8%AD%E9%97%AA%E5%B1%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/07/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84MapView%E5%9C%A8Fragment%E4%B8%AD%E9%97%AA%E5%B1%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>将MapView改为TextureMapView即可</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>activity设置为不可见</title>
      <link href="/2018/02/07/activity%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%8D%E5%8F%AF%E8%A7%81/"/>
      <url>/2018/02/07/activity%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%8D%E5%8F%AF%E8%A7%81/</url>
      <content type="html"><![CDATA[<p>android:theme=”@android:style/Theme.NoDisplay”</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android自定义权限可能出现的问题</title>
      <link href="/2018/02/07/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/07/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>为了方便描述,这里先定义两个app的名字:<br>调用方:A<br>被调用方:B<br>A调用B的Activity名字:AActivity<br>被调用方的Activity名字:BActivity<br>一个很可能出现的异常:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.SecurityException: Permission Denial: starting Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=xxx/.xxx.BActivity &#125; from null (pid=3202, uid=2000) requires xxx.permission</span><br></pre></td></tr></table></figure></p><p>在B的manifest.xml的manifest标签里定义自定义权限(signature代表同样签名的app才可以调用)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;permission</span><br><span class="line">        android:name=&quot;xxx.permission&quot;</span><br><span class="line">        android:label=&quot;权限描述&quot;</span><br><span class="line">        android:permissionGroup=&quot;权限组名,随便写&quot;</span><br><span class="line">        android:protectionLevel=&quot;signature&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>还需要在B的manifest.xml里写上类似下面的代码,注意最好添加android:exported=”true”,虽然如果intent-filter下面有action会默认android:exported为true,但是最好还是写上,因为即使有action也可以将android:exported设置为false的<br>(例如这里叫BActivity)<br>(如果需要隐藏这个app的图标,就添加类似下面的data属性)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">  android:name=&quot;.BActivity&quot;</span><br><span class="line">  android:exported=&quot;true&quot;&gt;</span><br><span class="line">  &lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class="line">    &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class="line">    &lt;data</span><br><span class="line">        android:host=&quot;随便写&quot;</span><br><span class="line">        android:scheme=&quot;随便写&quot; /&gt;</span><br><span class="line">  &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure></p><p>然后在A的manifest.xml的manifest标签里写上,否则如果先安装A再安装B会出现上面说的授权错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;xxx.permission&quot;/&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activity常用的4种载入方式</title>
      <link href="/2018/02/07/Activity%E5%B8%B8%E7%94%A8%E7%9A%844%E7%A7%8D%E8%BD%BD%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/02/07/Activity%E5%B8%B8%E7%94%A8%E7%9A%844%E7%A7%8D%E8%BD%BD%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>#一:xml配置<br><a id="more"></a></p><p>###1.android:launchMode=”standard”<br>这是默认的方式,每次启动一个Activity都会重新创建一个新的实例,不管这个实例是否已经存在.在这种模式下,谁启动了这个Activity,那么这个Activity就运行在启动它的那个Activity所在的栈中<br>当我们用ApplicationContext去启动standard模式的Activity的时候会报错,因为standard模式的Activity默认会进入启动它的Activity所属的任务栈中,但是由于非Activity类型的Context(如ApplicationContext)并没有所谓的任务栈,所以这就有问题了.解决这个问题的方法是为待启动的Activity指定FLAG_ACTIVITY_NEW_TASK标记位,这样启动的时候就会为它创建一个新的任务栈</p><p>###2.android:launchMode=”singleTop”<br>栈顶复用模式,在这种模式下,如果新Activity已经位于任务栈的栈顶,那么此Activity不会被重新创建,同时它的onNewIntent方法会被回调,调用此方法的参数我们可以取出当前请求的信息.需要注意的是,这个Activity的onCreate,onStart不会被系统调用,因为它并没有发生改变.如果新Activity的实例已存在但不是位于栈顶,那么新Activity仍然会重新创建</p><p>###3.android:launchMode=”singleTask”<br>栈内复用模式,这是一种单实例模式,在这种模式下,只要Activity在一个栈中存在,那么多次启动此Activity都不会重新创建实例,和singleTop一样,系统也会回调其onNewIntent.如果被启动的Activity不在栈顶,那么就会把它上面的Activity出栈</p><p>###4.android:launchMode=”singleInstance”<br>加强的栈内复用模式,它除了具有singleTask模式的所有特性外,还加强了一点,那就是具有此种模式的Activity只能单独的位于一个任务栈中,换句话说,比如Activity A是singleInstance模式,当A启动后,系统会为它创建一个新的任务栈,然后A独自在这个新的任务栈中,由于栈内复用的特性,后续的请求均不会创建新的Activity,除非这个独特的任务栈被系统销毁了</p><p>#二.设置Intent的Flag标志</p><p>###1.FLAG_ACTIVITY_NEW_TASK<br>如果当前app还没有任务栈会创建一个任务栈然后把Activity放进去<br>如果已经有了就用已存在的任务栈<br>如果启动Activity的Context没有任务栈并且没有指定此标记位会报错,例如用ApplicationContext启动Activity</p><p>###2.FLAG_ACTIVITY_CLEAR_TOP或者FLAG_ACTIVITY_NEW_TASK  | FLAG_ACTIVITY_CLEAR_TOP<br>和singleTask效果是一样的</p><pre><code>设被启动的Activity的名字为A:当A已存在栈中的时候1.当A的启动模式是standard的时候,A和它之上的Activity都会出栈然后创建新的A并放入栈中2.当A的启动模式是其它3种的时候(singleTask,singleInstance,singleTop),A之上的Activity都会出栈然后调用已存在的A的onNewIntent方法当A不存在栈中的时候用FLAG_ACTIVITY_NEW_TASK |FLAG_ACTIVITY_CLEAR_TOP会创建一个A,如果不加FLAG_ACTIVITY_NEW_TASK会报错</code></pre><p>###3.FLAG_ACTIVITY_SIGNLE_TOP<br>和singleTop效果是一样的</p><p>###4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS<br>具有这个标记的Activity不会出现在历史Activity的列表中,当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用.它等同于在XML中指定Activity的属性android:excludeFromRecents=”true”</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信支付中的坑及解决办法</title>
      <link href="/2018/02/07/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E4%B8%AD%E7%9A%84%E5%9D%91%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/07/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E4%B8%AD%E7%9A%84%E5%9D%91%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>这几天做微信支付遇到很多坑,官方的demo跑不起来,首先这个demo隐藏的很深…很难找到那个支付的demo,而且你找到以后还有错误,因为代码里引入的包都是sdk什么什么,但是他自己带的jar包实际的包名是opensdk什么什么,你改过来之后就算运行起来也调不起微信,因为这个demo里的url已经无法访问了…<br><a id="more"></a><br>然后网上查资料,用网上的各种办法终于解决了,现在总结一下,你用我的办法肯定能解决微信支付的问题</p><p>#####坑1:调不起微信<br>首先,你要保证服务器返回的参数都正确,如果参数不正确的话肯定调用不起来,这里假设参数是正确的.支付的appid可以在客户端保存也可以在服务器返回,这里我用服务器返回的做示例,步骤如下:<br>1.调用支付的Activity中,实例化IWXAPI<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">private IWXAPI api;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">//在这里可以不传AppId传null就可以</span><br><span class="line">api = WXAPIFactory.createWXAPI(this, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//payParamResponse是我封装的服务器返回的参数</span><br><span class="line">private void startPay(PayParamResponse payParamResponse)&#123;</span><br><span class="line">PayReq req = new PayReq();</span><br><span class="line">req.appId = payParamResponse.getAppid();</span><br><span class="line">req.nonceStr = payParamResponse.getNoncestr();</span><br><span class="line">req.packageValue = &quot;Sign=WXPay&quot;;</span><br><span class="line">req.partnerId = payParamResponse.getPartnerid();</span><br><span class="line">req.prepayId = payParamResponse.getPrepayid();</span><br><span class="line">req.timeStamp = payParamResponse.getTimestamp();</span><br><span class="line">req.sign = payParamResponse.getSign();</span><br><span class="line">//在sendReq方法发起支付之前需要注册你的AppId</span><br><span class="line">api.registerApp(payParamResponse.getAppid());</span><br><span class="line">api.sendReq(req);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.从服务器获取到支付参数后调用startPay即可调起微信来支付</p><p>#####坑2:找不到WXPayEntryActivity类<br>因为现在都是用android studio开发了,而且大部分都用到了多渠道打包,所以你们是不是遇到了回调找不到WXPayEntryActivity类的bug?<br>不得不说微信支付sdk太傻比,这里有这几种情况<br>假设manifest的package为A,build.gradle的applicationId为B</p><blockquote><p>1:WXPayEntryActivity的activity:name的包名为”.wxapi.WXPayEntryActivity”(注意最前面有个”.”)<br>2:WXPayEntryActivity的activity:name的包名为”A.wxapi.WXPayEntryActivity”(这次是”A.”)<br>3:WXPayEntryActivity的activity:name的包名为”B.wxapi.WXPayEntryActivity”(这次是”B.”)(建议写为”${applicationId}.wxapi.WXPayEntryActivity”)</p></blockquote><p>第一种情况下还有2种情况:(.wxapi.WXPayEntryActivity)<br>1.A为微信平台注册的包名,这时候支付后(不管成功与否),可以跳转到WXPayEntryActivity页面<br>1.B为微信平台注册的包名,这时候支付后(不管成功与否),只会回到支付前的页面,无法跳转到WXPayEntryActivity页面(反编译apk会发现WXPayEntryActivity的路径为A.wxapi.WXPayEntryActivity,而A并不是微信平台注册的包名)</p><p>第二种情况下也是还有2种情况:(A.wxapi.WXPayEntryActivity)<br>1.A为微信平台注册的包名,这时候支付后(不管成功与否),可以跳转到WXPayEntryActivity页面<br>1.B为微信平台注册的包名,这时候支付后(不管成功与否),只会回到支付前的页面,无法跳转到WXPayEntryActivity页面(因为这时候WXPayEntryActivity的路径为A.wxapi.WXPayEntryActivity,而A并不是微信平台注册的包名)</p><p>第三种情况下也是还有2种情况:(B.wxapi.WXPayEntryActivity)<br>1.A为微信平台注册的包名,这时候支付后(不管成功与否),无法跳转到WXPayEntryActivity页面(因为这时候WXPayEntryActivity的路径为B.wxapi.WXPayEntryActivity,而B并不是微信平台注册的包名)<br>1.B为微信平台注册的包名,这时候支付后(不管成功与否),可以跳转到WXPayEntryActivity页面</p><p>上面说的比较详细,其实我估计微信是通过你的AppId能在微信平台查到你的包名,然后startActivity的时候传递的是”包名.wxapi.WXPayEntryActivity”,如果路径错了他就查不到这个类所以就跳转失败</p><p>#####所以现在我的解决办法是,有几个productFlavors(我的每个productFlavors都有一个applicationId),就对应建立applicationId.wxapi包名的文件夹然后放入WXPayEntryActivity,建议可以写个类去实现IWXAPIEventHandler接口,比如这个实现IWXAPIEventHandler接口的类名叫AClass,然后你的几个wxapi包下建立WXPayEntryActivity继承AClass就可以了,AClass的实现直接拷贝之前的WXPayEntryActivity里面的代码就行,继承AClass的子类里面不需要任何代码</p><p>#####然后我再贴一下WXPayEntryActivity类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class WXPayEntryActivity extends Activity implements IWXAPIEventHandler &#123;</span><br><span class="line"></span><br><span class="line">private static final String TAG = &quot;MicroMsg.SDKSample.WXPayEntryActivity&quot;;</span><br><span class="line"></span><br><span class="line">private IWXAPI api;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.pay_result);</span><br><span class="line">api = WXAPIFactory.createWXAPI(this, null);</span><br><span class="line">//这里可以不注册appId</span><br><span class="line">api.handleIntent(getIntent(), this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onNewIntent(Intent intent) &#123;</span><br><span class="line">super.onNewIntent(intent);</span><br><span class="line">setIntent(intent);</span><br><span class="line">api.handleIntent(intent, this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onReq(BaseReq req) &#123;</span><br><span class="line">Log.e(&quot;onReq:&quot;, &quot;req=&quot; + req);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onResp(final BaseResp resp) &#123;</span><br><span class="line">Log.d(&quot;resp:&quot;, &quot;code=&quot; + resp.errCode + &quot;,str=&quot; + resp.errStr);</span><br><span class="line">if (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) &#123;</span><br><span class="line">switch (resp.errCode) &#123;</span><br><span class="line">case 0: &#123;</span><br><span class="line">Toast.makeText(WXPayEntryActivity.this, &quot;支付成功&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case -1: &#123;</span><br><span class="line">Toast.makeText(WXPayEntryActivity.this, &quot;发生错误\t可能的原因：签名错误、未注册APPID、项目设置APPID不正确、注册的APPID与设置的不匹配、其他异常等。&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case -2: &#123;</span><br><span class="line">Toast.makeText(WXPayEntryActivity.this, &quot;用户取消支付&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 自定义 DialogFragment 宽度问题</title>
      <link href="/2018/02/07/Android-%E8%87%AA%E5%AE%9A%E4%B9%89-DialogFragment-%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/07/Android-%E8%87%AA%E5%AE%9A%E4%B9%89-DialogFragment-%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>转载:<a href="http://blog.csdn.net/zhyh1986/article/details/48655885" target="_blank" rel="noopener">http://blog.csdn.net/zhyh1986/article/details/48655885</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fragment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>360插件框架RePlugin的坑</title>
      <link href="/2018/02/07/360%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6RePlugin%E7%9A%84%E5%9D%91/"/>
      <url>/2018/02/07/360%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6RePlugin%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>6月30号360新开源了一个插件开发框架RePlugin,然而文档不全,根据360的文档你做出来的项目一编译就是一大堆错误,因为很多需要配置的东西在360的插件开发文档里根本就没有,我在这里记录一下给需要的人<br><a id="more"></a></p><p>####1.<a href="https://github.com/Qihoo360/RePlugin/wiki/主程序接入指南" target="_blank" rel="noopener">https://github.com/Qihoo360/RePlugin/wiki/主程序接入指南</a><br>在这里的第一步 <strong>[添加 RePlugin Host Gradle 依赖]</strong>之前还有一步,文档并没有写,就是在项目根目录的 <strong>build.gradle</strong>中的<strong>buildscript</strong>和<strong>allprojects</strong>的下面添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">    url  &quot;https://dl.bintray.com/qihoo360/replugin&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>否则框架所需要的资源根本找不到,完整配置类似如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url  &quot;https://dl.bintray.com/qihoo360/replugin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.1.3&apos;</span><br><span class="line">        classpath &apos;com.qihoo360.replugin:replugin-host-gradle:2.1.0&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url  &quot;https://dl.bintray.com/qihoo360/replugin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####2.还是在<a href="https://github.com/Qihoo360/RePlugin/wiki/主程序接入指南" target="_blank" rel="noopener">https://github.com/Qihoo360/RePlugin/wiki/主程序接入指南</a> 还有一步也没有写,必须在你的宿主Module的assets下面增加plugins文件夹,即使里面没有插件文件也要创建该文件夹,否则会出现以下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error:Execution failed for task &apos;:app:processDebugResources&apos;.</span><br><span class="line">&gt; /Users/xxx/Documents/WorkSpace/WorkSpaceAndroid/TestRePlugin/app/src/main/assets/plugins</span><br></pre></td></tr></table></figure></p><p>添加了这个文件夹后编译会自动出现plugins-builtin.json文件</p><p>####3.LocalBroadcastManager类找不到的错误<br>你的程序需要添加v4包,因为插件框架内部使用到了v4包的LocalBroadcastManager类</p><p>####4.Failed to apply plugin [id ‘replugin-plugin-gradle’]<br>在<a href="https://github.com/Qihoo360/RePlugin/wiki/插件接入指南" target="_blank" rel="noopener">https://github.com/Qihoo360/RePlugin/wiki/插件接入指南</a> 这里需要注意这几个地方:</p><p>######4.1.1 gradle版本必须是gradle-2.14.1-all,如果编译出现下图这样的错误<br><img src="http://upload-images.jianshu.io/upload_images/545982-73c4e051275ac484.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>那么你需要修改你的工程中的gradle-&gt;warpper-&gt;gradle-wrapper.properties文件的distributionUrl为https\://services.gradle.org/distributions/gradle-2.14.1-all.zip<br>比如下面这样的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Sun Jul 02 15:33:02 CST 2017</span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip</span><br></pre></td></tr></table></figure></p><p>######4.1.2 apply plugin: ‘replugin-plugin-gradle’这句话要放在build.gradle文件的末尾处<br>例如下面这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 25</span><br><span class="line">    buildToolsVersion &quot;26.0.0&quot;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.test.replugin.plugin&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 25</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.android.support:support-v4:25.3.0&apos;</span><br><span class="line">    compile &apos;com.qihoo360.replugin:replugin-plugin-lib:2.1.0&apos;</span><br><span class="line">&#125;</span><br><span class="line">apply plugin: &apos;replugin-plugin-gradle&apos;</span><br></pre></td></tr></table></figure><p><small>参考问题:<a href="https://github.com/Qihoo360/RePlugin/issues/53" target="_blank" rel="noopener">https://github.com/Qihoo360/RePlugin/issues/53</a></small></p><p>#####4.2 在<a href="https://github.com/Qihoo360/RePlugin/issues/43" target="_blank" rel="noopener">https://github.com/Qihoo360/RePlugin/issues/43</a> 这个问题中,作者说宿主和插件不能在同一个工程,否则编译不通过,会报上面的Failed to apply plugin [id ‘replugin-plugin-gradle’]错误,即使你的gradle配置全部正确也无法通过编译,本人测试发现确实是这样的,作者建议将插件和宿主放到同一个工程目录下（本质上仍然是两个工程），这样只需打开一个根目录，就能打开主程序 + 插件工程了。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Retrofit2的一些坑</title>
      <link href="/2018/02/07/Retrofit2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2018/02/07/Retrofit2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>现在都在说Retrofit2和RxJava2,作为一个程序猿自然不能落伍,然后就试用了一下,遇到一些坑,在这里记录一下<br><a id="more"></a></p><p>#####1.<br><figure class="highlight plain"><figcaption><span>closed```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">和</span><br><span class="line">```Caused by: java.lang.IllegalStateException: closed</span><br></pre></td></tr></table></figure></p><p>这两个异常今天研究了好几个小时…  网上都是说Response.body().string()方法不能调用2次,但是在我的代码里这个方法并没有调用2次,一个Response的ResponseBody属性我只调用了1次string()方法,后来终于发现,在我的判断里有不同的流程,其中一个流程就没有问题,然后发现流程A的Response我直接return了,但是流程B的Response我调用了它的body().string()方法,我判断了里面的返回结果字符串,发现如果没有错误就把这个流程B的Response对象return了,但是!!! 因为我return的这个Response已经被我调用过body().string()方法了,Retrofit2把结果返回上层应用的时候,在convert的时候(因为retrofit调用了addConverterFactory方法)就出错了,因为这个Response的ResponseBody属性已经close了,所以在返回的时候,需要一个新的Response,并设置其中的body为新的body,代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Response response = chain.proceed(newRequest);//执行新请求</span><br><span class="line">String responseString = response.body().string();</span><br><span class="line">//对responseString...执行一些判断之类的操作</span><br><span class="line">return response.newBuilder().body(ResponseBody.create(response.body().contentType(), responseString)).build();</span><br></pre></td></tr></table></figure></p><p>###注意:</p><blockquote><p>1.上面的这个问题,如果你添加了自己的log拦截器,在你的log拦截器里如果调用了Response的body属性的string()方法,那么返回的response对象你也要这么处理,否则在其他类里时候的时候,虽然response不是一个对象,但是里面的body是同一个对象(不信的可以debug查看log拦截器里面你返回的response的body属性内存地址和其他拦截器里同请求的这个response的body属性的内存地址),然后其他类调用response.body().string()的时候会报close错误,所以只要用到了response.body().string()方法,在返回这个response的时候就要像上面那样返回才可以避免close问题</p></blockquote><blockquote><p>2.如果不是string()方法,你用的是response.body().bytes()方法再转字符串是一样的,在方法内部都close了,所以仍然需要像上面那样处理</p></blockquote><p>#####2.<br><figure class="highlight plain"><figcaption><span>by: java.lang.IllegalStateException: network interceptor xxx must call proceed() exactly once```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">和</span><br><span class="line">```io.reactivex.exceptions.OnErrorNotImplementedException: network interceptor xxx must call proceed() exactly once</span><br></pre></td></tr></table></figure></p><p>这是因为你的<code>OkHttpClient.Builder</code>调用的<code>addNetworkInterceptor</code>方法添加的拦截器,这种方式添加的拦截器里面的<code>Chain</code>只能调用一次<code>proceed</code>方法,如果想调用多次,你的拦截器就要用<code>addInterceptor</code>方法添加,就没问题了</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>method ID not in [0, 0xffff]: 65536解决办法</title>
      <link href="/2018/02/07/method-ID-not-in-0-0xffff-65536%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/07/method-ID-not-in-0-0xffff-65536%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>###配置方法数超过 64K 的应用<br><a id="more"></a><br>随着 Android 平台的持续成长，Android 应用的大小也在增加。当您的应用及其引用的库达到特定大小时，您会遇到构建错误，指明您的应用已达到 Android 应用构建架构的极限。早期版本的构建系统按如下方式报告这一错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Conversion to Dalvik format failed:</span><br><span class="line">Unable to execute dex: method ID not in [0, 0xffff]: 65536</span><br></pre></td></tr></table></figure></p><p>较新版本的 Android 构建系统虽然显示的错误不同，但指示的是同一问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trouble writing output:</span><br><span class="line">Too many field references: 131000; max is 65536.</span><br><span class="line">You may try using --multi-dex option.</span><br></pre></td></tr></table></figure></p><p>这些错误状况都会显示下面这个数字：65,536。这个数字很重要，因为它代表的是单个 Dalvik Executable (DEX) 字节码文件内的代码可调用的引用总数。本页介绍如何通过启用被称为 Dalvik 可执行文件分包的应用配置来越过这一限制，使您的应用能够构建并读取 Dalvik 可执行文件分包 DEX 文件。</p><p>###关于 64K 引用限制<br>Android 应用 (APK) 文件包含 <a href="https://source.android.com/devices/tech/dalvik/" target="_blank" rel="noopener">Dalvik</a> Executable (DEX) 文件形式的可执行字节码文件，其中包含用来运行您的应用的已编译代码。Dalvik Executable 规范将可在单个 DEX 文件内可引用的方法总数限制在 65,536，其中包括 Android 框架方法、库方法以及您自己代码中的方法。在计算机科学领域内，术语<a href="https://en.wikipedia.org/wiki/Kilo-" target="_blank" rel="noopener"><em>千（简称 K）</em></a>表示 1024（或 2^10）。由于 65,536 等于 64 X 1024，因此这一限制也称为“64K 引用限制”。</p><p>###Android 5.0 之前版本的 Dalvik 可执行文件分包支持<br>Android 5.0（API 级别 21）之前的平台版本使用 Dalvik 运行时来执行应用代码。默认情况下，Dalvik 限制应用的每个 APK 只能使用单个 classes.dex字节码文件。要想绕过这一限制，您可以使用 <a href="https://developer.android.com/tools/support-library/features.html#multidex" target="_blank" rel="noopener">Dalvik 可执行文件分包支持库</a>，它会成为您的应用主要 DEX 文件的一部分，然后管理对其他 DEX 文件及其所包含代码的访问。</p><blockquote><p><strong>注</strong>：如果您的项目配置时所面向的 Dalvik 可执行文件分包使用的是 minSdkVersion 20或更低版本，并且您将其部署到运行 Android 4.4（API 级别 20）或更低版本的目标设备上，则 Android Studio 会停用 <a href="https://developer.android.com/tools/building/building-studio.html#instant-run" target="_blank" rel="noopener">Instant Run</a>。</p></blockquote><p>###Android 5.0 及更高版本的 Dalvik 可执行文件分包支持<br>Android 5.0（API 级别 21）及更高版本使用名为 ART 的运行时，后者原生支持从 APK 文件加载多个 DEX 文件。ART 在应用安装时执行预编译，扫描 classesN.dex 文件，并将它们编译成单个 .oat 文件，供 Android 设备执行。因此，如果您的 minSdkVersion 为 21 或更高值，则不需要 Dalvik 可执行文件分包支持库。<br>如需了解有关 Android 5.0 运行时的详细信息，请参阅 <a href="https://source.android.com/devices/tech/dalvik/art.html" target="_blank" rel="noopener">ART 和 Dalvik</a>。</p><blockquote><p><strong>注</strong>：如果将应用的 minSdkVersion 设置为 21 或更高值，使用 <a href="https://developer.android.com/tools/building/building-studio.html#instant-run" target="_blank" rel="noopener">Instant Run</a> 时，Android Studio 会自动将应用配置为进行 Dalvik 可执行文件分包。由于 Instant Run 仅适用于调试版本的应用，您仍需配置发布构建进行 Dalvik 可执行文件分包，以规避 64K 限制。</p></blockquote><p>###规避 64K 限制<br>在将您的应用配置为支持使用 64K 或更多方法引用之前，您应该采取措施减少应用代码调用的引用总数，包括由您的应用代码或包含的库定义的方法。下列策略可帮助您避免达到 DEX 引用限制：<br><strong>检查您的应用的直接和传递依赖项</strong> - 确保您在应用中使用任何庞大依赖库所带来的好处大于为应用添加大量代码所带来的弊端。一种常见的反面模式是，仅仅为了使用几个实用方法就在应用中加入非常庞大的库。减少您的应用代码依赖项往往能够帮助您规避 dex 引用限制。<br><strong>通过 ProGuard 移除未使用的代码</strong> - 为您的版本构建<a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">启用代码压缩</a>以运行 ProGuard。启用压缩可确保您交付的 APK 不含有未使用的代码。</p><p>使用这些技巧使您不必在应用中启用 Dalvik 可执行文件分包，同时还会减小 APK 的总体大小。</p><p>###配置您的应用进行 Dalvik 可执行文件分包<br>将您的应用项目设置为使用 Dalvik 可执行文件分包配置需要对您的应用项目进行以下修改，具体取决于应用支持的最低 Android 版本。</p><p>如果您的 minSdkVersion 设置为 21 或更高值，您只需在模块级 build.gradle 文件中将 multiDexEnabled 设置为 true，如此处所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        minSdkVersion 21 </span><br><span class="line">        targetSdkVersion 25</span><br><span class="line">        multiDexEnabled true</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果您的 minSdkVersion 设置为 20 或更低值，则您必须按如下方式使用 <a href="https://developer.android.com/tools/support-library/features.html#multidex" target="_blank" rel="noopener">Dalvik 可执行文件分包支持库</a>：<br>修改模块级 build.gradle 文件以启用 Dalvik 可执行文件分包，并将 Dalvik 可执行文件分包库添加为依赖项，如此处所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        minSdkVersion 15 </span><br><span class="line">        targetSdkVersion 25</span><br><span class="line">        multiDexEnabled true</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  compile &apos;com.android.support:multidex:1.0.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据是否要替换 <a href="https://developer.android.com/reference/android/app/Application.html" target="_blank" rel="noopener">Application</a> 类，执行以下操作之一：<br>如果您<em>没有</em>替换 <a href="https://developer.android.com/reference/android/app/Application.html" target="_blank" rel="noopener">Application</a> 类，请编辑清单文件，按如下方式设置 <application>标记中的 android:name：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.example.myapp&quot;&gt;</span><br><span class="line">    &lt;application</span><br><span class="line">            android:name=&quot;android.support.multidex.MultiDexApplication&quot; &gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></application></p><p>如果您替换了 <a href="https://developer.android.com/reference/android/app/Application.html" target="_blank" rel="noopener">Application</a> 类，请按如下方式对其进行更改以扩展 <a href="https://developer.android.com/reference/android/support/multidex/MultiDexApplication.html" target="_blank" rel="noopener">MultiDexApplication</a><br>（如果可能）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MyApplication extends MultiDexApplication &#123; ... &#125;</span><br></pre></td></tr></table></figure></p><p>或者，如果您替换了 <a href="https://developer.android.com/reference/android/app/Application.html" target="_blank" rel="noopener">Application</a> 类，但无法更改基本类，则可以改为替换 <a href="https://developer.android.com/reference/android/content/ContextWrapper.html#attachBaseContext(android.content.Context" target="_blank" rel="noopener">attachBaseContext()</a>) 方法并调用 <a href="https://developer.android.com/reference/android/support/multidex/MultiDex.html#install(android.content.Context" target="_blank" rel="noopener">MultiDex.install(this)</a>) 来启用 Dalvik 可执行文件分包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MyApplication extends SomeOtherApplication &#123;</span><br><span class="line">  @Override</span><br><span class="line">  protected void attachBaseContext(Context base) &#123;</span><br><span class="line">     super.attachBaseContext(context);</span><br><span class="line">     Multidex.install(this);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构建应用后，Android 构建工具会根据需要构建主 DEX 文件 (classes.dex) 和辅助 DEX 文件（classes2.dex 和 classes3.dex 等）。然后，构建系统会将所有 DEX 文件打包到您的 APK 中。</p><p>运行时，Dalvik 可执行文件分包 API 使用特殊的类加载器来搜索适用于您的方法的所有 DEX 文件（而不是仅在主 classes.dex 文件中搜索）。</p><p>原文:<a href="https://developer.android.com/studio/build/multidex.html#keep" target="_blank" rel="noopener">https://developer.android.com/studio/build/multidex.html#keep</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android中判断服务或者进程是否存在</title>
      <link href="/2018/02/07/android%E4%B8%AD%E5%88%A4%E6%96%AD%E6%9C%8D%E5%8A%A1%E6%88%96%E8%80%85%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/"/>
      <url>/2018/02/07/android%E4%B8%AD%E5%88%A4%E6%96%AD%E6%9C%8D%E5%8A%A1%E6%88%96%E8%80%85%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</url>
      <content type="html"><![CDATA[<p>1.判断进程是否存在<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否在主进程,这个方法判断进程名或者pid都可以,如果进程名一样那pid肯定也一样</span><br><span class="line"> *</span><br><span class="line"> * @return true:当前进程是主进程 false:当前进程不是主进程</span><br><span class="line"> */</span><br><span class="line">public boolean isUIProcess() &#123;</span><br><span class="line">ActivityManager am = ((ActivityManager) getSystemService(Context.ACTIVITY_SERVICE));</span><br><span class="line">List&lt;ActivityManager.RunningAppProcessInfo&gt; processInfos = am.getRunningAppProcesses();</span><br><span class="line">String mainProcessName = getPackageName();</span><br><span class="line">int myPid = android.os.Process.myPid();</span><br><span class="line">for (ActivityManager.RunningAppProcessInfo info : processInfos) &#123;</span><br><span class="line">if (info.pid == myPid &amp;&amp; mainProcessName.equals(info.processName)) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.判断服务是否存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断service是否已经运行</span><br><span class="line"> * 必须判断uid,因为可能有重名的Service,所以要找自己程序的Service,不同进程只要是同一个程序就是同一个uid,个人理解android系统中一个程序就是一个用户</span><br><span class="line"> * 用pid替换uid进行判断强烈不建议,因为如果是远程Service的话,主进程的pid和远程Service的pid不是一个值,在主进程调用该方法会导致Service即使已经运行也会认为没有运行</span><br><span class="line"> * 如果Service和主进程是一个进程的话,用pid不会出错,但是这种方法强烈不建议,如果你后来把Service改成了远程Service,这时候判断就出错了</span><br><span class="line"> *</span><br><span class="line"> * @param className Service的全名,例如PushService.class.getName()</span><br><span class="line"> * @return true:Service已运行 false:Service未运行</span><br><span class="line"> */</span><br><span class="line">public boolean isServiceExisted(String className) &#123;</span><br><span class="line">ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">List&lt;ActivityManager.RunningServiceInfo&gt; serviceList = am.getRunningServices(Integer.MAX_VALUE);</span><br><span class="line">int myUid = android.os.Process.myUid();</span><br><span class="line">for (ActivityManager.RunningServiceInfo runningServiceInfo : serviceList) &#123;</span><br><span class="line">if (runningServiceInfo.uid == myUid &amp;&amp; runningServiceInfo.service.getClassName().equals(className)) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>#注意:<br>上面判断Service是否存在,用的uid和Service的类全名,网上我查到的资料,全部是用的pid,在Service和主进程是一个进程的时候,pid没有问题,但是如果Service是远程Service,和主进程就不是一个进程了,这时候用pid和Service的类全名进行判断就会判断错误</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Service </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GridLayout子控件超出屏幕的解决办法</title>
      <link href="/2018/02/07/GridLayout%E5%AD%90%E6%8E%A7%E4%BB%B6%E8%B6%85%E5%87%BA%E5%B1%8F%E5%B9%95%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/07/GridLayout%E5%AD%90%E6%8E%A7%E4%BB%B6%E8%B6%85%E5%87%BA%E5%B1%8F%E5%B9%95%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>GridLayout的具体使用方法不赘述,这里主要解决子控件超出屏幕的解决办法,在项目用使用GridLayout的时候,发现EditText超出屏幕,解决办法是这一列的EditText都加上下面的属性,如果这一列某一个没有加上下面的属性,那么这一列所有的EditText仍然超出屏幕<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">android:layout_gravity=&quot;fill_horizontal&quot;</span><br></pre></td></tr></table></figure></p><p>加上这个属性,就可以充满屏幕而不是超出屏幕了<br>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;GridLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:columnCount=&quot;2&quot;&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_gravity=&quot;right&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:text=&quot;标题1:&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_gravity=&quot;fill_horizontal&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_gravity=&quot;right&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:text=&quot;标题2:&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_gravity=&quot;fill_horizontal&quot;/&gt;</span><br><span class="line">    &lt;/GridLayout&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android后台保活实践总结：即时通讯应用无法根治的“顽疾”</title>
      <link href="/2018/02/07/Android%E5%90%8E%E5%8F%B0%E4%BF%9D%E6%B4%BB%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93%EF%BC%9A%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E6%A0%B9%E6%B2%BB%E7%9A%84%E2%80%9C%E9%A1%BD%E7%96%BE%E2%80%9D/"/>
      <url>/2018/02/07/Android%E5%90%8E%E5%8F%B0%E4%BF%9D%E6%B4%BB%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93%EF%BC%9A%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E6%A0%B9%E6%B2%BB%E7%9A%84%E2%80%9C%E9%A1%BD%E7%96%BE%E2%80%9D/</url>
      <content type="html"><![CDATA[<blockquote><p>前言<br><a id="more"></a></p></blockquote><p>Android进程和Service的保活，是困扰Android开发人员的一大顽疾。因涉及到省电和内存管理策略，各厂商基于自家的理解，在自已ROOM发布于都对标准Android发行版作为或多或少的改动，使得应用层程序在处理进程和Service保活问题上变的异常复杂，且很难兼容，因为说不定哪款手机或者哪个版本的省电策略发生改变，那么随之而来的就是进程和Service保活的差异。</p><p>在应用场景上，由于即时通讯应用（包括IM聊天应用、消息推送服务等）为了保证消息的全时、实时送达能力，必须要实现进程或Service的保活。而就这一看似不起眼的问题，实际处理起来，因为众多Android手机和Android系统版本的差异，让问题的处理充满了不确定性。</p><p>本文基于作者的实践以及相关资料的整理，总结了自已对Android进程和Service保活的理解，希望能为你的应用开发带来启发。</p><blockquote><p>概述</p></blockquote><p>近期做了一个Android项目，涉及到了后台进程和Service保活的问题，网上找了很多资料，基本的保活方法都测试了。结果是：不同的手机，不同的Android版本保活效果各有差异。最难绕过的是个厂商对“后台程序保活”管理。</p><p>本文主要把相应的实践结果和保活方法进行总结。然而，因笔者可用的测试真机有限，可能存有不完整的地方，还请及时提出指正并补充，大家共同进步。</p><blockquote><p>手机QQ、微信这样的大型IM是如何解决保活问题的？</p></blockquote><p>以小米手机为例，MIUI的神隐模式让很多IM和推送开发同行纠结不已：在MIUI深度休眠之后,默认会彻底断开后台应用的socket。但微信、QQ这样的应用，MIUI官方的帖子说了:给这2个应用特殊照顾。好吧，特殊照顾，普通的APP只能继续折腾了。（关于MIUI的神隐模式的讨论，见此贴的回复：<br><a href="http://www.52im.net/thread-354-1-1.html" target="_blank" rel="noopener">http://www.52im.net/thread-354-1-1.html</a>）</p><blockquote><p>本文实践涉及到的真机型号和版本</p></blockquote><p>手机：三星9100-4.1.2，三星9300-4.3，华为G730-4.1.2，华为TL00H-EMUI3.1(android 5.1.1)，魅族MX4-Flyme4.2.8.2c(android 4.4.2)。</p><p>手头能用的测试机就这些了。主要测试的service是一个最基本的service，在相应的生命周期的触发函数上做了输出。测试时都没有添加到后台保护中，注：三星的机子没找到有后台保护设置的地方。</p><blockquote><p>为什么我们的后台进程/Service会被结束掉？</p></blockquote><p>我想到的是有三个方面：</p><ol><li>Android系统内存回收机制；</li><li>各厂商对后台程序的一个管理制度（就是允许程序后台运行那个）；</li><li>第三方软件的清理(360什么的)。</li></ol><p>其中有的后台程序保护把程序结束的同时会把程序弄成停止状态，导致无法接收广播！</p><blockquote><p>我们的保活方案有哪些？</p></blockquote><p>#####1.控制onStartCommand函数的返回值：<br>我对这个函数的理解是：当服务被异常终止时，是否重启服务?有些文章里面在用这个做保活时，修改的是flag，在我实际测试中是无效。有效的做法是直接返回参数。另外默认的flags值为0，是START_STICKY_COMPATIBILITY。</p><p>######具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">publicintonStartCommand(Intent intent,intflags,intstartId) &#123;</span><br><span class="line">    // TODO Auto-generated method stub</span><br><span class="line">    return START_STICKY;</span><br><span class="line">    //return super.onStartCommand(intent, flags, startId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>######测试结果：<br>魅族的机子无效，不管默认还是修改参数，在DDMS里面直接结束进程后都不会重启服务。其它三台机子（9100没测）：默认参数的情况下就会重启服务，return START_STICKY 会重启，return START_NOT_STICKY 不会重启。</p><p>另外：用360一键清理，或者360超级ROOT的手机优化，会杀死进程，过会儿还是会重启，只是会慢很多，大概是在排队重启服务。</p><p>#####2.在service 的onDestory里面重启服务：<br>这个在所有能触发onDestory的情况下都是有效的。4台测试机都测试过。直接startService 或者发送广播重启都可以 。</p><p>但能触发onDestory的情况，我不知道内存回收会不会触发。另外两种情况（2，3）是不触发的。我的测试方法是在“设置”-&gt; 应用管理-&gt; 正在运行-&gt; 停止服务。（这个是正常停止服务，会触发onDestory，所以上面的onStartCommand效果不会触发。）</p><p>#####3.提高服务的优先级：<br>这个主要是针对第一种kill服务的情况，内存回收机制。由于这个测试比较难搭建。360清理什么把后台的进程都杀的，体现不出优先级这样的概念。我的建议是能提高就提高，下面几个实验。</p><p>######[1] 前台service：<br>创建一个通知使自己成为前台service<br>测试结果：<br>360一键清理和手机优化，不会把该service结束掉。</p><p>######[2] 对于后台保护：<br>华为G730不结束service，魅族和华为TL00H都会结束service。通知栏的保活效果还是可以的，一般的应用要求基本能满足了。</p><p>######[3] 若有root权限：<br>android:persistent=”true”,并放入system/app中<br>测试结果：<br>效果一般，三星9100上用360等清理工具杀不掉进程，在华为G730上没什么效果.（这个测试跟onStartCommand有点干扰）。</p><p>#####4.守护进程：<br>双服务：360会同时杀掉两个服务，分两个apk也一样。native守护进程：360不会杀掉native的守护进程，但在魅族和华为TL00H中待机一段时间后还是会被杀掉。</p><p><strong>结论和待续：</strong></p><ol><li>一般的应用添加到后台保护进程后，改个onStartCommand返回值，再加个通知。基本上大部分都能保活了。</li><li>双服务我觉得没有native守护进程来的好，虽然360，微信什么的都有几个进程服务，但如果不添加到后台保活的话，效果一样不能保活，也会进入停止状态。</li><li>但是.360手机助手会创建双natice守护进程做相互的看守。存活的效果会高一点点。“没添加到后台保活”一般只会杀一次，（魅族是屏幕关闭后5分钟，华为TL00H是屏幕关闭时）。</li></ol><p>附个native守护进程：利用socket来判断服务是否存在，需要在被保活的服务里创建一个监听socket。调试信息会在SD卡目录下创建一个daemon.log。使用方法：NDKFork port包名/.服务名。具体下载链接：<a href="http://download.csdn.net/detail/pvlking/9412815" target="_blank" rel="noopener">http://download.csdn.net/detail/pvlking/9412815</a></p><blockquote><p>Android应用实现保活的基本原理总结</p></blockquote><p>都是通过双进程互拉以及设置进程的重要性，除非你root后，把自己的进程设置成系统进程。</p><p><strong>互拉的方式有很多种：</strong></p><ol><li>可以通过监听系统广播来把自己拉起来</li><li>可以多个app相互拉</li><li>可以把自己的服务搞成前台服务</li><li>在service的onstart方法里返回 STATR_STICK</li><li>添加Manifest文件属性值为android:persistent=“true”</li><li>覆写Service的onDestroy方法</li><li>服务互相绑定</li><li>设置闹钟，定时唤醒</li><li>自己的app在native层fork一个子进程来与主进程互拉。</li></ol><p>综上所述，总结下来就是，目前实现Android后台保活没有完美实现，只能针对不同的机型综合使用上面列举的方法，同时祈祷自已APP的用户不要遇到奇葩机型的保活问题。</p><blockquote><p>推荐一个开源的解决方案</p></blockquote><p><strong>源码托管地址</strong><br>源码托管地址是：<a href="https://github.com/52im/MarsDaemon" target="_blank" rel="noopener">https://github.com/52im/MarsDaemon</a>。</p><p><strong>实现原理</strong><br><strong>原理：</strong>使用Jni,在 c端 fork进程，检测Service是否存活，若Service已被杀死，则进行重启Service.  至于检测方式，可以轮询获取子进程Pid,若为1, 则说明子进程被Init进程所领养,已经成为了孤儿进程.    但是这种方式比较消耗电量，并且由于不同手机系统定制的改变，当应用被强制停止时，父进程并不一定被真正杀死，因此在一些特定机型上是无法通过此方式进行判断. 这里推荐使用liunx socket的方式进行类似心跳包的检测，并且当触发检测Service是否被杀死之前，需要判断应用是否已经被卸载，如果应用已经被卸载，则不再进行检测Service行为，直接调用exit(0)退出子进程，避免浪费系统资源和消耗电量.</p><p><strong>注意:</strong> 目前在Android 5.0系统上会把fork出来的进程放到一个进程组里， 当程序主进程挂掉后，也会把整个进程组杀掉,因此用fork的方式也无法在Android5.0及以上系统实现守护进程. 这个是系统层面的限制，当然也是为了优化整个的系统环境,守护进程给手机带来的体验并不好</p><p><strong>具体见源码：</strong><a href="http://androidxref.com/5.0.0_r2/xref/frameworks/base/services/core/java/com/android/server/am/ProcessRecord.java" target="_blank" rel="noopener">http://androidxref.com/5.0.0_r2/ … /ProcessRecord.java</a></p><p><img src="http://upload-images.jianshu.io/upload_images/545982-d765c5e38993d112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>好消息：</strong><br>Android5.0 以上目前已在 <a href="https://github.com/52im/MarsDaemon" target="_blank" rel="noopener">https://github.com/52im/MarsDaemon</a> 中被黑科技攻克，部分机型可能无法起到作用，但思路很值得借鉴，代码结构也不错, 具体方案请见源码哦。</p><p>原文:<a href="http://www.52im.net/thread-429-1-1.html" target="_blank" rel="noopener">http://www.52im.net/thread-429-1-1.html</a><br>因为原文已经无法打开,所以将内容复制到了这里</p><hr><p>在android5.0及以上,谷歌出了一个JobService,经测试可以在原生系统里定时执行任务,所以在三星这种机器上,可以用JobService拉起自己的Service</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android 技巧 —— Debug 判断不再用 BuildConfig</title>
      <link href="/2018/02/07/Android-%E6%8A%80%E5%B7%A7-%E2%80%94%E2%80%94-Debug-%E5%88%A4%E6%96%AD%E4%B8%8D%E5%86%8D%E7%94%A8-BuildConfig/"/>
      <url>/2018/02/07/Android-%E6%8A%80%E5%B7%A7-%E2%80%94%E2%80%94-Debug-%E5%88%A4%E6%96%AD%E4%B8%8D%E5%86%8D%E7%94%A8-BuildConfig/</url>
      <content type="html"><![CDATA[<p>Android 开发中一般会通过 BuildConfig.DEBUG 判断是否是 Debug 模式，从而做一些在 Debug 模式才开启的特殊操作，比如打印日志。这样好处是不用在发布前去主动修改，因为这个值在 Debug 模式下为 true，Release 模式下为 false。<br><a id="more"></a></p><p>#####1. 问题<br>如果应用只有一个 Module 没有问题，Debug 模式下 BuildConfig.DEBUG 会始终为 true。如果现在有两个 Module，分别为 App 和 Lib，且 App 依赖 Lib，在 Lib 内有工具类 LogUtils，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package cn.trinea.android.lib.util;</span><br><span class="line"> </span><br><span class="line">import android.util.Log;</span><br><span class="line">import cn.trinea.android.lib.util.BuildConfig;</span><br><span class="line"> </span><br><span class="line">public class LogUtils &#123;</span><br><span class="line"> </span><br><span class="line">    public static void d(String log) &#123;</span><br><span class="line">        if (BuildConfig.DEBUG) &#123;</span><br><span class="line">            Log.d(&quot;trinea-debug&quot;, log);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们在 App Module 内调用 LogUtils 时我们会发现始终无法打印日志，因为上面的 BuildConfig.DEBUG 会始终为 false。为什么呢？</p><p>#####2. 原因<br>BuildConfig.java 是编译时自动生成的，并且每个 Module 都会生成一份，以该 Module 的 packageName 为 BuildConfig.java 的 packageName。所以如果你的应用有多个 Module 就会有多个 BuildConfig.java 生成，而上面的 Lib Module import 的是自己的 BuildConfig.java，编译时被依赖的 Module 默认会提供 Release 版给其他 Module 或工程使用，这就导致该 BuildConfig.DEBUG 会始终为 false。</p><p>#####3. 解决方案<br>根据上面分析的原因，目前我们有两个思路：<br>(1) 始终调用最终运行的 Module 的 BuildConfig，因为它没有被任何其他 Module 依赖，所以 BuildConfig.DEBUG 值会准确。<br>(2) 让被依赖的 Module 提供除 Release 版以外的其他版本。</p><p>3.1 解决方案一：使用其他的 BuildConfig.java<br>如果 Lib Module 中能够 import 到外层真正运行 App 的 BuildConfig 就 ok 了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package cn.trinea.android.lib.util;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * Utils for App</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;&#123;@link #syncIsDebug(Context)&#125; Should be called in module Application&lt;/li&gt;</span><br><span class="line"> * &lt;/ul&gt;</span><br><span class="line"> * Created by Trinea on 2017/3/9.</span><br><span class="line"> */</span><br><span class="line">public class AppUtils &#123;</span><br><span class="line"> </span><br><span class="line">    private static Boolean isDebug = null;</span><br><span class="line"> </span><br><span class="line">    public static boolean isDebug() &#123;</span><br><span class="line">        return isDebug == null ? false : isDebug.booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * Sync lib debug with app&apos;s debug value. Should be called in module Application</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     */</span><br><span class="line">    public static void syncIsDebug(Context context) &#123;</span><br><span class="line">        if (isDebug == null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                String packageName = context.getPackageName();</span><br><span class="line">                Class buildConfig = Class.forName(packageName + &quot;.BuildConfig&quot;);</span><br><span class="line">                Field DEBUG = buildConfig.getField(&quot;DEBUG&quot;);</span><br><span class="line">                DEBUG.setAccessible(true);</span><br><span class="line">                isDebug = DEBUG.getBoolean(null);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                // Do nothing</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过反射得到真正执行的 Module 的 BuildConfig，在自己的 Application 内调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppUtils.syncIsDebug(getApplicationContext());</span><br></pre></td></tr></table></figure></p><p>这样看起来达到目的了。</p><p>但仔细想想会发现这种解决方案还是有问题，因为 BuildConfig.java 的 packageName 是 Module 的 Package Name，即 AndroidManifest.xml 中的 package 属性，而 context.getPackageName() 得到的是应用的 applicationId，这个 applicationId 通过 build.gradle 是可以修改的。所以当 build.gradle 中的 applicationId 与 AndroidManifest.xml 中的 package 属性不一致时，上面的反射查找类路径便会出错。</p><p>PS：这种方案还有个变种就是通过 android.app.ActivityThread.currentPackageName 得到包名，从而省去传递 Context 初始化的步骤，但依然有 applicationId 被修改后类查找不到类似的问题。</p><p>#####3.2 解决方案二：被依赖的 Module 提供其他版本<br>让被依赖的 Module 提供除 Release 版以外的其他版本，这种方案需要将所有被依赖 library 中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    publishNonDefault true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示该 Module 打包时会同时打包其他版本，包括 Debug 版。并且需要在 App Module 中将其依赖的 library 如下逐个添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    releaseCompile project(path: &apos;:library&apos;, configuration: &apos;release&apos;)</span><br><span class="line">    debugCompile project(path: &apos;:library&apos;, configuration: &apos;debug&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示依赖不同版本的依赖 Module。<br>然而这种方式所有 Module 配置都需要修改，侵入性太强。</p><p>#####3.3 最终解决方案：使用 ApplicationInfo.FLAG_DEBUGGABLE<br>既然 BuildConfig 的方式行不通，我们反编译 Debug 包和 Release 包对比看看有没有其他的区别，会发现他们 AndroidManifest.xml 中 application 节点的 android:debuggable 值是不同的。Debug 包值为 true，Release 包值为 false，这是编译自动修改的。所以我们考虑通过 ApplicationInfo 的这个属性去判断是否是 Debug 版本，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package cn.trinea.android.lib.util;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * Utils for App</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;&#123;@link #syncIsDebug(Context)&#125; Should be called in module Application&lt;/li&gt;</span><br><span class="line"> * &lt;/ul&gt;</span><br><span class="line"> * Created by Trinea on 2017/3/9.</span><br><span class="line"> */</span><br><span class="line">public class AppUtils &#123;</span><br><span class="line"> </span><br><span class="line">    private static Boolean isDebug = null;</span><br><span class="line"> </span><br><span class="line">    public static boolean isDebug() &#123;</span><br><span class="line">        return isDebug == null ? false : isDebug.booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * Sync lib debug with app&apos;s debug value. Should be called in module Application</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     */</span><br><span class="line">    public static void syncIsDebug(Context context) &#123;</span><br><span class="line">        if (isDebug == null) &#123;</span><br><span class="line">            isDebug = context.getApplicationInfo() != null &amp;&amp;</span><br><span class="line">                    (context.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在自己的 Application 内调用进行初始化，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppUtils.syncIsDebug(getApplicationContext());</span><br></pre></td></tr></table></figure></p><p>这样以后调用 AppUtils.isDebug() 即可判断是否是 Debug 版本，比如在上面的 LogUtils 中。同时适用于 Module 是 Lib 和 applicationId 被修改的情况，比 BuildConfig.DEBUG 靠谱的多。</p><p>这个方案有个注意事项就是自己 App Module 中不能主动设置 android:debuggable，否则无论 Debug 还是 Release 版会始终是设置的值。当然本身就没有自动设置的必要。</p><p>原文地址:<a href="http://www.trinea.cn/android/android-whether-debug-mode-why-buildconfig-debug-always-false/" target="_blank" rel="noopener">http://www.trinea.cn/android/android-whether-debug-mode-why-buildconfig-debug-always-false/</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac下创建adb命令</title>
      <link href="/2018/02/07/mac%E4%B8%8B%E5%88%9B%E5%BB%BAadb%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/02/07/mac%E4%B8%8B%E5%88%9B%E5%BB%BAadb%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>ln /…sdk/…/adb /usr/local/bin</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决“Cannot merge new index xxx into a non-jumbo instruction”的问题</title>
      <link href="/2018/02/07/%E8%A7%A3%E5%86%B3%E2%80%9CCannot-merge-new-index-xxx-into-a-non-jumbo-instruction%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/07/%E8%A7%A3%E5%86%B3%E2%80%9CCannot-merge-new-index-xxx-into-a-non-jumbo-instruction%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>xxx一般是一个整数，比如66345等，从这个提示看，和Dex方法超过64K的限制一样，应该是同一个问题。不过App已经解决了这个64K方法的问题，怎么还会提示呢。<br><a id="more"></a><br>从提上看，是一个non-jumbo，让我想到了Dex的jumbo模式，这是一个用来配置制定该Dex是不是一个巨大的Dex的。报错的日志里显示是一个模块，从这可以推断出基本的问题：该模块需要生成一个Dex放进AAR包里给App使用，现在这个Dex生成不了啦，提示太大，这个是根本原因，所以只要解决了这个就可以了。<br>那么以前为什么不会出现这个问题呢，我们从git提交的历史来看，发现昨天的需求新增了一个第三方包，导致该模块的方法变多，超过了限制，所以今天就有了这个错误的提示。。<br>既然知道了原因，那么就很好解决了。<br>使用Gradle构建的，在模块的build.gradle里配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  dexOptions &#123;</span><br><span class="line">    jumboMode true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是使用Eclipse+Ant构建的，在project.properties文件中增加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dex.force.jumbo=true</span><br></pre></td></tr></table></figure></p><p>就可以解决如上问题了。。<br>关于超过64K方法分Dex的解决办法可以参考官方的<a href="https://developer.android.com/studio/build/multidex.html" target="_blank" rel="noopener">Configure Apps with Over 64K Methods</a>这篇文章。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android中xml tools属性详解</title>
      <link href="/2018/02/07/android%E4%B8%ADxml-tools%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/02/07/android%E4%B8%ADxml-tools%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><strong>第一部分</strong><br><a id="more"></a><br>安卓开发中，在写布局代码的时候，ide可以看到布局的预览效果。<br><img src="http://upload-images.jianshu.io/upload_images/545982-83ed2d3d035faddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>但是有些效果则必须在运行之后才能看见，比如这种情况：TextView在xml中没有设置任何字符，而是在activity中设置了text。因此为了在ide中预览效果，你必须在xml中为TextView控件设置android:text属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">  android:id=&quot;@+id/text_main&quot;</span><br><span class="line">  android:layout_width=&quot;match_parent&quot;</span><br><span class="line">  android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">  android:textAppearance=&quot;@style/TextAppearance.Title&quot;</span><br><span class="line">  android:layout_margin=&quot;@dimen/main_margin&quot;</span><br><span class="line">  android:text=&quot;I am a title&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>一般我们在这样做的时候都告诉自己，没关系，等写完代码我就把这些东西一并删了。但是你可能会忘，以至于在你的最终产品中也会有这样的代码。</p><p>用tools吧，别做傻事<br>以上的情况是可以避免的，我们使用tools命名空间以及其属性来解决这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br></pre></td></tr></table></figure></p><p>tools可以告诉Android Studio，哪些属性在运行的时候是被忽略的，只在设计布局的时候有效。比如我们要让android:text属性只在布局预览中有效可以这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line"> android:id=&quot;@+id/text_main&quot;</span><br><span class="line"> android:layout_width=&quot;match_parent&quot;</span><br><span class="line"> android:layout_height=&quot;wrap_content&quot;</span><br><span class="line"> android:textAppearance=&quot;@style/TextAppearance.Title&quot;</span><br><span class="line"> android:layout_margin=&quot;@dimen/main_margin&quot;</span><br><span class="line"> tools:text=&quot;I am a title&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>tools可以覆盖android的所有标准属性，将android:换成tools:即可。同时在运行的时候就连tools:本身都是被忽略的，不会被带进apk中。<br>tools属性的种类<br>tools属性可以分为两种：一种是影响<strong>Lint</strong>提示的，一种是关于xml布局设计的。以上介绍的是tools的最基本用法：在UI设计的时候覆盖标准的android属性，属于第二种。下面介绍Lint相关的属性。<br><strong>Lint相关的属性</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore</span><br><span class="line">tools:targetApi</span><br><span class="line">tools:locale</span><br></pre></td></tr></table></figure></p><p><strong>tools:ignore</strong><br>ignore属性是告诉<strong>Lint</strong>忽略xml中的某些警告。<br>假设我们有这样的一个ImageView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">  android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">  android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">  android:layout_marginStart=&quot;@dimen/margin_main&quot;</span><br><span class="line">  android:layout_marginTop=&quot;@dimen/margin_main&quot;</span><br><span class="line">  android:scaleType=&quot;center&quot;</span><br><span class="line">  android:src=&quot;@drawable/divider&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>Lint会提示该ImageView缺少<em>android:contentDescription</em>属性。我们可以使用<strong><em>tools:ignore</em></strong>来忽略这个警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">  android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">  android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">  android:layout_marginStart=&quot;@dimen/margin_main&quot;</span><br><span class="line">  android:layout_marginTop=&quot;@dimen/margin_main&quot;</span><br><span class="line">  android:scaleType=&quot;center&quot;</span><br><span class="line">  android:src=&quot;@drawable/divider&quot;</span><br><span class="line">  tools:ignore=&quot;contentDescription&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p><strong>tools:targetApi</strong><br>假设<em>minSdkLevel 15</em>，而你使用了api21中的控件比如<em>RippleDrawable</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">  android:color=&quot;@color/accent_color&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>则Lint会提示警告。<br>为了不显示这个警告，可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">  xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">  android:color=&quot;@color/accent_color&quot;</span><br><span class="line">  tools:targetApi=&quot;LOLLIPOP&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p><strong>tools:locale（本地语言）属性</strong><br>默认情况下<strong><em>res/values/strings.xml</em></strong>中的字符串会执行拼写检查，如果不是英语，会提示拼写错误，通过以下代码来告诉studio本地语言不是英语，就不会有提示了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources</span><br><span class="line">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">  xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">  tools:locale=&quot;it&quot;&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- Your strings go here --&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><p>这篇文章首先介绍了tools的最基本用法-覆盖android的属性，然后介绍了忽略Lint提示的属性。下篇文章中，我们将继续介绍关于UI预览的其他属性（非android标准属性）。<br>ps：关于忽略Lint的属性，如果不想了解的话也没关系，因为并不影响编译，一般我都不会管这些警告。</p><p>第二部分<br>这部分我们将继续介绍关于UI预览的其他属性（非android标准属性）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tools:context</span><br><span class="line">tools:menu</span><br><span class="line">tools:actionBarNavMode</span><br><span class="line">tools:listitem/listheader/listfooter</span><br><span class="line">tools:showIn</span><br><span class="line">tools:layout</span><br></pre></td></tr></table></figure></p><p><strong>tools:context</strong><br>context属性其实正是的称呼是activity属性，有了这个属性，ide就知道在预览布局的时候该采用什么样的主题。同时他还可以在android studio的java代码中帮助找到相关的文件（<strong><em>Go to Related files</em></strong>）<br><img src="http://upload-images.jianshu.io/upload_images/545982-424c8ca38fe5511a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>该属性的值是activity的完整包名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">  xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">  android:id=&quot;@+id/container&quot;</span><br><span class="line">  android:layout_width=&quot;match_parent&quot;</span><br><span class="line">  android:layout_height=&quot;match_parent&quot;</span><br><span class="line">  android:orientation=&quot;vertical&quot;</span><br><span class="line">  tools:context=&quot;com.android.example.MainActivity&quot;&gt;  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><p><strong>tools:menu</strong><br>告诉IDE 在预览窗口中使用哪个菜单，这个菜单将显示在layout的根节点上（actionbar的位置）。<br><img src="http://upload-images.jianshu.io/upload_images/545982-1f67c35ce9ed7cdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>其实预览窗口非常智能，如果布局和一个activity关联（指上面所讲的用tools:context关联）它将会自动查询相关activity的<strong><em>onCreateOptionsMenu</em></strong>方法中的代码，以显示菜单。而<strong>menu属性</strong>则可以覆盖这种默认的行为。<br>你还可以为<strong>menu属性</strong>定义多个菜单资源，不同的菜单资源之间用逗号隔开。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:menu=&quot;menu_main,menu_edit&quot;</span><br></pre></td></tr></table></figure></p><p>如果你不希望在预览图中显示菜单则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:menu=&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>最后需要注意，当主题为<strong><em>Theme.AppCompat</em></strong>时，这个属性不起作用。</p><p><strong>tools:actionBarNavMode</strong><br>这个属性告诉ide  app bar（Material中对actionbar的称呼）的显示模式，其值可以是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">standard</span><br><span class="line">tabs</span><br><span class="line">list</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:actionBarNavMode=&quot;tabs&quot; /&gt;</span><br></pre></td></tr></table></figure><p>同样的，当主题是<em>Theme.AppCompat</em> (r21+, at least) <em>或者**Theme.Material</em>,或者使用了布局包含Toolbar的方式。  该属性也不起作用，只有holo主题才有效。</p><p><strong>listitem, listheader 和listfooter 属性</strong><br>顾名思义就是在ListView ExpandableListView等的预览效果中添加头部 尾部 以及子item的预览布局。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;GridView</span><br><span class="line"> android:id=&quot;@+id/list&quot;</span><br><span class="line"> android:layout_width=&quot;match_parent&quot;</span><br><span class="line"> android:layout_height=&quot;wrap_content&quot;</span><br><span class="line"> tools:listheader=&quot;@layout/list_header&quot;</span><br><span class="line"> tools:listitem=&quot;@layout/list_item&quot;</span><br><span class="line"> tools:listfooter=&quot;@layout/list_footer&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p><strong>layout属性</strong><br>tools:layout告诉ide，Fragment在程序预览的时候该显示成什么样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:id=&quot;@+id/item_list&quot;</span><br><span class="line">    android:name=&quot;com.example.fragmenttwopanel.ItemListFragment&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:layout_marginLeft=&quot;16dp&quot;</span><br><span class="line">    android:layout_marginRight=&quot;16dp&quot;</span><br><span class="line">    tools:layout=&quot;@android:layout/list_content&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/545982-2cfd6d595dad9f99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>tools:showIn</strong>该属性设置于一个被其他布局<include>的布局的根元素上。这让您可以指向包含此布局的其中一个布局，在设计时这个被包含的布局会带着周围的外部布局被渲染。这将允许您“在上下文中”查看和编辑这个布局。需要 Studio 0.5.8 或更高版本。</include></p><p>关于tools 就介绍完了。<br>注：原文是两篇文章<br><a href="https://medium.com/sebs-top-tips/tools-of-the-trade-part-1-f3c1c73de898" target="_blank" rel="noopener">Tools of the trade — Part 1</a><br><a href="https://medium.com/sebs-top-tips/tools-of-the-trade-part-2-b91271892d10" target="_blank" rel="noopener">Tools of the trade — Part 2</a> 。</p><p>觉得完全可以在一篇文章中讲完，就翻译在了一起，原文有很多和内容无关的gif图，描述也比较啰嗦，都被我去掉了，这篇文章属于意译。</p><p>转载:<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0309/2567.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0309/2567.html</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidManifest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动态更换应用Icon</title>
      <link href="/2018/02/07/%E5%8A%A8%E6%80%81%E6%9B%B4%E6%8D%A2%E5%BA%94%E7%94%A8Icon/"/>
      <url>/2018/02/07/%E5%8A%A8%E6%80%81%E6%9B%B4%E6%8D%A2%E5%BA%94%E7%94%A8Icon/</url>
      <content type="html"><![CDATA[<p>#####原理1——activity-alias<br>在AndroidMainifest中，有两个属性：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 决定应用程序最先启动的Activity</span><br><span class="line">android.intent.action.MAIN </span><br><span class="line">// 决定应用程序是否显示在程序列表里</span><br><span class="line">android.intent.category.LAUNCHER</span><br></pre></td></tr></table></figure></p><p>另外，还有一个activity-alias属性，这个属性可以用于创建多个不同的入口，相信做过系统Setting和Launcher开发的开发者在系统的源码中应该见过很多。</p><p>#####原理2——PM.setComponentEnabledSetting</p><p>PackageManager是一个大统领类，可以管理所有的系统组件，当然，如果Root了，你还可以管理其它App的所有组件，一些系统优化工具就是通过这个方式来禁用一些后台Service的。</p><p>使用方式异常简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void enableComponent(ComponentName componentName) &#123;</span><br><span class="line">    mPm.setComponentEnabledSetting(componentName,</span><br><span class="line">            PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">            PackageManager.DONT_KILL_APP);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private void disableComponent(ComponentName componentName) &#123;</span><br><span class="line">    mPm.setComponentEnabledSetting(componentName,</span><br><span class="line">            PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">            PackageManager.DONT_KILL_APP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据PackageManager.COMPONENT_ENABLED_STATE_ENABLED和PackageManager.COMPONENT_ENABLED_STATE_DISABLED这两个标志量和对应的ComponentName，就可以控制一个组件的是否启用。</p><p>#####动态换Icon<br>有了上面的两个原理，来实现动态更换Icon就只剩下思路问题了。</p><p>首先，我们创建一个Activity，作为默认的入口并带着默认的图片，再创建一个双11的activity-alias，指向默认的Activity并带有双11的图片，再创建一个双12的activity-alias，指向默认的Activity并带有双12的图片……等等等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=&quot;.MainActivity&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br><span class="line"></span><br><span class="line">&lt;activity-alias</span><br><span class="line">    android:name=&quot;.Test11&quot;</span><br><span class="line">    android:enabled=&quot;false&quot;</span><br><span class="line">    android:icon=&quot;@drawable/s11&quot;</span><br><span class="line">    android:label=&quot;双11&quot;</span><br><span class="line">    android:targetActivity=&quot;.MainActivity&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity-alias&gt;</span><br><span class="line"></span><br><span class="line">&lt;activity-alias</span><br><span class="line">    android:name=&quot;.Test12&quot;</span><br><span class="line">    android:enabled=&quot;false&quot;</span><br><span class="line">    android:icon=&quot;@drawable/s12&quot;</span><br><span class="line">    android:label=&quot;双12&quot;</span><br><span class="line">    android:targetActivity=&quot;.MainActivity&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity-alias&gt;</span><br></pre></td></tr></table></figure></p><p>等等，这样有个问题，那就是这样会在Launcher上显示3个入口，所以，默认我们会把这些activity-alias先禁用，等到要用的时候再启用，养兵千日，用兵一时。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private ComponentName mDefault;</span><br><span class="line">    private ComponentName mDouble11;</span><br><span class="line">    private ComponentName mDouble12;</span><br><span class="line">    private PackageManager mPm;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mDefault = getComponentName();</span><br><span class="line">        mDouble11 = new ComponentName(</span><br><span class="line">                getBaseContext(),</span><br><span class="line">                &quot;com.xys.changeicon.Test11&quot;);</span><br><span class="line">        mDouble12 = new ComponentName(</span><br><span class="line">                getBaseContext(),</span><br><span class="line">                &quot;com.xys.changeicon.Test12&quot;);</span><br><span class="line">        mPm = getApplicationContext().getPackageManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void changeIcon11(View view) &#123;</span><br><span class="line">        disableComponent(mDefault);</span><br><span class="line">        disableComponent(mDouble12);</span><br><span class="line">        enableComponent(mDouble11);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void changeIcon12(View view) &#123;</span><br><span class="line">        disableComponent(mDefault);</span><br><span class="line">        disableComponent(mDouble11);</span><br><span class="line">        enableComponent(mDouble12);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void enableComponent(ComponentName componentName) &#123;</span><br><span class="line">        mPm.setComponentEnabledSetting(componentName,</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">                PackageManager.DONT_KILL_APP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void disableComponent(ComponentName componentName) &#123;</span><br><span class="line">        mPm.setComponentEnabledSetting(componentName,</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">                PackageManager.DONT_KILL_APP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>OK了，禁用默认的Activity后，启用双11的activity-alias，结果不变还是指向了默认的Activity，但图标已经发生了改变。</p><blockquote><p>根据ROM的不同，在禁用了组件之后，会等一会，Launcher会自动刷新图标。<br>效果参考下图。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/545982-a557ffb5ea125cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>转载:<a href="http://android.jobbole.com/85321/" target="_blank" rel="noopener">http://android.jobbole.com/85321/</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Calendar的DAY_OF_MONTH, DAY_OF_YEAR, DATE的区别</title>
      <link href="/2018/02/07/Calendar%E7%9A%84DAY-OF-MONTH-DAY-OF-YEAR-DATE%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/02/07/Calendar%E7%9A%84DAY-OF-MONTH-DAY-OF-YEAR-DATE%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cal1.add(Calendar.DAY_OF_MONTH,1);  </span><br><span class="line">cal1.add(Calendar.DAY_OF_YEAR,1);  </span><br><span class="line">cal1.add(Calendar.DATE,1);</span><br></pre></td></tr></table></figure><a id="more"></a><p>就单纯的add操作结果都一样，因为都是将日期+1<br>就没有区别说是在月的日期中加1还是年的日期中加1<br>但是Calendar设置DAY_OF_MONTH和DAY_OF_YEAR的目的不是用来+1<br>将日期加1，这通过cal1.add(Calendar.DATE,1)就可以实现<br>DAY_OF_MONTH的主要作用是cal.get(DAY_OF_MONTH)，用来获得这一天在是这个月的第多少天<br>Calendar.DAY_OF_YEAR的主要作用是cal.get(DAY_OF_YEAR)，用来获得这一天在是这个年的第多少天。<br>同样，还有DAY_OF_WEEK，用来获得当前日期是一周的第几天</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android系统下获取本地IP地址的方法</title>
      <link href="/2018/02/07/Android%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0IP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/Android%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0IP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取本地IP地址</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static String getLocalIpAddress() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">String ipv4;</span><br><span class="line">List&lt;NetworkInterface&gt; nilist = Collections.list(NetworkInterface.getNetworkInterfaces());</span><br><span class="line">for (NetworkInterface ni : nilist) &#123;</span><br><span class="line">List&lt;InetAddress&gt; ialist = Collections.list(ni.getInetAddresses());</span><br><span class="line">for (InetAddress address : ialist) &#123;</span><br><span class="line">if (!address.isLoopbackAddress() &amp;&amp;</span><br><span class="line">InetAddressUtils.isIPv4Address(ipv4 = address.getHostAddress())) &#123;</span><br><span class="line">return ipv4;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SocketException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>apk命令行签名,zipalign对齐</title>
      <link href="/2018/02/07/apk%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AD%BE%E5%90%8D-zipalign%E5%AF%B9%E9%BD%90/"/>
      <url>/2018/02/07/apk%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AD%BE%E5%90%8D-zipalign%E5%AF%B9%E9%BD%90/</url>
      <content type="html"><![CDATA[<p>#jarsigner<br><a id="more"></a></p><p>#####使用示例:<br>jarsigner -verbose -keystore ~/Documents/WorkSpace/signkey.keystore -signedjar ./要生成的文件 ./源文件 签名文件的别名</p><p>给apk包签名的方式有很多种，我们推荐您使用JDK自带的jarsigner工具来完成签名。</p><p>#####jarsigner的命令格式</p><p>jarsigner -verbose -keystore [您的私钥存放路径] -signedjar [签名后文件存放路径] [未签名的文件路径] [签名文件的别名]</p><p>#####jarsigner的参数说明</p><p>-keystore 参数指定您的私钥的绝对路径，例如：c:\mykeystore</p><p>-signedjar 参数指定签名后apk文件存放绝对的路径，例如 c:\signed.apk</p><p>[未签名的文件路径] 指定要签名apk文件的绝对路径，也就是您从我们这里下载到的，例如 c:\unsigned.apk</p><p>[您的证书名称] 是指您创建密钥时，您设置的别名,也就是alias</p><p>#zipalign对齐<br>zipalign -v 4 源文件 要生成的文件</p><p>#####检查apk有没有zipalign对齐:<br>zipalign -c -v 4 被检查的apk文件</p><p>#先签名再对齐,否则先对齐再签名会破坏对齐</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android各个版本代号及其特性</title>
      <link href="/2018/02/07/Android%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E4%BB%A3%E5%8F%B7%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7/"/>
      <url>/2018/02/07/Android%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E4%BB%A3%E5%8F%B7%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>本文主要介绍<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">Android</a>系统各个版本的新特性，不定时更新ing。<br><a id="more"></a><br><strong>- Android1.1</strong> 2008 年9月发布的Android第一版</p><p><strong>- Android1.5 Cupcake （纸杯蛋糕）</strong><br>2009年4月30日，官方1.5版本（Cupcake 纸杯蛋糕）的Android发布。 主要的更新如下：<br>1、拍摄/播放影片，并支持上传到Youtube<br>2、支持立体声蓝牙耳机，同时改善自动配对性能<br>3、最新的采用WebKit技术的浏览器，支持复制/贴上和页面中搜索<br>4、GPS性能大大提高<br>5、提供屏幕虚拟键盘<br>6、主屏幕增加音乐播放器和相框widgets<br>7、应用程序自动随着手机旋转<br>8、短信、Gmail、日暦，浏览器的用户接口大幅改进，如Gmail可以批量删除邮件<br>9、相机启动速度加快，拍摄图片可以直接上传到Picasa<br>10、来电照片显示</p><p><strong>- Android1.6 Donut （甜甜圈）</strong><br>2009年9月15日，1.6（Donut 甜甜圈）版本软件开发工具包发布。 主要的更新如下：<br>1、重新设计的Android Market手势<br>2、支持支持CDMA网络<br>3、文字转语音系统（Text-to-Speech）<br>4、快速搜索框<br>5、全新的拍照接口<br>6、查看应用程序耗电<br>7、支持虚拟私人网络（VPN）<br>8、支持更多的屏幕分辨率。<br>9、支持OpenCore2媒体引擎<br>10、新增面向视觉或听觉困难人群的易用性插件</p><p><strong>- Android2.0/2.0.1/2.1 Eclair （松饼）</strong><br>2009年10月26日，2.0（Eclair 松饼）版本软件开发工具包发布。 主要的更新如下：<br>1、优化硬件速度<br>2、 “Car Home”程序<br>3、支持更多的屏幕分辨率<br>4、改良的用户界面<br>5、新的浏览器的用户接口和支持<a href="http://lib.csdn.net/base/html5" target="_blank" rel="noopener">HTML5</a><br>6、新的联系人名单<br>7、更好的白色/黑色背景比率<br>8、改进Google Maps3.1.2<br>9、支持Microsoft Exchange<br>10、支持内置相机闪光灯<br>11、支持数码变焦<br>12、改进的虚拟键盘<br>13、支持蓝牙2.1<br>14、支持动态桌面的设计</p><p><strong>- Android2.2/2.2.1 Froyo(冻酸奶）</strong><br>2010年5月20日，2.2（Froyo 冻酸奶）版本软件开发工具包发布。 主要的更新如下：<br>1、整体性能大幅度的提升<br>2、3G网络共享功能。<br>3、Flash的支持。<br>4、App2sd功能。<br>5、全新的软件商店。<br>6、更多的Web应用API接口的开发。</p><p><strong>- Android2.3 Gingerbread （姜饼）</strong><br>2011年2月2日， 3.0（Honeycomb 蜂巢）版本 主要更新如下：<br>1、优化针对平板<br>2、全新设计的UI增强网页浏览功能<br>3、·n-app purchases功能</p><p><strong>- Android 3.0 Honeycomb （蜂巢）</strong><br>1、Fragments：较activity粒度小的拥有独自生命周期的模块。可作为acitivity的一部分，activity通过FragmentManager管理独自的fragments back stack。<br>2、Action Bar：activity顶部标题栏的替代品，通常含logo，点击出现原menu菜单项–称作action item。可与tab、Fragments back stack合用。<br>3、粘贴版：系统范围的复制、粘贴。通过系统服务CLIPBOARD_SERVICE。<br>4、Drag and drop：在view中监听drag、drop动作，通过ClipData（与系统粘贴版无关）传递数据。<br>5、App widgets：支持GridView、ListView、StackView及ViewFlipper。<br>6、Content loader：Loader类简化异步数据加载；CursorLoader简化ContentProvider的数据加载。<br>7、动画支持扩展：全新动画框架，更灵活。<br>8、硬件绘制加速： android:hardwareAccelerated=”true” 启用OpenGl硬件绘制加速。支持renderscript脚本语言。</p><p><strong>- Android3.1 Honeycomb （蜂巢）</strong><br>2011年5月11日在Google I/O开发者大会宣布发布，版本 主要更新如下：<br>1、Honeycomb 蜂巢（改进3.0BUG）<br>2、经过优化的Gmail电子邮箱；<br>3、全面支持GoogleMaps<br>4、将Android手机系统跟平板系统再次合并从而方便开发者。<br>5、任务管理器可滚动，支持USB 输入设备（键盘、鼠标等）。<br>6、支持 Google TV、可以支持XBOX 360无线手柄<br>7、widget支持的变化，能更加容易的定制屏幕widget插件。</p><p><strong>- Android3.2 Honeycomb （蜂巢）</strong><br>2011年7月13日发布，版本更新如下：<br>1、支持7英寸设备<br>2、引入了应用显示缩放功能</p><p><strong>- Android4.0 Ice Cream (冰激凌三明治)</strong><br>2011年10月19日 在香港发布，4.0（Ice Cream Sandwich 冰激凌三明治）版本 主要更新如下：<br>1、蓝色主题<br>2、接近于桌面版的Chrome Lite浏览器，有离线阅读，同步Chrome书签，新的标签样式等。<br>3、截图功能<br>4、更强大的图片编辑功能<br>5、自带照片应用堪比Instagram，可以加滤镜、加相框，进行360度全景拍摄，照片还能根据地点来排序<br>6、Gmail加入手势、离线搜索功能，UI更强大。<br>7、新功能People：以联系人照片为核心，界面偏重滑动而非点击，集成了Twitter、Linkedin、Google+等通讯工具。有望支持用户自定义添加第三方服务。<br>8、新增流量管理工具，可具体查看每个应用产生的流量。<br>9、正在运行的程序可以像电脑一样的互相切换<br>10、人脸识别功能<br>11、系统优化、速度更快<br>12、支持虚拟按键，手机可以不再拥有任何按键<br>13、专为3D优化的驱动 14、平板电脑和智能手机通用</p><p><strong>- Android 4.1 Jelly Bean（果冻豆）</strong><br>于北京时间2012年6月28日00：30在Google I/O 2012开发者大会上发布<br>1.更快、更流畅、更灵敏<br>2.增强通知栏<br>3.全新搜索<br>4.桌面插件自动调整大小<br>5.加强无障碍操作<br>6.语言和输入法扩展<br>7.新的输入类型和功能<br>8.新的连接类型<br>9.新的媒体功能<br>10.浏览器增强<br>11.Google服务</p><p><strong>- Android 4.2 Jelly Bean（果冻豆）</strong><br>Android 4.2是谷歌新一代移动<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" rel="noopener">操作系统</a>，它沿用了4.1版“果冻豆”(Jelly Bean)这一名称，与Android 4.1相似性很高，但仍在细节之后做了一些改进与升级，比较重要的包括：Photo Sphere全景拍照；键盘手势输入；Miracast无线显示共享；手势放大缩小屏幕，以及为盲人用户设计的语音输出和手势模式导航功能等。尤其令人关注的是，谷歌在Android 4.2中新加入了新的恶意软件扫描功能。<br>1、完整的Chrome浏览器<br>2、全新的手机风景模式<br>3、全新的文件管理器<br>4、文本输入选项的改进<br>5、一个明确的升级方法<br>6、Android Key Lime Pie精简版<br>7、具有开关切换的用户界面<br>8、全新的电源管理系统<br>9、更为轻便的主题模式<br>10、全新的锁屏页面<br>11、全新的时钟界面</p><p><strong>- Android 4.3 Jelly Bean（果冻豆）</strong><br>北京时间2013年7月25日凌晨,谷歌在美国旧金山的新品发布会上,发布了在<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">安卓</a>4.2版本基础上的升级版本Android 4.3<br>1、用户账户配制<br>2、拨号盘联系人自动补全<br>3、OpenGL 3.0<br>4、蓝牙低耗电技术<br>5、WIFI关闭后保持位置功能 其它特性 新的相机应用UI 新的开发者工具 通过邮件分享截屏时，日期和时间会自动加入进去。</p><p><strong>- Android 4.4 KitKat（奇巧）</strong><br>Android 4.4，是由Google公司制作和研发的代号为KitKat的手机操作系统，于北京时间2013年9月4日凌晨对外公布了该Android新版本的名称，为Android 4.4（代号 KitKat 奇巧）。<br>1、优化了RenderScript计算和图像显示,取代OpenCL<br>2、支持两种编译模式<br>3、Android 4.4 KitKat针对RAM占用进行了优化，甚至可以在一些仅有512MB RAM的老款手机上流畅运行。<br>4、新图标、锁屏、启动动画和配色方案<br>5、新的拨号和智能来电显示<br>6、加强主动式语音功能<br>7、集成Hangouts IM软件<br>8、全屏模式<br>9、支持Emoji键盘<br>10、轻松访问在线存储<br>11、无线打印<br>12、屏幕录像功能<br>13、内置字幕管理功能<br>14、计步器应用<br>15、低功耗音频和定位模式<br>16、新的接触式支付系统<br>17、新的蓝牙配置文件和红外兼容性</p><p><strong>- Android 5.0 Lollipop(棒棒糖)</strong><br>Android L即Android5.0是最新一代的Android操作系统，代号L。北京时间2014年6月26日0时，谷歌I/O 2014开发者大会将在旧金山正式召开。 全新Android l系统从图片上就能看到一些全新的功能。从图片上看，这套概念设计图对Android系统的桌面图标及部件的透明度进行的稍稍的调整，并且各种桌面小部件也可以重叠摆放。虽然调整桌面部件透明度对Android系统来说并不算什么新鲜的功能，但是加入了透明度的改进，除了整体的色调更加清新之外。<br>1、谷歌将为Android的语音服务Google Now加入一个名为OK Google Everywhere的全新功能。<br>2、Android 5.0可能还会加入更多的健身功能，考虑到谷歌在发布了Android Wear，后者与智能手表及谷歌眼镜等可穿戴设备的协作应该会成为下个版本的重点功能。<br>3、整合碎片化<br>4、传言Google将在Android5.0中，禁止厂商进行深度定制。<br>5、数据迁移<br>6、独立平板<br>7、功能按键<br>8、接口风格</p><p><strong>- Android 6.0 Marshmallow(棉花糖)</strong><br>Android 6.0正式版终于随着Nexus 5X/6P一起登场了，并在北京时间10月6日面向Nexus系列产品推送升级<br>1.App Permissions（软件权限管理）。<br>2.Chrome Custom Tabs（网页体验提升）。<br>3.App Links（APP关联）。<br>4.Android Pay（安卓支付）。<br>5.Fingerprint Support（指纹支持）。<br>6.Power &amp; Change（电量管理 ）。</p><p><strong>- Android 7.0 N</strong><br>1、分屏多任务<br>2、“Data Saver”<br>3、号码拦截<br>4、更便捷的通知中心<br>5、夜间模式<br>6、增强的<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java </a>8语言支持 7、画中画模式</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>android debug.keystore 的默认密码</title>
      <link href="/2018/02/07/android-debug-keystore-%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81/"/>
      <url>/2018/02/07/android-debug-keystore-%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>默认debug.keystore的信息如下：<br>Keystore name: “debug.keystore”<br>Keystore password: “android”<br>Key alias: “androiddebugkey”<br>Key password: “android”<br>CN: “CN=Android Debug,O=Android,C=US”</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio多工程引用同一个library项目配置方法</title>
      <link href="/2018/02/07/Android-Studio%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%BC%95%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AAlibrary%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/Android-Studio%E5%A4%9A%E5%B7%A5%E7%A8%8B%E5%BC%95%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AAlibrary%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在使用Android Studio 开发中，如遇到多个项目引用同一个library（源码）的情况时，会遇到在每个项目中都要有一套library的代码，对还在开发和维护中的library需要频繁的修改，这对同步就很麻烦了，下面提出以下方法供选择。当然最后会给出最合理的解决办法。<br><a id="more"></a></p><p><strong>第一种</strong>方法是对library向每个引用的项目建立软连接。这样修改就会对每个引用同步修改.这种方法就是看起来会很臃肿，如果要引用多个library就很痛苦。</p><p><strong>第二种</strong>就是maven 仓库的方式，将所有的library都上传到maven仓库，然后在各个工程中进行引用，当然这种是对稳定的library来说是最好的一种方式，但对于library需要开发和修改的就不太适合了。</p><p><strong>第三种</strong>就是将所有的library作为一个工程使用，然后将所有的library都放入此工程中，然后在其他引用library的工程中，引入新建的工程，这样看起来和eclipse 引用library的结构就很像了，且可以放入多个library都不影响。下面就来看看这种解决方法，该如何实现。</p><p>首先新建一个工程，注意是工程，不是Stuio里面的Module，起一个容易理解的工程名称CommonLibrary。</p><p>将需添加的library添加进CommonLibrary中，记得每个library也是需要有build.gradle文件的，且配置项正确。<br>在需要引用的的工程中，需要在settings.gradle文件中添加引用代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:CommonLibrary&apos;</span><br><span class="line">project (&apos;:CommonLibrary&apos;).projectDir = new File(&apos;../CommonLibrary/&apos;)</span><br><span class="line">include &apos;:CommonLibrary:CommonsA&apos;</span><br><span class="line">include &apos;:CommonLibrary:CommonsB&apos;</span><br></pre></td></tr></table></figure></p><p>其中CommonsA为项目要使用的公共library名称然后在我们项目实际的model中修改build.gradle<br>文件，需要在dependencies<br>中添加下面的代码。CommonsA和CommonsB都是要要引用的项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile project (&apos;:CommonLibrary:CommonsA&apos;)</span><br><span class="line">compile project (&apos;:CommonLibrary:CommonsB&apos;)</span><br></pre></td></tr></table></figure><p>至此多个工程引用同一个lib的方法就基本完成，配置玩后sync下，然后build，看是否成功。</p><p>转载:<a href="http://wxtlife.com/2015/12/17/Android-studio-quote-same-lib/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">http://wxtlife.com/2015/12/17/Android-studio-quote-same-lib/?utm_source=tuicool&amp;utm_medium=referral</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android中不同Context的使用方法和适用范围</title>
      <link href="/2018/02/07/Android%E4%B8%AD%E4%B8%8D%E5%90%8CContext%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E9%80%82%E7%94%A8%E8%8C%83%E5%9B%B4/"/>
      <url>/2018/02/07/Android%E4%B8%AD%E4%B8%8D%E5%90%8CContext%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E9%80%82%E7%94%A8%E8%8C%83%E5%9B%B4/</url>
      <content type="html"><![CDATA[<p>###1、Context概念<br><a id="more"></a><br>其实一直想写一篇关于Context的文章，但是又怕技术不如而误人子弟，于是参考了些资料，今天准备整理下写出来，如有不足，请指出，参考资料会在醒目地方标明。<br>Context，相信不管是第一天开发<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">Android</a>，还是开发Android的各种老鸟，对于Context的使用一定不陌生~~你在加载资源、启动一个新的Activity、获取系统服务、获取内部文件（夹）路径、创建View操作时等都需要Context的参与，可见Context的常见性。大家可能会问到底什么是Context，Context字面意思上下文，或者叫做场景，也就是用户与<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" rel="noopener">操作系统</a>操作的一个过程，比如你打电话，场景包括电话程序对应的界面，以及隐藏在背后的数据；<br> 但是在程序的角度Context又是什么呢？在程序的角度，我们可以有比较权威的答案，Context是个抽象类，我们可以直接通过看其类结构来说明答案：</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-6001ade83c752537.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到Activity、Service、Application都是Context的子类；<br>也就是说，Android系统的角度来理解：Context是一个场景，代表与操作系统的交互的一种过程。从程序的角度上来理解：Context是个抽象类，而Activity、Service、Application等都是该类的一个实现。<br>在仔细看一下上图：Activity、Service、Application都是继承自ContextWrapper，而ContextWrapper内部会包含一个base context，由这个base context去实现了绝大多数的方法。<br>先扯这么多，有能力了会从别的角度去审视Context，加油~</p><p>###2、Context与ApplicationContext<br>看了标题，千万不要被误解，ApplicationContext并没有这个类，其实更应该叫做：Activity与Application在作为Context时的区别。嗯，的确是这样的，大家在需要Context的时候，如果是在Activity中，大多直接传个this，当在匿名内部类的时候，因为this不能用，需要写XXXActivity.this，很多哥们会偷懒，直接就来个getApplicationContext。那么大家有没有想过，XXXActivity.this和getApplicationContext的区别呢？<br>XXXActivity和getApplicationContext返回的肯定不是一个对象，一个是当前Activity的实例，一个是项目的Application的实例。既然区别这么明显，那么各自的使用场景肯定不同，乱使用可能会带来一些问题。<br>下面开始介绍在使用Context时，需要注意的问题。</p><p>###3、引用的保持</p><p>大家在编写一些类时，例如工具类，可能会编写成单例的方式，这些工具类大多需要去访问资源，也就说需要Context的参与。<br>在这样的情况下，就需要注意Context的引用问题。<br>例如以下的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.mooc.shader.roundimageview;  </span><br><span class="line">  </span><br><span class="line">import android.content.Context;  </span><br><span class="line">  </span><br><span class="line">public class CustomManager  </span><br><span class="line">&#123;  </span><br><span class="line">    private static CustomManager sInstance;  </span><br><span class="line">    private Context mContext;  </span><br><span class="line">  </span><br><span class="line">    private CustomManager(Context context)  </span><br><span class="line">    &#123;  </span><br><span class="line">        this.mContext = context;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static synchronized CustomManager getInstance(Context context)  </span><br><span class="line">    &#123;  </span><br><span class="line">        if (sInstance == null)  </span><br><span class="line">        &#123;  </span><br><span class="line">            sInstance = new CustomManager(context);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return sInstance;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    //some methods   </span><br><span class="line">    private void someOtherMethodNeedContext()  </span><br><span class="line">    &#123;  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于上述的单例，大家应该都不陌生（请别计较getInstance的效率问题），内部保持了一个Context的引用；<br>这么写是没有问题的，问题在于，这个Context哪来的我们不能确定，很大的可能性，你在某个Activity里面为了方便，直接传了个this;这样问题就来了，我们的这个类中的sInstance是一个static且强引用的，在其内部引用了一个Activity作为Context，也就是说，我们的这个Activity只要我们的项目活着，就没有办法进行内存回收。而我们的Activity的生命周期肯定没这么长，所以造成了内存泄漏。<br>那么，我们如何才能避免这样的问题呢？<br>有人会说，我们可以软引用，嗯，软引用，假如被回收了，你不怕NullPointException么。<br>把上述代码做下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static synchronized CustomManager getInstance(Context context)  </span><br><span class="line">    &#123;  </span><br><span class="line">        if (sInstance == null)  </span><br><span class="line">        &#123;  </span><br><span class="line">            sInstance = new CustomManager(context.getApplicationContext());  </span><br><span class="line">        &#125;  </span><br><span class="line">        return sInstance;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样，我们就解决了内存泄漏的问题，因为我们引用的是一个ApplicationContext，它的生命周期和我们的单例对象一致。<br>这样的话，可能有人会说，早说嘛，那我们以后都这么用不就行了，很遗憾的说，不行。上面我们已经说过，Context和Application Context的区别是很大的，也就是说，他们的应用场景（你也可以认为是能力）是不同的，并非所有Activity为Context的场景，Application Context都能搞定。<br>下面就开始介绍各种Context的应用场景。</p><p>###4、Context的应用场景</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-1582935f29bf28c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>大家注意看到有一些NO上添加了一些数字，其实这些从能力上来说是YES，但是为什么说是NO呢？下面一个一个解释：<br>数字1：启动Activity在这些类中是可以的，但是需要创建一个新的task。一般情况不推荐。<br>数字2：在这些类中去layout inflate是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。<br>数字3：在receiver为null时允许，在4.2或以上的版本中，用于获取黏性广播的当前值。（可以无视）<br>注：ContentProvider、BroadcastReceiver之所以在上述表格中，是因为在其内部方法中都有一个context用于使用。</p><p>好了，这里我们看下表格，重点看Activity和Application，可以看到，和UI相关的方法基本都不建议或者不可使用Application，并且，前三个操作基本不可能在Application中出现。实际上，只要把握住一点，凡是跟UI相关的，都应该使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例都可以，当然了，注意Context引用的持有，防止内存泄漏。</p><p>###5、总结<br>好了，到此，Context的分析基本完成了，希望大家在以后的使用过程中，能够稍微考虑下，这里使用Activity合适吗？会不会造成内存泄漏？这里传入Application work吗？<br>由于参考内容过多，本文改为译文咯~~</p><p>转载:<a href="http://blog.csdn.net/lmj623565791/article/details/40481055" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/40481055</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Context </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>The APK file does not exist on disk的解决办法</title>
      <link href="/2018/02/07/The-APK-file-does-not-exist-on-disk%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/07/The-APK-file-does-not-exist-on-disk%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在android studio编译apk的时候,经常会出现这个错误,解决这个问题的方法很简单,点击刷新按钮即可解决<br><img src="http://upload-images.jianshu.io/upload_images/545982-5b3c6c5b4a263aa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android性能优化之常见的内存泄漏</title>
      <link href="/2018/02/07/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
      <url>/2018/02/07/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
      <content type="html"><![CDATA[<p>####前言<br><a id="more"></a><br>对于内存泄漏，我想大家在开发中肯定都遇到过，只不过内存泄漏对我们来说并不是可见的，因为它是在堆中活动，而要想检测程序中是否有内存泄漏的产生，通常我们可以借助LeakCanary、MAT等工具来检测应用程序是否存在内存泄漏，MAT是一款强大的内存分析工具，功能繁多而复杂，而LeakCanary则是由Square开源的一款轻量第三方内存泄漏检测工具，当它检测到程序中有内存泄漏的产生时，它将以最直观的方式告诉我们该内存泄漏是由谁产生的和该内存泄漏导致谁泄漏了而不能回收，供我们复查。</p><p>最近腾讯bugly也推出了三篇关于Android内存泄漏调优的文章：</p><ol><li><a href="http://bugly.qq.com/blog/?p=832" target="_blank" rel="noopener">内存泄露从入门到精通三部曲之基础知识篇</a></li><li><a href="http://bugly.qq.com/blog/?p=872" target="_blank" rel="noopener">内存泄露从入门到精通三部曲之排查方法篇</a></li><li><a href="http://bugly.qq.com/blog/?p=884" target="_blank" rel="noopener">内存泄露从入门到精通三部曲之常见原因与用户实践</a></li></ol><p>Realm同样给出了性能优化文章：</p><p><a href="https://realm.io/cn/news/droidcon-farber-improving-android-app-performance/" target="_blank" rel="noopener">10条提升Android性能的建议</a></p><p>####内存泄漏</p><p>#####为什么会产生内存泄漏？<br>当一个对象已经不需要再使用了，本该被回收时，而有另外一个正在使用的对象持有它的引用从而导致它不能被回收，这导致本该被回收的对象不能被回收而停留在堆内存中，这就产生了内存泄漏。</p><p>#####内存泄漏对程序的影响？<br>内存泄漏是造成应用程序OOM的主要原因之一！我们知道Android系统为每个应用程序分配的内存有限，而当一个应用中产生的内存泄漏比较多时，这就难免会导致应用所需要的内存超过这个系统分配的内存限额，这就造成了内存溢出而导致应用Crash。</p><p>####Android中常见的内存泄漏汇总</p><p>#####单例造成的内存泄漏<br>单例模式非常受开发者的喜爱，不过使用的不恰当的话也会造成内存泄漏，由于单例的静态特性使得单例的生命周期和应用的生命周期一样长，这就说明了如果一个对象已经不需要使用了，而单例对象还持有该对象的引用，那么这个对象将不能被正常回收，这就导致了内存泄漏。<br>如下这个典例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AppManager &#123;</span><br><span class="line">    private static AppManager instance;</span><br><span class="line">    private Context context;</span><br><span class="line">    private AppManager(Context context) &#123;</span><br><span class="line">        this.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    public static AppManager getInstance(Context             context) &#123;</span><br><span class="line">        if (instance != null) &#123;</span><br><span class="line">            instance = new AppManager(context);</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个普通的单例模式，当创建这个单例的时候，由于需要传入一个Context，所以这个Context的生命周期的长短至关重要：</p><ol><li>传入的是Application的Context：这将没有任何问题，因为单例的生命周期和Application的一样长</li><li>传入的是Activity的Context：当这个Context所对应的Activity退出时，由于该Context和Activity的生命周期一样长（Activity间接继承于Context），所以当前Activity退出时它的内存并不会被回收，因为单例对象持有该Activity的引用。</li></ol><p>所以正确的单例应该修改为下面这种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AppManager &#123;</span><br><span class="line">    private static AppManager instance;</span><br><span class="line">    private Context context;</span><br><span class="line">    private AppManager(Context context) &#123;</span><br><span class="line">        this.context = context.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    public static AppManager getInstance(Context context) &#123;</span><br><span class="line">        if (instance != null) &#123;</span><br><span class="line">            instance = new AppManager(context);</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样不管传入什么Context最终将使用Application的Context，而单例的生命周期和应用的一样长，这样就防止了内存泄漏</p><p>#####非静态内部类创建静态实例造成的内存泄漏<br>有的时候我们可能会在启动频繁的Activity中，为了避免重复创建相同的数据资源，可能会出现这种写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static TestResource mResource = null;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        if(mResource == null)&#123;</span><br><span class="line">            mResource = new TestResource();</span><br><span class="line">        &#125;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">    class TestResource &#123;</span><br><span class="line">    //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就在Activity内部创建了一个非静态内部类的单例，每次启动Activity时都会使用该单例的数据，这样虽然避免了资源的重复创建，不过这种写法却会造成内存泄漏，因为非静态内部类默认会持有外部类的引用，而又使用了该非静态内部类创建了一个静态的实例，该实例的生命周期和应用的一样长，这就导致了该静态实例一直会持有该Activity的引用，导致Activity的内存资源不能正常回收。正确的做法为：将该内部类设为静态内部类或将该内部类抽取出来封装成一个单例，如果需要使用Context，请使用ApplicationContext</p><p>#####Handler造成的内存泄漏<br>Handler的使用造成的内存泄漏问题应该说最为常见了，平时在处理网络任务或者封装一些请求回调等api都应该会借助Handler来处理，对于Handler的使用代码编写一不规范即有可能造成内存泄漏，如下示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private Handler mHandler = new Handler() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">        //...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        loadData();</span><br><span class="line">    &#125;</span><br><span class="line">    private void loadData()&#123;</span><br><span class="line">        //...request</span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        mHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种创建Handler的方式会造成内存泄漏，由于mHandler是Handler的非静态匿名内部类的实例，所以它持有外部类Activity的引用，我们知道消息队列是在一个Looper线程中不断轮询处理消息，那么当这个Activity退出时消息队列中还有未处理的消息或者正在处理消息，而消息队列中的Message持有mHandler实例的引用，mHandler又持有Activity的引用，所以导致该Activity的内存资源无法及时回收，引发内存泄漏，所以另外一种做法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private MyHandler mHandler = new MyHandler(this);</span><br><span class="line">    private TextView mTextView ;</span><br><span class="line">    private static class MyHandler extends Handler &#123;</span><br><span class="line">        private WeakReference&lt;Context&gt; reference;</span><br><span class="line">        public MyHandler(Context context) &#123;</span><br><span class="line">        reference = new WeakReference&lt;&gt;(context);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            MainActivity activity = (MainActivity) reference.get();</span><br><span class="line">            if(activity != null)&#123;</span><br><span class="line">            activity.mTextView.setText(&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mTextView = (TextView)findViewById(R.id.textview);</span><br><span class="line">        loadData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void loadData() &#123;</span><br><span class="line">        //...request</span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        mHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>简书作者注:</strong><br>非static的inner class里面都会有一个this$0的字段保存它的父对象。在Java中，非静态(匿名)内部类会默认隐性引用外部类对象。而静态内部类不会引用外部类对象。一个编译后的inner class 很可能是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class parent$inner &#123;</span><br><span class="line">    synthetic parent this$0;</span><br><span class="line">    parent$inner(parent this$0) &#123;</span><br><span class="line">        this.this$0 = this$0;</span><br><span class="line">        this$0.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>创建一个静态Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity泄漏，不过Looper线程的消息队列中还是可能会有待处理的消息，所以我们在Activity的Destroy时或者Stop时应该移除消息队列中的消息，更准确的做法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private MyHandler mHandler = new MyHandler(this);</span><br><span class="line">    private TextView mTextView ;</span><br><span class="line">    private static class MyHandler extends Handler &#123;</span><br><span class="line">        private WeakReference&lt;Context&gt; reference;</span><br><span class="line">        public MyHandler(Context context) &#123;</span><br><span class="line">        reference = new WeakReference&lt;&gt;(context);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            MainActivity activity = (MainActivity) reference.get();</span><br><span class="line">            if(activity != null)&#123;</span><br><span class="line">            activity.mTextView.setText(&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mTextView = (TextView)findViewById(R.id.textview);</span><br><span class="line">        loadData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void loadData() &#123;</span><br><span class="line">        //...request</span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        mHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        mHandler.removeCallbacksAndMessages(null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用mHandler.removeCallbacksAndMessages(null);是移除消息队列中所有消息和所有的Runnable。当然也可以使用mHandler.removeCallbacks();或mHandler.removeMessages();来移除指定的Runnable和Message。</p><p>#####线程造成的内存泄漏<br>对于线程造成的内存泄漏，也是平时比较常见的，异步任务和Runnable都是一个匿名内部类，因此它们对当前Activity都有一个隐式引用。如果Activity在销毁之前，任务还未完成，那么将导致Activity的内存资源无法回收，造成内存泄漏。正确的做法还是使用静态内部类的方式，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">static class MyAsyncTask extends AsyncTask&lt;Void, Void, Void&gt; &#123;</span><br><span class="line">    private WeakReference&lt;Context&gt; weakReference;</span><br><span class="line"></span><br><span class="line">    public MyAsyncTask(Context context) &#123;</span><br><span class="line">        weakReference = new WeakReference&lt;&gt;(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Void doInBackground(Void... params) &#123;</span><br><span class="line">        SystemClock.sleep(10000);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPostExecute(Void aVoid) &#123;</span><br><span class="line">        super.onPostExecute(aVoid);</span><br><span class="line">        MainActivity activity = (MainActivity) weakReference.get();</span><br><span class="line">        if (activity != null) &#123;</span><br><span class="line">        //...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">static class MyRunnable implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        SystemClock.sleep(10000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//——————</span><br><span class="line">new Thread(new MyRunnable()).start();</span><br><span class="line">new MyAsyncTask(this).execute();</span><br></pre></td></tr></table></figure></p><p>这样就避免了Activity的内存资源泄漏，当然在Activity销毁时候也应该取消相应的任务AsyncTask::cancel()，避免任务在后台执行浪费资源。</p><p>#####资源未关闭造成的内存泄漏<br>对于使用了BraodcastReceiver，ContentObserver，File，Cursor，Stream，Bitmap等资源的使用，应该在Activity销毁时及时关闭或者注销，否则这些资源将不会被回收，造成内存泄漏。</p><p>#####一些建议</p><ol><li>对于生命周期比Activity长的对象如果需要应该使用ApplicationContext</li><li>对于需要在静态内部类中使用非静态外部成员变量（如：Context、View )，可以在静态内部类中使用弱引用来引用外部类的变量来避免内存泄漏</li><li>对于不再需要使用的对象，显示的将其赋值为null，比如使用完Bitmap后先调用recycle()，再赋为null</li><li>保持对对象生命周期的敏感，特别注意单例、静态对象、全局性集合等的生命周期</li><li><p>对于生命周期比Activity长的内部类对象，并且内部类中使用了外部类的成员变量，可以这样做避免内存泄漏：</p><ol><li>将内部类改为静态内部类</li><li>静态内部类中使用弱引用来引用外部类的成员变量</li></ol></li><li><p>在涉及到Context时先考虑ApplicationContext，当然它并不是万能的，对于有些地方则必须使用Activity的Context，对于Application，Service，Activity三者的Context的应用场景如下：</p></li></ol><p><a href="http://img.blog.csdn.net/20151123144226349" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/545982-4081d50705e029f0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></a><br><strong>其中：</strong>NO1表示Application和Service可以启动一个Activity，不过需要创建一个新的task任务队列。而对于Dialog而言，只有在Activity中才能创建</p><p>转载:<a href="http://hanhailong.com/2015/12/27/Android性能优化之常见的内存泄漏" target="_blank" rel="noopener">http://hanhailong.com/2015/12/27/Android性能优化之常见的内存泄漏</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存泄漏 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 基于Message的进程间通信 Messenger完全解析</title>
      <link href="/2018/02/07/Android-%E5%9F%BA%E4%BA%8EMessage%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-Messenger%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/02/07/Android-%E5%9F%BA%E4%BA%8EMessage%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-Messenger%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>一、概述<br><a id="more"></a><br>说到<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">Android</a>进程间通信，大家肯定能想到的是编写aidl文件，然后通过aapt生成的类方便的完成服务端，以及客户端代码的编写。如果你对这个过程不熟悉，可以查看<a href="http://blog.csdn.net/lmj623565791/article/details/38461079" target="_blank" rel="noopener">Android aidl Binder框架浅析</a>；<br>当然今天要说的通信方式肯定不是通过编写aidl文件的方式，那么有请今天的主角：Messenger。ok，这是什么样的一个类呢？我们看下注释</p><blockquote><p>This allows for the implementation of message-based communication across processes</p></blockquote><p>允许实现基于消息的进程间通信的方式。<br>那么，什么叫基于消息的进程间通信方式呢？看个图理解下：</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-f67afdc2b18be185.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>可以看到，我们可以在客户端发送一个Message给服务端，在服务端的handler中会接收到客户端的消息，然后进行对应的处理，处理完成后，再将结果等数据封装成Message，发送给客户端，客户端的handler中会接收到处理的结果。</p><p>这样的进程间通信是不是很爽呢？</p><ul><li>基于Message，相信大家都很熟悉</li><li>支持回调的方式，也就是服务端处理完成长任务可以和客户端交互</li><li>不需要编写aidl文件<br>此外，还支持，记录客户端对象的Messenger，然后可以实现一对多的通信；甚至作为一个转接处，任意两个进程都能通过服务端进行通信，这个后面再说。</li></ul><p>看到这，有没有一些的小激动，我们可以不写aidl文件，方便的实现进程间通信了，是不是又可以装一下了。哈，下面看个简单的例子。</p><p>二、通信实例<br>这个例子，通过两个apk演示，一个apk是Server端，一个是Client端；<br>（1） Server端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.messenger_server;</span><br><span class="line"></span><br><span class="line">import android.app.Service;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.os.Message;</span><br><span class="line">import android.os.Messenger;</span><br><span class="line">import android.os.RemoteException;</span><br><span class="line"></span><br><span class="line">public class MessengerService extends Service</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    private static final int MSG_SUM = 0x110;</span><br><span class="line"></span><br><span class="line">    //最好换成HandlerThread的形式</span><br><span class="line">    private Messenger mMessenger = new Messenger(new Handler()</span><br><span class="line">    &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msgfromClient)</span><br><span class="line">        &#123;</span><br><span class="line">            Message msgToClient = Message.obtain(msgfromClient);//返回给客户端的消息</span><br><span class="line">            switch (msgfromClient.what)</span><br><span class="line">            &#123;</span><br><span class="line">                //msg 客户端传来的消息</span><br><span class="line">                case MSG_SUM:</span><br><span class="line">                    msgToClient.what = MSG_SUM;</span><br><span class="line">                    try</span><br><span class="line">                    &#123;</span><br><span class="line">                        //模拟耗时</span><br><span class="line">                        Thread.sleep(2000);</span><br><span class="line">                        msgToClient.arg2 = msgfromClient.arg1 + msgfromClient.arg2;</span><br><span class="line">                        msgfromClient.replyTo.send(msgToClient);</span><br><span class="line">                    &#125; catch (InterruptedException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; catch (RemoteException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            super.handleMessage(msgfromClient);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent)</span><br><span class="line">    &#123;</span><br><span class="line">        return mMessenger.getBinder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务端就一个Service，可以看到代码相当的简单，只需要去声明一个Messenger对象，然后onBind方法返回mMessenger.getBinder()；</p><p>然后坐等客户端将消息发送到handleMessage想法，根据message.what去判断进行什么操作，然后做对应的操作，最终将结果通过 msgfromClient.replyTo.send(msgToClient);返回。</p><p>可以看到我们这里主要是取出客户端传来的两个数字，然后求和返回，这里我有意添加了sleep(2000)模拟耗时,注意在实际使用过程中，可以换成在独立开辟的线程中完成耗时操作，比如和HandlerThread结合使用。</p><p>#####注册文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">           android:name=&quot;.MessengerService&quot;</span><br><span class="line">           android:enabled=&quot;true&quot;</span><br><span class="line">           android:exported=&quot;true&quot;&gt;</span><br><span class="line">           &lt;intent-filter&gt;</span><br><span class="line">               &lt;action android:name=&quot;com.zhy.aidl.calc&quot;&gt;&lt;/action&gt;</span><br><span class="line">               &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br><span class="line">           &lt;/intent-filter&gt;</span><br><span class="line">       &lt;/service&gt;</span><br></pre></td></tr></table></figure></p><p>别忘了注册service，写完以后直接安装。<br>（二）客户端<br>Activity<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.messenger_client;</span><br><span class="line"></span><br><span class="line">import android.content.ComponentName;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.content.ServiceConnection;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.os.Message;</span><br><span class="line">import android.os.Messenger;</span><br><span class="line">import android.os.RemoteException;</span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.LinearLayout;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity</span><br><span class="line">&#123;</span><br><span class="line">    private static final String TAG = &quot;MainActivity&quot;;</span><br><span class="line">    private static final int MSG_SUM = 0x110;</span><br><span class="line"></span><br><span class="line">    private Button mBtnAdd;</span><br><span class="line">    private LinearLayout mLyContainer;</span><br><span class="line">    //显示连接状态</span><br><span class="line">    private TextView mTvState;</span><br><span class="line"></span><br><span class="line">    private Messenger mService;</span><br><span class="line">    private boolean isConn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Messenger mMessenger = new Messenger(new Handler()</span><br><span class="line">    &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msgFromServer)</span><br><span class="line">        &#123;</span><br><span class="line">            switch (msgFromServer.what)</span><br><span class="line">            &#123;</span><br><span class="line">                case MSG_SUM:</span><br><span class="line">                    TextView tv = (TextView) mLyContainer.findViewById(msgFromServer.arg1);</span><br><span class="line">                    tv.setText(tv.getText() + &quot;=&gt;&quot; + msgFromServer.arg2);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            super.handleMessage(msgFromServer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private ServiceConnection mConn = new ServiceConnection()</span><br><span class="line">    &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceConnected(ComponentName name, IBinder service)</span><br><span class="line">        &#123;</span><br><span class="line">            mService = new Messenger(service);</span><br><span class="line">            isConn = true;</span><br><span class="line">            mTvState.setText(&quot;connected!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceDisconnected(ComponentName name)</span><br><span class="line">        &#123;</span><br><span class="line">            mService = null;</span><br><span class="line">            isConn = false;</span><br><span class="line">            mTvState.setText(&quot;disconnected!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    private int mA;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState)</span><br><span class="line">    &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        //开始绑定服务</span><br><span class="line">        bindServiceInvoked();</span><br><span class="line"></span><br><span class="line">        mTvState = (TextView) findViewById(R.id.id_tv_callback);</span><br><span class="line">        mBtnAdd = (Button) findViewById(R.id.id_btn_add);</span><br><span class="line">        mLyContainer = (LinearLayout) findViewById(R.id.id_ll_container);</span><br><span class="line"></span><br><span class="line">        mBtnAdd.setOnClickListener(new View.OnClickListener()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    int a = mA++;</span><br><span class="line">                    int b = (int) (Math.random() * 100);</span><br><span class="line"></span><br><span class="line">                    //创建一个tv,添加到LinearLayout中</span><br><span class="line">                    TextView tv = new TextView(MainActivity.this);</span><br><span class="line">                    tv.setText(a + &quot; + &quot; + b + &quot; = caculating ...&quot;);</span><br><span class="line">                    tv.setId(a);</span><br><span class="line">                    mLyContainer.addView(tv);</span><br><span class="line"></span><br><span class="line">                    Message msgFromClient = Message.obtain(null, MSG_SUM, a, b);</span><br><span class="line">                    msgFromClient.replyTo = mMessenger;</span><br><span class="line">                    if (isConn)</span><br><span class="line">                    &#123;</span><br><span class="line">                        //往服务端发送消息</span><br><span class="line">                        mService.send(msgFromClient);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (RemoteException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void bindServiceInvoked()</span><br><span class="line">    &#123;</span><br><span class="line">        Intent intent = new Intent();</span><br><span class="line">        intent.setAction(&quot;com.zhy.aidl.calc&quot;);</span><br><span class="line">        bindService(intent, mConn, Context.BIND_AUTO_CREATE);</span><br><span class="line">        Log.e(TAG, &quot;bindService invoked !&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy()</span><br><span class="line">    &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        unbindService(mConn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码也不复杂，首先bindService，然后在onServiceConnected中拿到回调的service（IBinder）对象，通过service对象去构造一个mService =new Messenger(service);然后就可以使用mService.send(msg)给服务端了。</p><p>我们消息的发送在Btn.onclick里面:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Message msgFromClient = Message.obtain(null, MSG_SUM, a, b);</span><br><span class="line">msgFromClient.replyTo = mMessenger;</span><br><span class="line">if (isConn)</span><br><span class="line">&#123;</span><br><span class="line">    //往服务端发送消息</span><br><span class="line">    mService.send(msgFromClient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么服务端会收到消息，处理完成会将结果返回，传到Client端的mMessenger中的Handler的handleMessage方法中。</p><p>布局文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout android:id=&quot;@+id/id_ll_container&quot;</span><br><span class="line">              xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">              xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">              android:layout_width=&quot;match_parent&quot;</span><br><span class="line">              android:layout_height=&quot;match_parent&quot;</span><br><span class="line">              android:orientation=&quot;vertical&quot;</span><br><span class="line">              android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;</span><br><span class="line">              android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;</span><br><span class="line">              android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;</span><br><span class="line">              android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;</span><br><span class="line">              tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/id_tv_callback&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Messenger Test!&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button android:id=&quot;@+id/id_btn_add&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;add&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><p>效果图</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-198183741f1ffa64?imageMogr2/auto-orient/strip" alt=""><br>可以看到，我们每点击一次按钮，就往服务器发送个消息，服务器拿到消息执行完成后，将结果返回。<br>整个通信的代码看起来还是相当的清爽的，那么大家有没有对其内部的原理有一丝的好奇呢？下面我们就来看下其内部是如何实现的。<br>对了，源码分析前，这里插一句，大家通过代码可以看到服务端往客户端传递数据是通过msg.replyTo这个对象的。那么服务端完全可以做到，使用一个List甚至Map去存储所有绑定的客户端的msg.replyTo对象，然后想给谁发消息都可以。甚至可以把A进程发来的消息，通过B进程的msg.replyTo发到B进程那里去。相关代码呢，可以参考官方的文档：<a href="http://developer.android.com/reference/android/app/Service.html" target="_blank" rel="noopener">service</a>，注意下拉找：Remote Messenger Service Sample。</p><p>三、源码分析<br>其实Messenger的内部实现的，实际上也是依赖于aidl文件实现的。<br>（一）首先我们看客户端向服务端通信<br>服务端<br>服务端的onBind是这么写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public IBinder onBind(Intent intent)</span><br><span class="line">    &#123;</span><br><span class="line">        return mMessenger.getBinder();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>那么点进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public IBinder getBinder() &#123;</span><br><span class="line">        return mTarget.asBinder();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到返回的是mTarget.asBinder();</p><p>mTarget是哪来的呢？</p><p>别忘了我们前面去构造mMessenger对象的代码：new Messenger(new Handler())；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Messenger(Handler target) &#123;</span><br><span class="line">       mTarget = target.getIMessenger();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>原来是Handler返回的，我们继续跟进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">final IMessenger getIMessenger() &#123;</span><br><span class="line">    synchronized (mQueue) &#123;</span><br><span class="line">        if (mMessenger != null) &#123;</span><br><span class="line">            return mMessenger;</span><br><span class="line">        &#125;</span><br><span class="line">        mMessenger = new MessengerImpl();</span><br><span class="line">        return mMessenger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> private final class MessengerImpl extends IMessenger.Stub &#123;</span><br><span class="line">    public void send(Message msg) &#123;</span><br><span class="line">        msg.sendingUid = Binder.getCallingUid();</span><br><span class="line">        Handler.this.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mTarget是一个MessengerImpl对象，那么asBinder实际上是返回this，也就是MessengerImpl对象；<br>这是个内部类，可以看到继承自IMessenger.Stub，然后实现了一个send方法，该方法就是将接收到的消息通过 Handler.this.sendMessage(msg);发送到handleMessage方法。<br>看到这，大家有没有想到什么，难道不觉得extends IMessenger.Stub这种写法异常的熟悉么？<br>我们传统写aidl文件，aapt给我们生成什么，生成IXXX.Stub类，然后我们服务端继承IXXX.Stub实现接口中的方法。<br>没错，其实这里内部其实也是依赖一个aidl生成的类，这个aidl位于：frameworks/base/core/<a href="http://lib.csdn.net/base/javase" target="_blank" rel="noopener">Java</a>/android/os/IMessenger.aidl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package android.os;  </span><br><span class="line"></span><br><span class="line">import android.os.Message;  </span><br><span class="line"></span><br><span class="line">/** @hide */  </span><br><span class="line">oneway interface IMessenger &#123;  </span><br><span class="line">    void send(in Message msg);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这，你应该明白了，Messenger并没有什么神奇之处，实际上，就是依赖该aidl文件生成的类，继承了IMessenger.Stub类，实现了send方法，send方法中参数会通过客户端传递过来，最终发送给handler进行处理。这里不理解，请详细看下<a href="http://blog.csdn.net/lmj623565791/article/details/38461079" target="_blank" rel="noopener">Android aidl Binder框架浅析</a>；</p><p><strong>客户端</strong><br>客户端首先通过onServiceConnected拿到sevice（Ibinder）对象，这里没什么特殊的，我们平时的写法也是这样的，只不过我们平时会这么写：</p><blockquote><p>IMessenger.Stub.asInterface(service)拿到接口对象进行调用；</p></blockquote><p>而，我们的代码中是<br>mService = new Messenger(service);<br>跟进去，你会发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Messenger(IBinder target) &#123;</span><br><span class="line">        mTarget = IMessenger.Stub.asInterface(target);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>soga，和我们平时的写法一模一样！<br>到这里就可以明白，客户端与服务端通信，实际上和我们平时的写法没有任何区别，通过编写aidl文件，服务端onBind利用Stub编写接口实现返回；客户端利用回调得到的IBinder对象，使用IMessenger.Stub.asInterface(target)拿到接口实例进行调用（内部实现，参考<a href="http://blog.csdn.net/lmj623565791/article/details/38461079" target="_blank" rel="noopener">Android aidl Binder框架浅析</a>）。<br>（2）服务端与客户端通信<br>那么，客户端与服务端通信的确没什么特殊的地方，我们完全也可以编写个类似的aidl文件实现；那么服务端是如何与客户端通信的呢？<br>还记得，客户端send方法发送的是一个Message，这个Message.replyTo指向的是一个mMessenger，我们在Activity中初始化的。<br>那么将消息发送到服务端，肯定是通过序列化与反序列化拿到Message对象，我们看下Message的反序列化的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Message</span><br><span class="line"></span><br><span class="line">private void readFromParcel(Parcel source) &#123;</span><br><span class="line">        what = source.readInt();</span><br><span class="line">        arg1 = source.readInt();</span><br><span class="line">        arg2 = source.readInt();</span><br><span class="line">        if (source.readInt() != 0) &#123;</span><br><span class="line">            obj = source.readParcelable(getClass().getClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">        when = source.readLong();</span><br><span class="line">        data = source.readBundle();</span><br><span class="line">        replyTo = Messenger.readMessengerOrNullFromParcel(source);</span><br><span class="line">        sendingUid = source.readInt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>主要看replyTo，调用的是Messenger.readMessengerOrNullFromParcel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Messenger readMessengerOrNullFromParcel(Parcel in) &#123;</span><br><span class="line">        IBinder b = in.readStrongBinder();</span><br><span class="line">        return b != null ? new Messenger(b) : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void writeMessengerOrNullToParcel(Messenger messenger,</span><br><span class="line">            Parcel out) &#123;</span><br><span class="line">        out.writeStrongBinder(messenger != null ? messenger.mTarget.asBinder()</span><br><span class="line">                : null);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>通过上面的writeMessengerOrNullToParcel可以看到，它将客户端的messenger.mTarget.asBinder()对象进行了恢复，客户端的message.mTarget.asBinder()是什么？</p><p>客户端也是通过Handler创建的Messenger，于是asBinder返回的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Messenger(Handler target) &#123;</span><br><span class="line">        mTarget = target.getIMessenger();</span><br><span class="line">    &#125;</span><br><span class="line"> final IMessenger getIMessenger() &#123;</span><br><span class="line">        synchronized (mQueue) &#123;</span><br><span class="line">            if (mMessenger != null) &#123;</span><br><span class="line">                return mMessenger;</span><br><span class="line">            &#125;</span><br><span class="line">            mMessenger = new MessengerImpl();</span><br><span class="line">            return mMessenger;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final class MessengerImpl extends IMessenger.Stub &#123;</span><br><span class="line">        public void send(Message msg) &#123;</span><br><span class="line">            msg.sendingUid = Binder.getCallingUid();</span><br><span class="line">            Handler.this.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   public IBinder getBinder() &#123;</span><br><span class="line">        return mTarget.asBinder();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>那么asBinder，实际上就是MessengerImpl extends IMessenger.Stub中的asBinder了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#IMessenger.Stub</span><br><span class="line"></span><br><span class="line">@Override </span><br><span class="line">public android.os.IBinder asBinder()</span><br><span class="line">&#123;</span><br><span class="line">return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么其实返回的就是MessengerImpl对象自己。到这里可以看到message.mTarget.asBinder()其实返回的是客户端的MessengerImpl对象。</p><p>最终，发送给客户端的代码是这么写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msgfromClient.replyTo.send(msgToClient);</span><br><span class="line"></span><br><span class="line">public void send(Message message) throws RemoteException &#123;</span><br><span class="line">        mTarget.send(message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这个mTarget实际上就是对客户端的MessengerImpl对象的封装，那么send(message)（屏蔽了transact/onTransact的细节），这个message最终肯定传到客户端的handler的handleMessage方法中。</p><p>好了，到此我们的源码分析就结束了~~</p><p>总结下：</p><ul><li>客户端与服务端通信，利用的aidl文件，没什么特殊的</li><li>服务端与客户端通信，主要是在传输的消息上做了处理，让Messager.replyTo指向的客户端的Messenger,而Messenger又持有客户端的一个Binder对象（MessengerImpl）。服务端正是利用这个Binder对象做的与客户端的通信。</li></ul><p>可以考虑自己编写aidl文件，实现下服务端对客户端的回调。</p><p>转载:<a href="http://blog.csdn.net/lmj623565791/article/details/47017485" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/47017485</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨进程 </tag>
            
            <tag> Messenger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>远程Service中的DeathRecipient和RemoteCallbackList</title>
      <link href="/2018/02/07/%E8%BF%9C%E7%A8%8BService%E4%B8%AD%E7%9A%84DeathRecipient%E5%92%8CRemoteCallbackList-1/"/>
      <url>/2018/02/07/%E8%BF%9C%E7%A8%8BService%E4%B8%AD%E7%9A%84DeathRecipient%E5%92%8CRemoteCallbackList-1/</url>
      <content type="html"><![CDATA[<p>DeathRecipient:用这个的原因是担心客户端异常销毁时,服务器收不到消息,造成资源浪费等异常<br>RemoteCallbackList:同样的,我们在服务端通知客户端消息的时候,也担心 服务端会异常销毁,导致客户端收不到消息</p><p>这两个类的使用demo在这里:<a href="http://www.cnblogs.com/punkisnotdead/p/5158016.html" target="_blank" rel="noopener">http://www.cnblogs.com/punkisnotdead/p/5158016.html</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 进程间的通信</title>
      <link href="/2018/02/07/Android-%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/02/07/Android-%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>在 Android 世界里，默认的每个 APP 是一个单独的进程。其实这样的描述是不严格的，因为咱们要研究 Android 的进程间通信，肯定除了和其他的 APP 通信外，还可能和同一个 APP 下的其他进程通信。在 Java 里，每一个虚拟机是一个进程，Android 也是虚拟机的机制，你每启动一个 APP，默认会启动一个虚拟机上，一个虚拟机就是一个进程。在 APP 里，有还被运行创建另外的进程，在主进程结束后，这个进程还可以独立运行。<br><a id="more"></a></p><p>咱们这里不讨论怎么创建进程，咱们先讨论怎么让进程通信。</p><p>Android 里有四个基础组件，Activity，Service，Broastcast，Content Provider。</p><p>####Activity<br>Activity 跨进程通信其实咱们很经常用，但是却忽略了。咱们通过实例化一个 Intent，然后 startActivity ，是不是把一个意图，也就是 Intent 发送出去了？那么最终被 start 的 Activity 完全可能是在另外一个进程里的啊。比如你发送微博，你在你的 APP 里，通过 Intent 把数据发送给了微博客户端，微博客户端发完微博又回到了你的 APP，这个时候你需要 startActivityForResult 和 onActivityResult 就解决了你的进程和微博客户端进程的通信。</p><p>####Service<br>Service 是最复杂的。一般情况下，Service 和应用同在一个进程下，并且是主线程的。所以，一般 Service 也叫本地Service。既然有本地的，就有外地的，叫做远程 Service，remote service。如果一个 Service 是 remote service 的话，那么这个 Service 就会运行在一个独立的进程里。</p><p>既然跨进程了，就需要了解一个东西，叫 AIDL ， Android Interface Definition Language。它是一个定义语言，说白了，你可以理解它是一个中间的桥梁，进程A得知道进程B的接口（也就是方法），才可以调用，传递参数，获取返回值。</p><p>####Content Provider<br>Android 里，使用SQLite 数据库来存储数据，一般使用 SQLiteOpenHelper 创建的数据库是私有的，不希望它被其他的应用程序读取，甚至写入的，这个机制能保护你应用的数据安全。但是有时候你又需要对外提供数据，如果说电话本，短信等等，其他的应用都可以获取到的。Content Provider 其实也是对 SQLite 的另外一种封装而已，它提供了另外一种数据的访问方式。这个时候，你就需要理解什么是 URI ，统一资源路径。URI 就相当于官话，你懂我懂大家懂，而私有数据库就相当于方言，别人一般听不懂，hacker 例外。</p><p>Content Provider 可以在不同的应用之间共享数据。</p><p>####Broadcast<br>广播也很好理解了，系统广播一句“狼来啦”，然后大家都知道手机快没电了。A 广播一个消息（其实也是一个Intent），然后其他的应用程序可以接收到这个广播（当然得注册监听这个广播）。</p><p>广播虽然好用，但是有些局限性，通过 Intent 来携带数据，一般不允许携带复杂的数据，特别是一些大对象。另外，广播的频率也是一个问题，小喇叭嘴太欠的话，会遭人恨的。</p><p>####Bound Services<br>先来一段官方的解释：A bound service is the server in a client-server interface. A bound service allows components (such as activities) to bind to the service, send requests, receive responses, and even perform interprocess communication (IPC).</p><p>一个　Bound Service　可以和其他组件（当然也包括　Service　本身了）进行交互，也包括咱们要说的跨进程通信了。</p><p>一说到　Android　的跨进程通信，大家都想到了　AIDL，其实不仅是　AIDL，包括咱们上面说的，可以通过　Intent　的发送，来进行跨进程的通信，除此之外，用　bindService 的方式，也不仅仅是 AIDL。</p><p>从创建 Bound Service 开始。一般咱们使用 bindService 来获取一个 iBinder 对象，然后通过 iBinder 对象来与 Service 进行通信。</p><p>####Extending the Binder class<br>最一般的方式，就是继承于 Binder（Binder implements IBinder），然后写你想要的方法，在 Service 的 onBind 的方法里返回一个 Binder 对象。在其他组件里（比如 Activity）通过 bindService 来获取这个 Binder 对象，然后就可以和 Service 进行交互了。</p><p>这种方式适用于调用 Service 的组件和 Service 在同一个进程里。也就是没有跨进程啥事。</p><p>官方文档有这么一句话：The only reason you would not create your interface this way is because your service is used by other applications or across separate processes.也就是说，除非你真的需要跨进程，不然这个方式已经够用了，不要瞎搞跨进程。</p><p>####Using a Messenger<br>messenger 的翻译是报信者，送信者，信使。</p><p>这种方式，需要你在 Service 里实现一个 Handler 的子类，跟普通的 Handler 一样一样的。然后还需要一个 Messenger 对象，在 onBind 方法，通过 Messenger.getBinder() 获取一个 Binder。</p><p>(Messenger底层实现原理就是AIDL，它对AIDL做了一次封装，所以使用方法会比AIDL简单，由于它的效率比较低，一次只能处理一次请求，所以不存在线程同步的问题。)</p><p>Activity 通过 bindService 获取到 Binder 后，new Messenger(binder) ，Messenger 有个 send 方法，可以把一个 Message 对象发送出去，Service 的 Handler 就会收到这个 Message。跟咱们平常使用的 Handler 和 Message 的方式基本一样，只不过它是跨进程的。</p><p>不过到目前为止，这个通信是单向的，由 Activity 向 Service 发送，如果 Service 执行完某些操作后，需要给个响应呢，这个时候，需要 Activity 也实现一个 Messenger ，然后在 send() 的时候需要把这个 Messenger 也传过去。这样在 Service 执行完任务后，也会发送一个 Message 给 Activity。这样就实现了双方的通信。</p><p>这个消息队列是在一个线程里去管理的，所以你的 Service 是线程安全的，你不需要额外的设计来保证线程安全。</p><p><strong>使用这种方式需要注意, Messenger发送的Message里,传递的数据要保存在message的data里,例如message.getData().xxx,如果保存在obj里会报错</strong></p><p>This is the simplest way to perform interprocess communication(IPC), because the Messenger queues all requests into a single thread so that you don’t have to design your service to be thread-safe.</p><p>####AIDL<br>下面就开始 AIDL 了，这是大家很期待的，但是又是 Android 官方特别不推荐的方式。</p><p>AIDL (Android Interface Definition Language) performs all the work to decompose objects into primitives that the operating system can understand and marshall them across processes to perform IPC. The previous technique, using a Messenger, is actually based on AIDL as its underlying structure. As mentioned above, the Messenger creates a queue of all the client requests in a single thread, so the service receives requests one at a time. <strong>If, however, you want your service to handle multiple requests simultaneously, then you can use AIDL directly.</strong> In this case, your service must be capable of multi-threading and be built thread-safe.</p><p>看粗体的字。然后再看这段话下面还有一段话：</p><p><strong>Note:</strong> Most applications <strong>should not</strong> use AIDL to create a bound service, because it may require multithreading capabilities and can result in a more complicated implementation. As such, AIDL is not suitable for most applications and this document does not discuss how to use it for your service. If you’re certain that you need to use AIDL directly, see the AIDL document.</p><p>这段话的粗体不是我整的，是文档上的。意思就是说大部分应用不需要 AIDL 的。主要的问题出在，如果你使用 AIDL，你必须处理好多线程，并且保证线程安全。</p><p>这里不具体描述怎么使用 AIDL，大概就是需要写一个 aidl 文件，然后显示一个 Stub 的子类，其实 Stub 是 extends Binder，然后在 Service 的 onBind() 方法里返回一个 Stub 对象。其他组件还是通过 bindService 的方式获取这个 Binder，并且可以直接调用。</p><p>就是因为这里是直接调用，所以就调用者可以在任意线程里，任意时间调用，所以你需要处理好多线程，处理好线程安全。</p><p>以上就是 Android 里跟线程有关的内容。随时补充。</p><p>— EOF — </p><p>转载:<a href="http://www.binkery.com/archives/489.html" target="_blank" rel="noopener">http://www.binkery.com/archives/489.html</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Service的startService与bindService的区别</title>
      <link href="/2018/02/07/Service%E7%9A%84startService%E4%B8%8EbindService%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/02/07/Service%E7%9A%84startService%E4%B8%8EbindService%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>Android执行Service有两种方法，一种是startService，一种是bindService。下面让我们一起来聊一聊这两种执行Service方法的区别。<br><a id="more"></a></p><p><img src="http://upload-images.jianshu.io/upload_images/545982-707a3bbe52ae3c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>#####1、生命周期上的区别</p><p>执行startService时，Service会经历onCreate-&gt;onStartCommand。当执行stopService时，直接调用onDestroy方法。调用者如果没有stopService，Service会一直在后台运行，下次调用者再起来仍然可以stopService。</p><p>执行bindService时，Service会经历onCreate-&gt;onBind。这个时候调用者和Service绑定在一起。调用者调用unbindService方法或者调用者Context不存在了（如Activity被finish了），Service就会调用onUnbind-&gt;onDestroy。这里所谓的绑定在一起就是说两者共存亡了。</p><p>多次调用startService，该Service只能被创建一次，即该Service的onCreate方法只会被调用一次。但是每次调用startService，onStartCommand方法都会被调用。Service的onStart方法在API 5时被废弃，替代它的是onStartCommand方法。</p><p>第一次执行bindService时，onCreate和onBind方法会被调用，但是多次执行bindService时，onCreate和onBind方法并不会被多次调用，即并不会多次创建服务和绑定服务。</p><p>#####2、调用者如何获取绑定后的Service的方法</p><p>onBind回调方法将返回给客户端一个IBinder接口实例，IBinder允许客户端回调服务的方法，比如得到Service运行的状态或其他操作。我们需要IBinder对象返回具体的Service对象才能操作，所以说具体的Service对象必须首先实现Binder对象。</p><p>#####3、既使用startService又使用bindService的情况</p><p>如果一个Service又被启动又被绑定，则该Service会一直在后台运行。首先不管如何调用，onCreate始终只会调用一次。对应startService调用多少次，Service的onStart方法便会调用多少次。Service的终止，需要unbindService和stopService同时调用才行。不管startService与bindService的调用顺序，如果先调用unbindService，此时服务不会自动终止，再调用stopService之后，服务才会终止；如果先调用stopService，此时服务也不会终止，而再调用unbindService或者之前调用bindService的Context不存在了（如Activity被finish的时候）之后，服务才会自动停止。</p><p>那么，什么情况下既使用startService，又使用bindService呢？</p><p>如果你只是想要启动一个后台服务长期进行某项任务，那么使用startService便可以了。如果你还想要与正在运行的Service取得联系，那么有两种方法：一种是使用broadcast，另一种是使用bindService。前者的缺点是如果交流较为频繁，容易造成性能上的问题，而后者则没有这些问题。因此，这种情况就需要startService和bindService一起使用了。</p><p>另外，如果你的服务只是公开一个远程接口，供连接上的客户端（Android的Service是C/S架构）远程调用执行方法，这个时候你可以不让服务一开始就运行，而只是bindService，这样在第一次bindService的时候才会创建服务的实例运行它，这会节约很多系统资源，特别是如果你的服务是远程服务，那么效果会越明显（当然在Servcie创建的时候会花去一定时间，这点需要注意）。    </p><p>#####4、本地服务与远程服务</p><p>本地服务依附在主进程上，在一定程度上节约了资源。本地服务因为是在同一进程，因此不需要IPC，也不需要AIDL。相应bindService会方便很多。缺点是主进程被kill后，服务变会终止。</p><p>远程服务是独立的进程，对应进程名格式为所在包名加上你指定的android:process字符串。由于是独立的进程，因此在Activity所在进程被kill的是偶，该服务依然在运行。缺点是该服务是独立的进程，会占用一定资源，并且使用AIDL进行IPC稍微麻烦一点。</p><p>对于startService来说，不管是本地服务还是远程服务，我们需要做的工作都一样简单。</p><p>5、代码实例</p><p>startService启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class LocalService1 extends Service &#123;</span><br><span class="line">    /**</span><br><span class="line">    * onBind 是 Service 的虚方法，因此我们不得不实现它。</span><br><span class="line">    * 返回 null，表示客服端不能建立到此服务的连接。</span><br><span class="line">    */</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onStartCommand(Intent intent, int startId, int flags) &#123;</span><br><span class="line">        super.onStartCommand(intent, startId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>bindService绑定服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class LocalService extends Service &#123;</span><br><span class="line"></span><br><span class="line">    public SimpleBinder sBinder;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 在 Local Service 中我们直接继承 Binder 而不是 IBinder,因</span><br><span class="line">    为 Binder 实现了 IBinder 接口，这样我们可以** 少做很多工</span><br><span class="line">    作。</span><br><span class="line">    */</span><br><span class="line">    public class SimpleBinder extends Binder&#123;</span><br><span class="line">        /**</span><br><span class="line">        * 获取 Service 实例</span><br><span class="line">        * @return</span><br><span class="line">        */</span><br><span class="line">        public LocalService getService()&#123;</span><br><span class="line">            return LocalService.this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int add(int a, int b)&#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        // 创建 SimpleBinder</span><br><span class="line">        sBinder = new SimpleBinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        // 返回 SimpleBinder 对象</span><br><span class="line">        return sBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码关键之处，在于 onBind(Intent) 这个方法 返回了一个实现了 IBinder 接口的对象，这个对象将用于绑定Service 的 Activity 与 Local Service 通信。</p><p>下面是 Activity 中的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class Main extends Activity &#123;</span><br><span class="line">    private final static String TAG = &quot;SERVICE_TEST&quot;;</span><br><span class="line">    private ServiceConnection sc;</span><br><span class="line">    private boolean isBind;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line">        sc = new ServiceConnection() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            @Override</span><br><span class="line">            public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">                LocalService.SimpleBinder sBinder = (LocalService.SimpleBinder)service;</span><br><span class="line">                Log.v(TAG, &quot;3 + 5 = &quot; + sBinder.add(3, 5));</span><br><span class="line">                Log.v(TAG, sBinder.getService().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnBind).setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                bindService(new Intent(Main.this, LocalService.class), sc, Context.BIND_AUTO_CREATE);</span><br><span class="line">                isBind = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnUnbind).setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                if(isBind)&#123;</span><br><span class="line">                    unbindService(sc);</span><br><span class="line">                    isBind = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#####6、在AndroidManifest.xml里Service元素常见选项<br>|属性|作用|<br>|——–|——–|<br>|android:name|服务类名|<br>|android:label|服务的名字，如果此项不设置，那么默认显示的服务名则为类名|<br>|android:icon|服务的图标|<br>|android:permission|申明此服务的权限，这意味着只有提供了该权限的应用才能控制或连接此服务|<br>|android:process|表示该服务是否运行在另外一个进程，如果设置了此项，那么将会在包名后面加上这段字符串表示另一进程的名字|<br>|android:enabled|表示是否能被系统实例化，为true表示可以，为false表示不可以，默认为true|<br>|android:exported|表示该服务是否能够被其他应用程序所控制或连接，不设置默认此项为 false|</p><p>转载:<a href="https://my.oschina.net/tingzi/blog/376545" target="_blank" rel="noopener">https://my.oschina.net/tingzi/blog/376545</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> AndroidManifest.xml文件详解（service）</title>
      <link href="/2018/02/07/AndroidManifest-xml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%EF%BC%88service%EF%BC%89/"/>
      <url>/2018/02/07/AndroidManifest-xml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%EF%BC%88service%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>语法（SYNTAX）：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">        android:enabled=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">        android:exported[&quot;true&quot; | &quot;false&quot;]         </span><br><span class="line">        android:icon=&quot;drawable resource&quot;</span><br><span class="line">        android:label=&quot;string resource&quot;</span><br><span class="line">        android:name=&quot;string&quot; </span><br><span class="line">        android:permission=&quot;string&quot;         </span><br><span class="line">        android:process=&quot;string&quot;&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure></p><p><strong>被包含于（CONTAINED IN）：</strong></p><p><application><br><strong>可能包含的元素（CAN CONTAIN）：</strong></application></p><p><intent-filter></intent-filter></p><p><meta-data></meta-data></p><p><strong>说明（DESCRIPTION）：</strong><br>这个元素用于声明一个服务（Service类的子类）作为应用程序的组件之一。跟Activity不一样，服务没有可见的用户界面。它们被用于实现长时的后台操作，或提供能够被其他应用程序调用的通信API。<br>所有的服务都必须用清单文件中的<service>元素来代表。任何没有在清单中声明的服务都不能被系统看到，也不会被运行。</service></p><p><strong>属性（ATTRIBUTES）：</strong></p><p><strong>android:enabled</strong><br>这个属性用于指示该服务是否能够被实例化。如果设置为true，则能够被实例化，否则不能被实例化。默认值是true。</p><p><application>元素有它自己的enabled属性，它的这个属性适用于应用中所有的组件，包括service组件。对于被启用的服务，<application>和<service>元素的enabled属性都必须是true（默认值都是true）。如果有一个元素的enabled属性被设置为false，该服务就会被禁用，而不能被实例化。</service></application></application></p><p><strong>android:exported</strong><br>这个属性用于指示该服务是否能够被其他应用程序组件调用或跟它交互。如果设置为true，则能够被调用或交互，否则不能。设置为false时，只有同一个应用程序的组件或带有相同用户ID的应用程序才能启动或绑定该服务。<br>它的默认值依赖与该服务所包含的过滤器。没有过滤器则意味着该服务只能通过指定明确的类名来调用，这样就是说该服务只能在应用程序的内部使用（因为其他外部使用者不会知道该服务的类名），因此这种情况下，这个属性的默认值是false。另一方面，如果至少包含了一个过滤器，则意味着该服务可以给外部的其他应用提供服务，因此默认值是true。<br>这个属性不是限制把服务暴露给其他应用程序的唯一方法。还可以使用权限来限制能够跟该服务交互的外部实体。</p><p><strong>android:icon</strong><br>这个属性定义了一个代表服务的图标，它必须要引用一个包含图片定义的可绘制资源。如果这个属性没有设置，则会使用<application>元素的icon属性所设定的图标来代替。<br>无论是<application>元素设置的图标，还是<service>元素所设置的图标，它们都是该服务所有的Intent过滤器的默认图标。</service></application></application></p><p><strong>android:label</strong><br>这个属性用于设定一个要显示给用户的服务的名称。如果没有设置这个属性，则会使用<application>元素的label属性值来代替。<br>无论是<service>设定的标签，还是<application>元素设定的标签，它们都是该服务所有的Intent过滤器的默认标签。<br>这个标签应用引用一个字符串资源，以便它能够像用户界面中的字符串一样能够被本地化。但是，为了开发应用程序方便，也可以使用原生字符串来设置这个属性。</application></service></application></p><p><strong>android:name</strong><br>这个属性用于指定实现该服务的Service子类的类名。它应该是完整的Java类名（如：com.example.project.RoomService）。但是，也可以使用简写（如：.RoomService），系统会把<manifest>元素中package属性所设定的值添加到简写名称的前面。<br>一旦发布了应用程序，就不应该改变这个名称（除非android:exported=”false”）。<br>这个属性没有默认值，名称必须要指定。</manifest></p><p><strong>android:permission</strong><br>这个属性定义了要启动或绑定服务的实体必须要有的权限。如果调用者的startService()、bindService()和stopService()方法没有被授予这个权限，那么这些方法就不会工作，并且Intent对象也不会发送给改服务。<br>如果这个属性没被设置，那么通过<appliction>元素的permission属性所设定的权限就会适用于该服务。如果<application>元素也没有设置权限，则该服务不受权限保护。</application></appliction></p><p><strong>android:process</strong><br>这个属性用于设定服务所运行的进程名称。通常，应用程序的所有组件都运行在给应用程序创建的进程中，进程名与应用程序的包名相同。<application>元素的process属性能够给应用程序的所有组件设置一个不同的默认名称。但是每个组件自己的process属性都能够覆盖这个默认值，这样允许把应用程序分离到不同的多个进程中。<br>如果这个属性值用“:”开头，则在需要的时候系统会创建一个新的，应用程序私有的进程，并且该服务也会运行在这个进程中。如果这个属性值用小写字母开头，那该服务就会运行在以这个属性值命名的全局进程中，它提供了使其工作的权限。这样就允许不同的应用程序组件来共享这个进程，从而降低资源的使用。</application></p><p><strong>被引入的版本（INTRODUCED IN）：</strong><br>API Level 1</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidManifest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用adb dumpsys 命令查看app占用内存</title>
      <link href="/2018/02/07/%E4%BD%BF%E7%94%A8adb-dumpsys-%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8Bapp%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/"/>
      <url>/2018/02/07/%E4%BD%BF%E7%94%A8adb-dumpsys-%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8Bapp%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>adb是一个非常强大的工具，使用adb查看应用程序内存使用情况可按如下格式在命令行里查看内存使用情况：<br>adb shell dumpsys meminfo &lt;package_name&gt;<br>其中，package_name 也可以换成程序的pid，pid可以通过 adb shell top | grep app_name 来查找，下图是某个程序的内存使用情况：<br><img src="http://upload-images.jianshu.io/upload_images/545982-75efbde6fda86be3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">重点关注如下几个字段：<br>（1） Native/Dalvik 的 Heap 信息具体在上面的第一行和第二行，它分别给出的是JNI层和Java层的内存分配情况，如果发现这个值一直增长，则代表程序可能出现了内存泄漏。<br>（2） Total 的 PSS 信息这个值就是你的应用真正占据的内存大小，通过这个信息，你可以轻松判别手机中哪些程序占内存比较大了。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android模拟app被系统回收掉（需要root权限）</title>
      <link href="/2018/02/07/Android%E6%A8%A1%E6%8B%9Fapp%E8%A2%AB%E7%B3%BB%E7%BB%9F%E5%9B%9E%E6%94%B6%E6%8E%89%EF%BC%88%E9%9C%80%E8%A6%81root%E6%9D%83%E9%99%90%EF%BC%89/"/>
      <url>/2018/02/07/Android%E6%A8%A1%E6%8B%9Fapp%E8%A2%AB%E7%B3%BB%E7%BB%9F%E5%9B%9E%E6%94%B6%E6%8E%89%EF%BC%88%E9%9C%80%E8%A6%81root%E6%9D%83%E9%99%90%EF%BC%89/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 找到进程PID</span><br><span class="line">adb shell ps | grep your.app.package</span><br><span class="line"># 结果类似下面这样:</span><br><span class="line">USER      PID   PPID  VSIZE  RSS     WCHAN    PC         NAME</span><br><span class="line">u0_a198   21997 160   827940 22064 ffffffff 00000000 S your.app.package</span><br><span class="line"># kill掉该进程,如果说没有权限就先执行adb root</span><br><span class="line">adb shell kill -9 21997</span><br><span class="line"># app已经被模拟回收了</span><br></pre></td></tr></table></figure><a id="more"></a><p>我习惯用下面的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 找到进程PID</span><br><span class="line">adb shell</span><br><span class="line">ps | grep your.app.package</span><br><span class="line"># 结果类似下面这样:</span><br><span class="line">USER      PID   PPID  VSIZE  RSS     WCHAN    PC         NAME</span><br><span class="line">u0_a198   21997 160   827940 22064 ffffffff 00000000 S your.app.package</span><br><span class="line"># kill掉该进程,如果说没有权限就先执行su</span><br><span class="line">kill -9 21997</span><br><span class="line"># app已经被模拟回收了</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android实现通过浏览器点击链接打开本地应用（APP）并拿到浏览器传递的数据</title>
      <link href="/2018/02/07/android%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%BF%87%E6%B5%8F%E8%A7%88%E5%99%A8%E7%82%B9%E5%87%BB%E9%93%BE%E6%8E%A5%E6%89%93%E5%BC%80%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E5%B9%B6%E6%8B%BF%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%A0%E9%80%92%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/02/07/android%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%BF%87%E6%B5%8F%E8%A7%88%E5%99%A8%E7%82%B9%E5%87%BB%E9%93%BE%E6%8E%A5%E6%89%93%E5%BC%80%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E5%B9%B6%E6%8B%BF%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%A0%E9%80%92%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>点击浏览器中的URL链接，启动特定的App。<br>首先做成HTML的页面，页面内容格式如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;scheme://host/path?key=value&quot;&gt;启动应用程序&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>这一句就可以了。path,key,value都可以为空<br>作为测试好好写了一下，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;myapp://test.com/openwith?name=zhangsan&amp;age=26&quot;&gt;启动应用程序&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>接下来是Android端。<br>如果要启动的Activity不是MainActivity,则需要加上如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter&gt;  </span><br><span class="line">    &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt;  </span><br><span class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;  </span><br><span class="line">    &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;  </span><br><span class="line">    &lt;data android:scheme=&quot;myapp&quot; android:host=&quot;test.com&quot; android:pathPrefix=&quot;/openwith&quot;/&gt;  </span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure></p><p>本文参考<a href="http://blog.csdn.net/geekpark/article/details/16118457" target="_blank" rel="noopener">http://blog.csdn.net/geekpark/article/details/16118457</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用retrolambda使android支持lambda表达式简化代码</title>
      <link href="/2018/02/07/%E4%BD%BF%E7%94%A8retrolambda%E4%BD%BFandroid%E6%94%AF%E6%8C%81lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/02/07/%E4%BD%BF%E7%94%A8retrolambda%E4%BD%BFandroid%E6%94%AF%E6%8C%81lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>在github上搜索retrolambda会发现有2个最多星的,分别是evant/gradle-retrolambda和orfjackal/retrolambda。他们之间是啥关系呢？简单来说，gradle-retrolambda只是AS的一个gradle插件，他里面也依赖第二个开源库orfjackal/retrolambda。所以这里我们直接选第一个进行配置。<br><a id="more"></a></p><p>在module的gradle.build中加入下面的代码即可在项目中使用lambda表达式了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">apply plugin: &apos;me.tatarka.retrolambda&apos;</span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;me.tatarka:gradle-retrolambda:3.4.0&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        targetCompatibility 1.8</span><br><span class="line">        sourceCompatibility 1.8</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">//指定源码编译的级别,使用下列代码,会将代码编译到兼容1.6的字节码格式,android2.3.3-4.4使用的jdk6</span><br><span class="line">retrolambda &#123;</span><br><span class="line">    javaVersion JavaVersion.VERSION_1_6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>解决No cached version of net.orfjackal.retrolambda:retrolambda:x.x.x available for offline mode.</title>
      <link href="/2018/02/07/%E8%A7%A3%E5%86%B3No-cached-version-of-net-orfjackal-retrolambda-retrolambda-x-x-x-available-for-offline-mode/"/>
      <url>/2018/02/07/%E8%A7%A3%E5%86%B3No-cached-version-of-net-orfjackal-retrolambda-retrolambda-x-x-x-available-for-offline-mode/</url>
      <content type="html"><![CDATA[<p>转载:<a href="https://my.oschina.net/zhangdengjiexuyu/blog/701311" target="_blank" rel="noopener">https://my.oschina.net/zhangdengjiexuyu/blog/701311</a><br><a id="more"></a></p><p>为了使用java8 的lambda表达式特性，特地在项目中添加了 me.tatarka:gradle-retrolambda插件，按照github上的指南，配置好gradle之后，同步项目是没问题的，但是运行打包安装的时候就出了问题，报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No cached version of net.orfjackal.retrolambda:retrolambda:x.x.x available for offline mode</span><br></pre></td></tr></table></figure><p>看到offline字眼，果断把Gradle配置项的Global Gradle settings的offline work 取消了，结果还是出现了改错误，实在不行，找不到办法，google了一下，发现了问题的所在：compile部分的运行参数之前加了–offline参数了，去除改参数即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-3e6b43967c84d670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/545982-95a63f20f45ca8ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>设置gradle离线模式的地方有两处，如上图所示</p><p>对原文的补充:在github上搜索retrolambda会发现有2个最多星的,分别是evant/gradle-retrolambda和orfjackal/retrolambda。他们之间是啥关系呢？简单来说，gradle-retrolambda只是AS的一个gradle插件，他里面也依赖第二个开源库orfjackal/retrolambda。所以这里我们直接选第一个进行配置。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命令查看keystore签名</title>
      <link href="/2018/02/07/%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8Bkeystore%E7%AD%BE%E5%90%8D/"/>
      <url>/2018/02/07/%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8Bkeystore%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>keytool -list -v -keystore “.keystore签名文件的绝对路径”</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>adb常用命令</title>
      <link href="/2018/02/07/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/02/07/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>1.当有多个设备online时，命令行窗口通过adb连接指定设备方法</strong><br><a id="more"></a></p><ol><li>通过adb devices命令获取所有online设备的serial number。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;adb devices</span><br><span class="line">List of devices </span><br><span class="line">attachedemulator-5554   device</span><br><span class="line">SH0A6PL00243    device</span><br></pre></td></tr></table></figure></li></ol><p>上面表示，当前有两个设备online，第一个emulator-5554是模拟器，后一个是真机会SH0A6PL00243。</p><ol start="2"><li>通过adb -s <serial number=""> cmd向设备发送adb命令。<br>比如：运行命令shell。<br>C:\Users\Administrator&gt;adb -s SH0A6PL00243 shell<br>比如：down一个应用的[数据库]到本地f:\test目录下面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;adb -s SH0A6PL00243 pull data/data/com.android.tencent/databases/AgendaDetails.db f:\test</span><br><span class="line">555 KB/s (5120 bytes in 0.009s)</span><br></pre></td></tr></table></figure></serial></li></ol><p>运行其它命令和运行pull命令一样的，只是在adb和cmd之间需要额外添加-s <serial number="">即可。</serial></p><p><strong>2.模拟app被系统回收掉（需要root权限）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># find the process id</span><br><span class="line">adb shell ps</span><br><span class="line"># then find the line with the package name of your app</span><br><span class="line"># Mac/Unix: save some time by using grep:</span><br><span class="line">adb shell ps | grep your.app.package</span><br><span class="line"># The result should look like:</span><br><span class="line"># USER      PID   PPID  VSIZE  RSS     WCHAN    PC         NAME</span><br><span class="line"># u0_a198   21997 160   827940 22064 ffffffff 00000000 S your.app.package</span><br><span class="line"># Kill the app by PID</span><br><span class="line">adb shell kill -9 21997</span><br><span class="line"># the app is now killed</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android databinding框架开发环境配置</title>
      <link href="/2018/02/07/android-databinding%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/02/07/android-databinding%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>这几天学dagger2,无意中看到Data Binding Library这么个东西,Data Binding 框架如果能够推广开来，也许 <strong>RoboGuice、ButterKnife</strong> 这样的依赖注入框架会慢慢失去市场，因为在 Java 代码中直接使用 View变量的情况会越来越少。网上有很多配置databinding的方法,有些是错误的,所以在此记录一下<br><a id="more"></a></p><pre><code>配置databinding</code></pre><p>如果直接在xml使用@{}肯定会出错的,网上很多只说了怎么用,直接用@{}肯定会报错,我们首先要配置databinding,方法如下:</p><p><strong>现在只需在 gradle 中加入 databinding 就可以使用了，之前的 plugin 和 classpath 都不需要了，现在的 databinding 作为 support lib 存在，所以使用之前需要去 SDK Manager 中更新 support 包。：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  dataBinding &#123;</span><br><span class="line">    enabled = true</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们就可以使用Data Binding了,具体使用方法网上有很多,我就不再赘述了</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ListView从底部开始绘制和新item自动移动到底部</title>
      <link href="/2018/02/07/ListView%E4%BB%8E%E5%BA%95%E9%83%A8%E5%BC%80%E5%A7%8B%E7%BB%98%E5%88%B6%E5%92%8C%E6%96%B0item%E8%87%AA%E5%8A%A8%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/"/>
      <url>/2018/02/07/ListView%E4%BB%8E%E5%BA%95%E9%83%A8%E5%BC%80%E5%A7%8B%E7%BB%98%E5%88%B6%E5%92%8C%E6%96%B0item%E8%87%AA%E5%8A%A8%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/</url>
      <content type="html"><![CDATA[<p>今天做聊天,才知道ListView的2个属性,android:stackFromBottom和android:transcriptMode</p><p>android:stackFromBottom<br><a id="more"></a></p><pre><code>true的时候,ListView内容就从底部开始显示,如果只有一条内容这条内容就在列表的最底部,默认是false</code></pre><p>android:transcriptMode</p><pre><code>设置列表的transcriptMode模式，该模式指定列表添加新的选项的时候，是否自动滑动到底部，显示新的选项。 disabled：取消transcriptMode模式，默认的 normal：当接受到数据集合改变的通知，并且仅仅当最后一个选项已经显示在屏幕的时候，自动滑动到底部。 alwaysScroll：无论当前列表显示什么选项，列表将会自动滑动到底部显示最新的选项。 </code></pre>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> ListView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决ScrollView里如果有动态更新的ChildView时会自动滚动到底部的方法</title>
      <link href="/2018/02/07/%E8%A7%A3%E5%86%B3ScrollView%E9%87%8C%E5%A6%82%E6%9E%9C%E6%9C%89%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E7%9A%84ChildView%E6%97%B6%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/%E8%A7%A3%E5%86%B3ScrollView%E9%87%8C%E5%A6%82%E6%9E%9C%E6%9C%89%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E7%9A%84ChildView%E6%97%B6%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在这个ChildView的xml属性里加上</p><p>android:focusable=”true”<br>android:focusableInTouchMode=”true”</p><p>就可以解决</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ScrollView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android studio 的配置</title>
      <link href="/2018/02/07/android-studio-%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/02/07/android-studio-%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>因为GFW,android studio不是下载了就可以用的,最常见的是gradle的问题,现在把自己遇到的问题记录一下,以后再配置就直接看文章就可以了<br><a id="more"></a></p><p>1.gradle问题,下载最新gradle,然后android studio指定gradle目录</p><p>2.虽然指定了gradle目录,但是build的时候还得FQ,然后android studio会下载一些文件,这些文件就很小了,FQ下没关系</p><p>3.apply plugin: ‘com.android.application’这句话会报错,需要添加下面的代码到build.gradle,与android同级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral() // or jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.1.2&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.junit报错,FQ可以解决,或者直接删掉testCompile ‘junit:junit:4.12’</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windowSoftInputMode属性讲解</title>
      <link href="/2018/02/07/windowSoftInputMode%E5%B1%9E%E6%80%A7%E8%AE%B2%E8%A7%A3/"/>
      <url>/2018/02/07/windowSoftInputMode%E5%B1%9E%E6%80%A7%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><strong>windowSoftInputMode属性讲解</strong>（下面这段内容我参考别人的博客，并加入我的一些意见）<br>我们从这个属性的名称中，可以很直观的看出它的作用，这个属性就是来设置窗口软键盘的交互模式的。android:windowSoftInputMode属性一共有9个取值，分别是：<br><a id="more"></a></p><p>【A】stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置<br>【B】stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示<br>【C】stateHidden：用户选择activity时，软键盘总是被隐藏<br>【D】stateAlwaysHidden：当该Activity主窗口获取焦点时，软键盘也总是被隐藏的<br>【E】stateVisible：软键盘通常是可见的<br>【F】stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态<br>【G】adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示<br>【H】adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间<br>【I】adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分</p><p>来源:<a href="http://www.bozhiyue.com/anroid/boke/2016/0604/177871.html" target="_blank" rel="noopener">http://www.bozhiyue.com/anroid/boke/2016/0604/177871.html</a></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidManifest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小米手机无法打开程序报错Unable to instantiate application com.android.tools.fd.runtime.BootstrapApplication的解决办法</title>
      <link href="/2018/02/07/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99Unable-to-instantiate-application-com-android-tools-fd-runtime-BootstrapApplication%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/07/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99Unable-to-instantiate-application-com-android-tools-fd-runtime-BootstrapApplication%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>打开studio的setting 然后<br><strong>Preferences -&gt; Build, Execution, Deployment -&gt; Instant Run -&gt; Enable Instant Run</strong><br>把勾去掉，就可以了</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
            <tag> 小米 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何让自己的app尽量不被系统杀死</title>
      <link href="/2018/02/07/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84app%E5%B0%BD%E9%87%8F%E4%B8%8D%E8%A2%AB%E7%B3%BB%E7%BB%9F%E6%9D%80%E6%AD%BB/"/>
      <url>/2018/02/07/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84app%E5%B0%BD%E9%87%8F%E4%B8%8D%E8%A2%AB%E7%B3%BB%E7%BB%9F%E6%9D%80%E6%AD%BB/</url>
      <content type="html"><![CDATA[<p>1.<br>在Service中重写下面的方法，这个方法有三个返回值， START_STICKY是service被kill掉后自动重写创建<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override </span><br><span class="line">public int onStartCommand(Intent intent, int flags, int startId)&#123; </span><br><span class="line">  return START_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.<br>在Service的onDestroy()中重启Service.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onDestroy() &#123; </span><br><span class="line">　　super.onDestroy();</span><br><span class="line">　　Intent localIntent = new Intent(); </span><br><span class="line">　　localIntent.setClass(this, MyService.class); //销毁时重新启动Service </span><br><span class="line">　　this.startService(localIntent); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.<br>在mf.xml的application的节点中添加android:persistent=”true”<br>这个方法,必须要system app,所以这个基本没用</p><p>4.<br>fork进程的方式做守护,在5.0已经不行了</p><p>5.<br>在Service里创建一个静态内部Service,然后启动外部Service和静态内部Service为前台服务,然后停止这个静态内部Service,这样通知栏虽然不显示通知但是外部Service仍然是前台Service,这是利用android的一个bug,不过高版本应该也修复了,参考</p><p><a href="http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/" target="_blank" rel="noopener">http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/</a><br>(最下面有个demo示例)</p><p><a href="http://blog.csdn.net/lhd201006/article/details/50920464" target="_blank" rel="noopener">http://blog.csdn.net/lhd201006/article/details/50920464</a></p><blockquote><p>保活这个东西,我查了很多很多的资料了,在现在这个环境,我觉得保活的控制权各大厂商已经交给了用户,比如在华为EMUI系统和MIUI系统,锁屏后默认都杀死应用,想要应用不被杀死,就得自己开启锁屏不被杀或者开启自启动选项,如果做推送,就用手机厂商自己的推送服务,我个人也觉得这种方式很好,否则,你可以想一下android当初刚出来的时候,各种软件有多么的流氓,就知道现在为什么把控制权交给用户了</p></blockquote>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>如何使用Service的Context弹出Dialog对话框，即全局性对话框</title>
      <link href="/2018/02/07/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Service%E7%9A%84Context%E5%BC%B9%E5%87%BADialog%E5%AF%B9%E8%AF%9D%E6%A1%86%EF%BC%8C%E5%8D%B3%E5%85%A8%E5%B1%80%E6%80%A7%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
      <url>/2018/02/07/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Service%E7%9A%84Context%E5%BC%B9%E5%87%BADialog%E5%AF%B9%E8%AF%9D%E6%A1%86%EF%BC%8C%E5%8D%B3%E5%85%A8%E5%B1%80%E6%80%A7%E5%AF%B9%E8%AF%9D%E6%A1%86/</url>
      <content type="html"><![CDATA[<p>在dialog.show()语句前加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);</span><br></pre></td></tr></table></figure></p><p>然后在AndroidManifest.xml中加入权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>下面进行简单的解释：<br><a id="more"></a></p><p>如果只在Service中写入常在Activity中使用的创建Dialog的代码，运行时是会发生错误的，因为Dialog的显示需要依附于一个确定的Activity类。而以上做法就是声明我们要弹出的这个提示框是一个系统的提示框，即全局性质的提示框，所以只要手机处于开机状态，无论它现在处于何种界面之下，只要调用dialog.show()，就会弹出提示框来。</p><p>需要注意的是，如果用<strong>TYPE_SYSTEM_ALERT</strong>，某些手机对底层进行了修改(小米，魅族之类)，系统会默认会拒绝该权限。解决：通过将<strong>type</strong>设定为<strong>TYPE_TOAST</strong>，就可以绕过检查，这时候需要改动<strong>TYPE_SYSTEM_ALERT</strong>为<strong>TYPE_TOAST</strong></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dialog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设置TextView按下时变换文字颜色</title>
      <link href="/2018/02/07/%E8%AE%BE%E7%BD%AETextView%E6%8C%89%E4%B8%8B%E6%97%B6%E5%8F%98%E6%8D%A2%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2/"/>
      <url>/2018/02/07/%E8%AE%BE%E7%BD%AETextView%E6%8C%89%E4%B8%8B%E6%97%B6%E5%8F%98%E6%8D%A2%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2/</url>
      <content type="html"><![CDATA[<p>在res中建立一个color文件夹，在其中新建一个xml（这里为text_color.xml）：<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;</span><br><span class="line">  &lt;item android:state_pressed=&quot;true&quot; android:color=&quot;@color/white&quot;&gt;&lt;/item&gt;</span><br><span class="line">  &lt;item android:color=&quot;@color/black&quot;&gt;&lt;/item&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><p>然后设置你的TextView属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">  android:id=&quot;@+id/textView&quot;</span><br><span class="line">  android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">  android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">  android:textColor=&quot;@color/text_color&quot;</span><br><span class="line">  android:textSize=&quot;11dp&quot;</span><br><span class="line">  android:clickable=&quot;true&quot;</span><br><span class="line">  android:text=&quot;忘记密码&quot; /&gt;</span><br></pre></td></tr></table></figure><p>重点要讲一下的是clickable属性，默认该属性为false，此时TextView是不可点击的，也就不会有变换颜色的效果。所以要将该属性设为true。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> TextView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android onCreate中获取view宽高为0的解决方法</title>
      <link href="/2018/02/07/android-onCreate%E4%B8%AD%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E4%B8%BA0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/android-onCreate%E4%B8%AD%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E4%B8%BA0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>通过post可以将一个runnable投递到消息队列的尾部，然后等待UI线程Looper调用此runnable的时候，view也已经初始化好了。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">view.post(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        L.i(&quot;post(Runnable) : view.getWidth():&quot; + view.getWidth() + &quot;  view.getHeight():&quot; + view.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android:clipChildren属性的作用</title>
      <link href="/2018/02/07/android-clipChildren%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2018/02/07/android-clipChildren%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>该属性默认为true,这个属性需要添加到最顶层的ViewGroup,作用是控制子View是否可以超出它所在的父View设定的边界<br><a id="more"></a></p><p>比如ImageView设置高度100dp,而它所在的父View设置的高度50dp,那么给这个xml最顶层(注意是最顶层,最顶层不一定是这个ImageView的父View)设置android:clipChildren=”false”,那么这个ImageView是可以显示100dp高度的,否则会被剪切为50dp</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidManifest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SwipeMenuListView在ScrollView里上下滑动导致菜单不能显示完全的bug解决方法</title>
      <link href="/2018/02/07/SwipeMenuListView%E5%9C%A8ScrollView%E9%87%8C%E4%B8%8A%E4%B8%8B%E6%BB%91%E5%8A%A8%E5%AF%BC%E8%87%B4%E8%8F%9C%E5%8D%95%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%AE%8C%E5%85%A8%E7%9A%84bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/07/SwipeMenuListView%E5%9C%A8ScrollView%E9%87%8C%E4%B8%8A%E4%B8%8B%E6%BB%91%E5%8A%A8%E5%AF%BC%E8%87%B4%E8%8F%9C%E5%8D%95%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%AE%8C%E5%85%A8%E7%9A%84bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>这是因为上下滑动的时候,事件被ScrollView截获了,这时候应该禁止ScrollView截获上下滑动事件,解决方法如下<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public class NoRollSwipeMenuListView extends SwipeMenuListView &#123;</span><br><span class="line"></span><br><span class="line">    private GestureDetector mGestureDetector;</span><br><span class="line"></span><br><span class="line">    public NoRollSwipeMenuListView(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        mGestureDetector = new GestureDetector(context, onGestureListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public NoRollSwipeMenuListView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        mGestureDetector = new GestureDetector(context, onGestureListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public NoRollSwipeMenuListView(Context context, AttributeSet attrs, int defStyle) &#123;</span><br><span class="line">        super(context, attrs, defStyle);</span><br><span class="line">        mGestureDetector = new GestureDetector(context, onGestureListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">        int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2, MeasureSpec.AT_MOST);</span><br><span class="line">        super.onMeasure(widthMeasureSpec, expandSpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        boolean b = mGestureDetector.onTouchEvent(ev);</span><br><span class="line">//        LogUtil.w(&quot;onTouchEvent&quot;, &quot;mGestureDetector.onTouchEvent(ev)-&gt;&quot; + b);</span><br><span class="line">        return super.onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private GestureDetector.OnGestureListener onGestureListener = new GestureDetector.SimpleOnGestureListener() &#123;</span><br><span class="line"></span><br><span class="line">        //distanceX 左右滑动距离,左滑动正值,右滑动负值</span><br><span class="line">        //distanceY 上下滑动距离,上滑动正值,下滑动负值</span><br><span class="line">        @Override</span><br><span class="line">        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</span><br><span class="line">            if (Math.abs(distanceY) &gt;= Math.abs(distanceX)) &#123;//上下滑动距离大于左右滑动距离,当作上下滑动</span><br><span class="line">//                LogUtil.w(&quot;onScroll&quot;, &quot;distanceX=&quot; + distanceX + &quot;:distanceY=&quot; + distanceY);</span><br><span class="line">//                LogUtil.w(&quot;onScroll&quot;, &quot;true&quot;);</span><br><span class="line">                //上下滑动不做任何操作,在这里父ScrollView已经交出onTouch权限,否则如果权限在父ScrollView的话这里接收不到事件</span><br><span class="line">                //所以执行到这里是因为下面的setParentScrollAble(false);已经执行过了</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            //当滑动NoRollSwipeMenuListView的时候，让父ScrollView交出onTouch权限，也就是让父ScrollView停住不能滚动</span><br><span class="line">            setParentScrollAble(false);</span><br><span class="line">//            LogUtil.w(&quot;onScroll&quot;, &quot;false&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否把滚动事件交给父ScrollView</span><br><span class="line">     *</span><br><span class="line">     * @param flag</span><br><span class="line">     */</span><br><span class="line">    private void setParentScrollAble(boolean flag) &#123;</span><br><span class="line">        //这里的parentScrollView就是NoRollSwipeMenuListView外面的那个ScrollView</span><br><span class="line">//        LogUtil.w(&quot;setParentScrollAble&quot;, &quot;flag-&gt;&quot; + flag);</span><br><span class="line">        getParent().requestDisallowInterceptTouchEvent(!flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ScrollView </tag>
            
            <tag> SwipeMenuListView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android控制ScrollView滚动</title>
      <link href="/2018/02/07/Android%E6%8E%A7%E5%88%B6ScrollView%E6%BB%9A%E5%8A%A8/"/>
      <url>/2018/02/07/Android%E6%8E%A7%E5%88%B6ScrollView%E6%BB%9A%E5%8A%A8/</url>
      <content type="html"><![CDATA[<p>有两种办法:</p><p>第一种，使用scrollTo(),这个方法不需要handler,直接调用就行</p><p>第二种方式，使用fullScrol(),下面我们看一下这个函数:<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　scrollView.fullScroll(ScrollView.FOCUS_DOWN);滚动到底部</span><br><span class="line">　　scrollView.fullScroll(ScrollView.FOCUS_UP);滚动到顶部</span><br></pre></td></tr></table></figure></p><p>　　需要注意的是，该方法不能直接被调用<br>　　因为Android很多函数都是基于消息队列来同步，所以需要异步操作，<br>　　addView完之后，不等于马上就会显示，而是在队列中等待处理，虽然很快，但是如果立即调用fullScroll， view可能还没有显示出来，所以会失败<br>　　应该通过handler在新线程中更新</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> ScrollView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android的Intent.FLAG_ACTIVITY_CLEAR_TOP无效</title>
      <link href="/2018/02/07/Android%E7%9A%84Intent-FLAG-ACTIVITY-CLEAR-TOP%E6%97%A0%E6%95%88/"/>
      <url>/2018/02/07/Android%E7%9A%84Intent-FLAG-ACTIVITY-CLEAR-TOP%E6%97%A0%E6%95%88/</url>
      <content type="html"><![CDATA[<p>转载:<a href="http://blog.csdn.net/u011361576/article/details/48626237" target="_blank" rel="noopener">http://blog.csdn.net/u011361576/article/details/48626237</a></p><a id="more"></a><p>今天写代码遇到了一个问题：<br>当 B - A - B 跳转的时候，使用Intent的FLAG_ACTIVITY_CLEAR_TOP会让第一个B和第二个A，destory掉，但是当B - A - C跳转的时候不会调用B和A的destory。<br>查看API文档才发现原因，所以这里记录一下避免下次忘记了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static final int FLAG_ACTIVITY_CLEAR_TOP</span><br><span class="line">Added in [API level 1](http://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels)</span><br><span class="line">If set, and the activity being launched is already running in the current task, then instead of launching a new instance of that activity, all of the other activities on top of it will be closed and this Intent will be delivered to the (now on top) old activity as a new Intent.</span><br></pre></td></tr></table></figure><p>如果设置这个属性，是当要启动的Activity已经存在当前Task中，才会在启动的时候销毁其他的Activity。<br>所以上面当A跳C的时候不满足此条件。</p><p>当然如果想实现这个效果可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK);</span><br></pre></td></tr></table></figure></p><p>不过此方法要求最低API为11</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intent </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android-获得&quot;.apk&quot;文件的相关信息。包名、版本号等等</title>
      <link href="/2018/02/07/android-%E8%8E%B7%E5%BE%97-apk%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E3%80%82%E5%8C%85%E5%90%8D%E3%80%81%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AD%89%E7%AD%89/"/>
      <url>/2018/02/07/android-%E8%8E%B7%E5%BE%97-apk%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E3%80%82%E5%8C%85%E5%90%8D%E3%80%81%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AD%89%E7%AD%89/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String filePath = &quot;/sdcard/feijiedemo.apk&quot;;  </span><br><span class="line">PackageManager packageManager = getPackageManager();  </span><br><span class="line">PackageInfo packageInfo = packageManager.getPackageArchiveInfo(filePath, PackageManager.GET_ACTIVITIES);  </span><br><span class="line">Log.d(&quot;name&quot;, packageInfo.packageName);  </span><br><span class="line">Log.d(&quot;uid&quot;, packageInfo.sharedUserId);  </span><br><span class="line">Log.d(&quot;vname&quot;, packageInfo.versionName);  </span><br><span class="line">Log.d(&quot;code&quot;, packageInfo.versionCode+&quot;&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android开发中的MVP实现</title>
      <link href="/2018/02/07/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84MVP%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/02/07/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84MVP%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>最近想要重构代码，因为项目需要给几个学校使用，而每个学校的界面是有差别的，但是功能几乎一模一样，虽然用gradle的分支可以做到代码的差异，但是公共部分的代码逻辑也越来越多，所以想重构一下，最近比较火的MVP模式看了一下，觉得很合适，不过网上很多资料也是抄来抄去，有的还有错误，就想按照自己的理解把MVP模式描述一下，方便他人理解，先说一下大家最熟悉的MVC设计模式吧</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/545982-9f8a3ef4059afdbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="深度截图20161205163205.png"></p><p>MVC模式解耦合了M层和V层，M层和V层通过C层来交互</p><p>然后看一下MVP，我下面的文字以I开头的是接口的意思(手打的图好累…)</p><p><img src="http://upload-images.jianshu.io/upload_images/545982-13e68eadd0829c53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="深度截图20161205160152.png"></p><p>MVP和MVC最大的区别是P层代替了以前的C层，控制的不再是具体的实现而是接口，这样不管是多人开发还是频繁的UI更改，都不会影响P层，只要C和V层的接口不变，UI的改动只需要更改V层的实现而已，C层的实现都不需要改,这样代码就很清晰，而且方便测试，因为逻辑层和视图层完全分离了，下面用代码来说话，还是先来MVC模式的，用登录这个例子吧，android已经很好的把C层和V层分开了，我们写的xml相当于V层，Activity相当于C层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface ICallback&#123;</span><br><span class="line">  void receive(boolean success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class LoginModel&#123;</span><br><span class="line">  public void login(String name,String password,ICallback callback)&#123;</span><br><span class="line">    WebApi.login(name,password,callback);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class LoginActivity extends Activity&#123;</span><br><span class="line">  private LoginModel mLoginModel;</span><br><span class="line">  private EditText mUserNameEt;</span><br><span class="line">  private EditText mPasswordEt;</span><br><span class="line">  private Button mSubmitBtn;</span><br><span class="line">  public void onCreate(......)&#123;</span><br><span class="line">    mLoginModel = new LoginModel(...);</span><br><span class="line">    mSubmitBtn.setOnClickListener(new OnClickListener(View view)&#123;</span><br><span class="line">        mLoginModel.login(mUserNameEt.get...,mPasswordEt.get...,new ICallback()&#123;</span><br><span class="line">          public void receive(boolean success)&#123;</span><br><span class="line">            if(success)&#123;</span><br><span class="line">              startActivity(new Intent(this,MainActivity.class));</span><br><span class="line">              finish();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              Toast.makeText(this,&quot;登录失败&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看一下用MVP模式怎么写,文章下面的评论有哥们说写个契约类,我查了一下,写个契约类是比较方便,所以下面的代码是我改过的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public interface ILoginContract &#123;</span><br><span class="line"></span><br><span class="line">  public interface ILoginModel&#123;</span><br><span class="line">    public void login(String name,String password,ICallback callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public interface ILoginPresenter&#123;</span><br><span class="line">    public void login(String name,String password);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public interface ILoginView&#123;</span><br><span class="line">    public void showDialog();</span><br><span class="line">    public void dismissDialog();</span><br><span class="line">    public void showToast(String message);</span><br><span class="line">    public void navigateToMain();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class PresenterImpl implements ILoginPresenter,ICallback&#123;</span><br><span class="line">  private ILoginView mLoginView;</span><br><span class="line">  private ILoginModel mLoginModel;</span><br><span class="line"></span><br><span class="line">  public PresenterImpl(ILoginView loginView)&#123;</span><br><span class="line">    this.mLoginView = loginView;</span><br><span class="line">    this.mLoginModel = new LoginModelImpl();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void login(String name,String password)&#123;</span><br><span class="line">    if(isEmpty(name)||isEmpty(password))&#123;</span><br><span class="line">        this.mLoginView.showToast(&quot;用户名或密码不能为空&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.mLoginModel.login(name,password,this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void receive(boolean success)&#123;</span><br><span class="line">    if(success)&#123;</span><br><span class="line">      this.mLoginView.navigateToMain();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      this.mLoginView.showToast(&quot;登录失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private boolean isEmpty(String text)&#123;</span><br><span class="line">    return text==null||&quot;&quot;.equals(text)?true:false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class LoginActivity extends Activity implements ILoginView&#123;</span><br><span class="line">  private IPresenter mPresenter;</span><br><span class="line">  private EditText mUserNameEt;</span><br><span class="line">  private EditText mPasswordEt;</span><br><span class="line">  private Button mSubmitBtn;</span><br><span class="line">  public void onCreate(......)&#123;</span><br><span class="line">    mPresenter = new PresenterImpl(this);</span><br><span class="line">    mSubmitBtn.setOnClickListener(new OnClickListener(View view)&#123;</span><br><span class="line">        mPresenter.login(mUserNameEt.getText().toString(),</span><br><span class="line">                          mPasswordEt.getText().toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void showDialog()&#123;</span><br><span class="line">    //显示一个转圈的dialog;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void dismissDialog()&#123;</span><br><span class="line">    //隐藏转圈的dialog;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void showToast(String message)&#123;</span><br><span class="line">    Toast.makeText(this,message,Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void navigateToMain()&#123;</span><br><span class="line">    startActivity(new Intent(this,MainActivity.class));</span><br><span class="line">    finish();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MVP的类和代码确实要多一些，但是这些是非常值得的，可以看出现在的代码逻辑要比MVC模式写起来更清晰，代码测试也更简单，甚至可以在没有页面效果图只有功能的时候完成功能，UI的改变也不会影响任何的业务代码。</p><p>以上MVP设计模式是个人理解，如果有误请指正，谢谢，共同探讨，共同进步</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Fragment在ViewPager中判断显示还是隐藏</title>
      <link href="/2018/02/07/Fragment%E5%9C%A8ViewPager%E4%B8%AD%E5%88%A4%E6%96%AD%E6%98%BE%E7%A4%BA%E8%BF%98%E6%98%AF%E9%9A%90%E8%97%8F/"/>
      <url>/2018/02/07/Fragment%E5%9C%A8ViewPager%E4%B8%AD%E5%88%A4%E6%96%AD%E6%98%BE%E7%A4%BA%E8%BF%98%E6%98%AF%E9%9A%90%E8%97%8F/</url>
      <content type="html"><![CDATA[<p>注意只有在ViewPager中才会调用此方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">public void setUserVisibleHint(boolean isVisibleToUser) &#123;  </span><br><span class="line">  super.setUserVisibleHint(isVisibleToUser);  </span><br><span class="line">  if (isVisibleToUser) &#123;  </span><br><span class="line">  //相当于activity的onResume  </span><br><span class="line">  &#125; else &#123;  </span><br><span class="line">  //相当于activity的onPause  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fragment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>欢迎</title>
      <link href="/2018/02/07/welcome/"/>
      <url>/2018/02/07/welcome/</url>
      <content type="html"><![CDATA[<p>简书不是专门的写技术文章的地方,掘金个人感觉页面太丑而且分类也不方便也不能搜索,所以在gayhub创建了一个博客,记录一些技术文章,Hexo做博客太简单了,分享一个文章,我就按照这个文章做的<br><a id="more"></a></p><p><a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="noopener">Mac上搭建基于GitHub的Hexo博客</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
